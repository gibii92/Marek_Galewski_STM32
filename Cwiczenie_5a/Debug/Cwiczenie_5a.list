
Cwiczenie_5a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002608  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080027d0  080027d0  000127d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800286c  0800286c  00020038  2**0
                  CONTENTS
  4 .ARM          00000008  0800286c  0800286c  0001286c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002874  08002874  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002874  08002874  00012874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002878  08002878  00012878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  0800287c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000038  080028b4  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  080028b4  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004966  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001166  00000000  00000000  000249ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004f0  00000000  00000000  00025b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000448  00000000  00000000  00026028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002425d  00000000  00000000  00026470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000061a8  00000000  00000000  0004a6cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de850  00000000  00000000  00050875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012f0c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001198  00000000  00000000  0012f118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000038 	.word	0x20000038
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080027b8 	.word	0x080027b8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000003c 	.word	0x2000003c
 8000204:	080027b8 	.word	0x080027b8

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <MX_GPIO_Init>:
     PE15   ------> FMC_D12_DA12
     PE13   ------> FMC_D10_DA10
     PB11   ------> USB_OTG_HS_ULPI_D4
*/
void MX_GPIO_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b090      	sub	sp, #64	; 0x40
 8000510:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000512:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]
 800051c:	609a      	str	r2, [r3, #8]
 800051e:	60da      	str	r2, [r3, #12]
 8000520:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000522:	4baf      	ldr	r3, [pc, #700]	; (80007e0 <MX_GPIO_Init+0x2d4>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4aae      	ldr	r2, [pc, #696]	; (80007e0 <MX_GPIO_Init+0x2d4>)
 8000528:	f043 0310 	orr.w	r3, r3, #16
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4bac      	ldr	r3, [pc, #688]	; (80007e0 <MX_GPIO_Init+0x2d4>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f003 0310 	and.w	r3, r3, #16
 8000536:	62bb      	str	r3, [r7, #40]	; 0x28
 8000538:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800053a:	4ba9      	ldr	r3, [pc, #676]	; (80007e0 <MX_GPIO_Init+0x2d4>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4aa8      	ldr	r2, [pc, #672]	; (80007e0 <MX_GPIO_Init+0x2d4>)
 8000540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
 8000546:	4ba6      	ldr	r3, [pc, #664]	; (80007e0 <MX_GPIO_Init+0x2d4>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800054e:	627b      	str	r3, [r7, #36]	; 0x24
 8000550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	4ba3      	ldr	r3, [pc, #652]	; (80007e0 <MX_GPIO_Init+0x2d4>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4aa2      	ldr	r2, [pc, #648]	; (80007e0 <MX_GPIO_Init+0x2d4>)
 8000558:	f043 0302 	orr.w	r3, r3, #2
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
 800055e:	4ba0      	ldr	r3, [pc, #640]	; (80007e0 <MX_GPIO_Init+0x2d4>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	f003 0302 	and.w	r3, r3, #2
 8000566:	623b      	str	r3, [r7, #32]
 8000568:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056a:	4b9d      	ldr	r3, [pc, #628]	; (80007e0 <MX_GPIO_Init+0x2d4>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	4a9c      	ldr	r2, [pc, #624]	; (80007e0 <MX_GPIO_Init+0x2d4>)
 8000570:	f043 0308 	orr.w	r3, r3, #8
 8000574:	6313      	str	r3, [r2, #48]	; 0x30
 8000576:	4b9a      	ldr	r3, [pc, #616]	; (80007e0 <MX_GPIO_Init+0x2d4>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	f003 0308 	and.w	r3, r3, #8
 800057e:	61fb      	str	r3, [r7, #28]
 8000580:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000582:	4b97      	ldr	r3, [pc, #604]	; (80007e0 <MX_GPIO_Init+0x2d4>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	4a96      	ldr	r2, [pc, #600]	; (80007e0 <MX_GPIO_Init+0x2d4>)
 8000588:	f043 0304 	orr.w	r3, r3, #4
 800058c:	6313      	str	r3, [r2, #48]	; 0x30
 800058e:	4b94      	ldr	r3, [pc, #592]	; (80007e0 <MX_GPIO_Init+0x2d4>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	f003 0304 	and.w	r3, r3, #4
 8000596:	61bb      	str	r3, [r7, #24]
 8000598:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	4b91      	ldr	r3, [pc, #580]	; (80007e0 <MX_GPIO_Init+0x2d4>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	4a90      	ldr	r2, [pc, #576]	; (80007e0 <MX_GPIO_Init+0x2d4>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	6313      	str	r3, [r2, #48]	; 0x30
 80005a6:	4b8e      	ldr	r3, [pc, #568]	; (80007e0 <MX_GPIO_Init+0x2d4>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	617b      	str	r3, [r7, #20]
 80005b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80005b2:	4b8b      	ldr	r3, [pc, #556]	; (80007e0 <MX_GPIO_Init+0x2d4>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4a8a      	ldr	r2, [pc, #552]	; (80007e0 <MX_GPIO_Init+0x2d4>)
 80005b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
 80005be:	4b88      	ldr	r3, [pc, #544]	; (80007e0 <MX_GPIO_Init+0x2d4>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005c6:	613b      	str	r3, [r7, #16]
 80005c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80005ca:	4b85      	ldr	r3, [pc, #532]	; (80007e0 <MX_GPIO_Init+0x2d4>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a84      	ldr	r2, [pc, #528]	; (80007e0 <MX_GPIO_Init+0x2d4>)
 80005d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b82      	ldr	r3, [pc, #520]	; (80007e0 <MX_GPIO_Init+0x2d4>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80005e2:	4b7f      	ldr	r3, [pc, #508]	; (80007e0 <MX_GPIO_Init+0x2d4>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a7e      	ldr	r2, [pc, #504]	; (80007e0 <MX_GPIO_Init+0x2d4>)
 80005e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b7c      	ldr	r3, [pc, #496]	; (80007e0 <MX_GPIO_Init+0x2d4>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005fa:	4b79      	ldr	r3, [pc, #484]	; (80007e0 <MX_GPIO_Init+0x2d4>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a78      	ldr	r2, [pc, #480]	; (80007e0 <MX_GPIO_Init+0x2d4>)
 8000600:	f043 0320 	orr.w	r3, r3, #32
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b76      	ldr	r3, [pc, #472]	; (80007e0 <MX_GPIO_Init+0x2d4>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0320 	and.w	r3, r3, #32
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000612:	4b73      	ldr	r3, [pc, #460]	; (80007e0 <MX_GPIO_Init+0x2d4>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a72      	ldr	r2, [pc, #456]	; (80007e0 <MX_GPIO_Init+0x2d4>)
 8000618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b70      	ldr	r3, [pc, #448]	; (80007e0 <MX_GPIO_Init+0x2d4>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D4_Pin|LED4_Pin, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	f248 0110 	movw	r1, #32784	; 0x8010
 8000630:	486c      	ldr	r0, [pc, #432]	; (80007e4 <MX_GPIO_Init+0x2d8>)
 8000632:	f001 fc0b 	bl	8001e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 800063c:	486a      	ldr	r0, [pc, #424]	; (80007e8 <MX_GPIO_Init+0x2dc>)
 800063e:	f001 fc05 	bl	8001e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000642:	2201      	movs	r2, #1
 8000644:	2120      	movs	r1, #32
 8000646:	4869      	ldr	r0, [pc, #420]	; (80007ec <MX_GPIO_Init+0x2e0>)
 8000648:	f001 fc00 	bl	8001e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|LED1_Pin|LCD_DISP_Pin|LCD_D6_Pin, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	f241 010d 	movw	r1, #4109	; 0x100d
 8000652:	4867      	ldr	r0, [pc, #412]	; (80007f0 <MX_GPIO_Init+0x2e4>)
 8000654:	f001 fbfa 	bl	8001e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	2108      	movs	r1, #8
 800065c:	4865      	ldr	r0, [pc, #404]	; (80007f4 <MX_GPIO_Init+0x2e8>)
 800065e:	f001 fbf5 	bl	8001e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, DCMI_PWR_EN_Pin|LCD_D7_Pin, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 8000668:	4863      	ldr	r0, [pc, #396]	; (80007f8 <MX_GPIO_Init+0x2ec>)
 800066a:	f001 fbef 	bl	8001e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin|LCD_RW_Pin, GPIO_PIN_RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	21c0      	movs	r1, #192	; 0xc0
 8000672:	4862      	ldr	r0, [pc, #392]	; (80007fc <MX_GPIO_Init+0x2f0>)
 8000674:	f001 fbea 	bl	8001e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LCD_D5_Pin|LCD_E_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	21c8      	movs	r1, #200	; 0xc8
 800067c:	4860      	ldr	r0, [pc, #384]	; (8000800 <MX_GPIO_Init+0x2f4>)
 800067e:	f001 fbe5 	bl	8001e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000682:	2310      	movs	r3, #16
 8000684:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000686:	2302      	movs	r3, #2
 8000688:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068e:	2300      	movs	r3, #0
 8000690:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000692:	230e      	movs	r3, #14
 8000694:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000696:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800069a:	4619      	mov	r1, r3
 800069c:	4859      	ldr	r0, [pc, #356]	; (8000804 <MX_GPIO_Init+0x2f8>)
 800069e:	f001 fa11 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80006a2:	2308      	movs	r3, #8
 80006a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a6:	2300      	movs	r3, #0
 80006a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006b2:	4619      	mov	r1, r3
 80006b4:	4853      	ldr	r0, [pc, #332]	; (8000804 <MX_GPIO_Init+0x2f8>)
 80006b6:	f001 fa05 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80006ba:	2304      	movs	r3, #4
 80006bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006be:	2302      	movs	r3, #2
 80006c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c6:	2303      	movs	r3, #3
 80006c8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80006ca:	2309      	movs	r3, #9
 80006cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80006ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006d2:	4619      	mov	r1, r3
 80006d4:	484b      	ldr	r0, [pc, #300]	; (8000804 <MX_GPIO_Init+0x2f8>)
 80006d6:	f001 f9f5 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80006da:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80006de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e0:	2302      	movs	r3, #2
 80006e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e8:	2303      	movs	r3, #3
 80006ea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006ec:	230b      	movs	r3, #11
 80006ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006f4:	4619      	mov	r1, r3
 80006f6:	4842      	ldr	r0, [pc, #264]	; (8000800 <MX_GPIO_Init+0x2f4>)
 80006f8:	f001 f9e4 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80006fc:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000700:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000702:	2302      	movs	r3, #2
 8000704:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800070a:	2303      	movs	r3, #3
 800070c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800070e:	230c      	movs	r3, #12
 8000710:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000712:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000716:	4619      	mov	r1, r3
 8000718:	483a      	ldr	r0, [pc, #232]	; (8000804 <MX_GPIO_Init+0x2f8>)
 800071a:	f001 f9d3 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 800071e:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000724:	2302      	movs	r3, #2
 8000726:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800072c:	2303      	movs	r3, #3
 800072e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000730:	230a      	movs	r3, #10
 8000732:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000734:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000738:	4619      	mov	r1, r3
 800073a:	482a      	ldr	r0, [pc, #168]	; (80007e4 <MX_GPIO_Init+0x2d8>)
 800073c:	f001 f9c2 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_D4_Pin;
 8000740:	2310      	movs	r3, #16
 8000742:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000744:	2301      	movs	r3, #1
 8000746:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800074c:	2301      	movs	r3, #1
 800074e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_D4_GPIO_Port, &GPIO_InitStruct);
 8000750:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000754:	4619      	mov	r1, r3
 8000756:	4823      	ldr	r0, [pc, #140]	; (80007e4 <MX_GPIO_Init+0x2d8>)
 8000758:	f001 f9b4 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800075c:	2380      	movs	r3, #128	; 0x80
 800075e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000760:	2302      	movs	r3, #2
 8000762:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000768:	2300      	movs	r3, #0
 800076a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800076c:	2308      	movs	r3, #8
 800076e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000770:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000774:	4619      	mov	r1, r3
 8000776:	481d      	ldr	r0, [pc, #116]	; (80007ec <MX_GPIO_Init+0x2e0>)
 8000778:	f001 f9a4 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 800077c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000780:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000782:	2302      	movs	r3, #2
 8000784:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078a:	2303      	movs	r3, #3
 800078c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800078e:	230c      	movs	r3, #12
 8000790:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000792:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000796:	4619      	mov	r1, r3
 8000798:	4818      	ldr	r0, [pc, #96]	; (80007fc <MX_GPIO_Init+0x2f0>)
 800079a:	f001 f993 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin;
 800079e:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80007a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a4:	2301      	movs	r3, #1
 80007a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ac:	2300      	movs	r3, #0
 80007ae:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007b4:	4619      	mov	r1, r3
 80007b6:	480c      	ldr	r0, [pc, #48]	; (80007e8 <MX_GPIO_Init+0x2dc>)
 80007b8:	f001 f984 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80007bc:	2360      	movs	r3, #96	; 0x60
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c0:	2302      	movs	r3, #2
 80007c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007cc:	230d      	movs	r3, #13
 80007ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007d4:	4619      	mov	r1, r3
 80007d6:	480b      	ldr	r0, [pc, #44]	; (8000804 <MX_GPIO_Init+0x2f8>)
 80007d8:	f001 f974 	bl	8001ac4 <HAL_GPIO_Init>
 80007dc:	e014      	b.n	8000808 <MX_GPIO_Init+0x2fc>
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40020400 	.word	0x40020400
 80007e8:	40020000 	.word	0x40020000
 80007ec:	40020c00 	.word	0x40020c00
 80007f0:	40022000 	.word	0x40022000
 80007f4:	40022800 	.word	0x40022800
 80007f8:	40021c00 	.word	0x40021c00
 80007fc:	40020800 	.word	0x40020800
 8000800:	40021800 	.word	0x40021800
 8000804:	40021000 	.word	0x40021000

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BT3_Pin|BT1_Pin;
 8000808:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800080c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080e:	2300      	movs	r3, #0
 8000810:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000812:	2301      	movs	r3, #1
 8000814:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000816:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800081a:	4619      	mov	r1, r3
 800081c:	48bc      	ldr	r0, [pc, #752]	; (8000b10 <MX_GPIO_Init+0x604>)
 800081e:	f001 f951 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000822:	2380      	movs	r3, #128	; 0x80
 8000824:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000826:	2302      	movs	r3, #2
 8000828:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000832:	2307      	movs	r3, #7
 8000834:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000836:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800083a:	4619      	mov	r1, r3
 800083c:	48b4      	ldr	r0, [pc, #720]	; (8000b10 <MX_GPIO_Init+0x604>)
 800083e:	f001 f941 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000842:	2340      	movs	r3, #64	; 0x40
 8000844:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	2302      	movs	r3, #2
 8000848:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084e:	2303      	movs	r3, #3
 8000850:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000852:	230a      	movs	r3, #10
 8000854:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000856:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800085a:	4619      	mov	r1, r3
 800085c:	48ac      	ldr	r0, [pc, #688]	; (8000b10 <MX_GPIO_Init+0x604>)
 800085e:	f001 f931 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000862:	f248 1333 	movw	r3, #33075	; 0x8133
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000868:	2302      	movs	r3, #2
 800086a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000870:	2303      	movs	r3, #3
 8000872:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000874:	230c      	movs	r3, #12
 8000876:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000878:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800087c:	4619      	mov	r1, r3
 800087e:	48a5      	ldr	r0, [pc, #660]	; (8000b14 <MX_GPIO_Init+0x608>)
 8000880:	f001 f920 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000884:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000888:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000896:	230e      	movs	r3, #14
 8000898:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800089a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800089e:	4619      	mov	r1, r3
 80008a0:	489d      	ldr	r0, [pc, #628]	; (8000b18 <MX_GPIO_Init+0x60c>)
 80008a2:	f001 f90f 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80008a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ac:	2300      	movs	r3, #0
 80008ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008b8:	4619      	mov	r1, r3
 80008ba:	4897      	ldr	r0, [pc, #604]	; (8000b18 <MX_GPIO_Init+0x60c>)
 80008bc:	f001 f902 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80008c0:	2340      	movs	r3, #64	; 0x40
 80008c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008c4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008d2:	4619      	mov	r1, r3
 80008d4:	4891      	ldr	r0, [pc, #580]	; (8000b1c <MX_GPIO_Init+0x610>)
 80008d6:	f001 f8f5 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80008da:	f24c 7303 	movw	r3, #50947	; 0xc703
 80008de:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e0:	2302      	movs	r3, #2
 80008e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e8:	2303      	movs	r3, #3
 80008ea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008ec:	230c      	movs	r3, #12
 80008ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008f4:	4619      	mov	r1, r3
 80008f6:	4889      	ldr	r0, [pc, #548]	; (8000b1c <MX_GPIO_Init+0x610>)
 80008f8:	f001 f8e4 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80008fc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000900:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090a:	2303      	movs	r3, #3
 800090c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800090e:	230a      	movs	r3, #10
 8000910:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000912:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000916:	4619      	mov	r1, r3
 8000918:	4881      	ldr	r0, [pc, #516]	; (8000b20 <MX_GPIO_Init+0x614>)
 800091a:	f001 f8d3 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800091e:	23f0      	movs	r3, #240	; 0xf0
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800092e:	230a      	movs	r3, #10
 8000930:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000932:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000936:	4619      	mov	r1, r3
 8000938:	487a      	ldr	r0, [pc, #488]	; (8000b24 <MX_GPIO_Init+0x618>)
 800093a:	f001 f8c3 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin PKPin PKPin
                           PKPin PKPin PKPin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800093e:	23f7      	movs	r3, #247	; 0xf7
 8000940:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800094e:	230e      	movs	r3, #14
 8000950:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000952:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000956:	4619      	mov	r1, r3
 8000958:	4873      	ldr	r0, [pc, #460]	; (8000b28 <MX_GPIO_Init+0x61c>)
 800095a:	f001 f8b3 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 800095e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000962:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000970:	2309      	movs	r3, #9
 8000972:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000978:	4619      	mov	r1, r3
 800097a:	4866      	ldr	r0, [pc, #408]	; (8000b14 <MX_GPIO_Init+0x608>)
 800097c:	f001 f8a2 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000980:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000984:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	2302      	movs	r3, #2
 8000988:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000992:	230a      	movs	r3, #10
 8000994:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800099a:	4619      	mov	r1, r3
 800099c:	485d      	ldr	r0, [pc, #372]	; (8000b14 <MX_GPIO_Init+0x608>)
 800099e:	f001 f891 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009a2:	2320      	movs	r3, #32
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a6:	2301      	movs	r3, #1
 80009a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009b6:	4619      	mov	r1, r3
 80009b8:	4858      	ldr	r0, [pc, #352]	; (8000b1c <MX_GPIO_Init+0x610>)
 80009ba:	f001 f883 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80009be:	2308      	movs	r3, #8
 80009c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80009ce:	230d      	movs	r3, #13
 80009d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009d6:	4619      	mov	r1, r3
 80009d8:	4850      	ldr	r0, [pc, #320]	; (8000b1c <MX_GPIO_Init+0x610>)
 80009da:	f001 f873 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|LED1_Pin|LCD_DISP_Pin;
 80009de:	f241 030c 	movw	r3, #4108	; 0x100c
 80009e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e4:	2301      	movs	r3, #1
 80009e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	2300      	movs	r3, #0
 80009ee:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80009f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009f4:	4619      	mov	r1, r3
 80009f6:	484b      	ldr	r0, [pc, #300]	; (8000b24 <MX_GPIO_Init+0x618>)
 80009f8:	f001 f864 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80009fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a02:	2300      	movs	r3, #0
 8000a04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4846      	ldr	r0, [pc, #280]	; (8000b2c <MX_GPIO_Init+0x620>)
 8000a12:	f001 f857 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000a16:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a24:	2303      	movs	r3, #3
 8000a26:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a28:	230c      	movs	r3, #12
 8000a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a30:	4619      	mov	r1, r3
 8000a32:	483f      	ldr	r0, [pc, #252]	; (8000b30 <MX_GPIO_Init+0x624>)
 8000a34:	f001 f846 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000a38:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8000a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a46:	2300      	movs	r3, #0
 8000a48:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a4a:	230e      	movs	r3, #14
 8000a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a52:	4619      	mov	r1, r3
 8000a54:	4833      	ldr	r0, [pc, #204]	; (8000b24 <MX_GPIO_Init+0x618>)
 8000a56:	f001 f835 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000a5a:	2308      	movs	r3, #8
 8000a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	2300      	movs	r3, #0
 8000a68:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000a6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a6e:	4619      	mov	r1, r3
 8000a70:	482d      	ldr	r0, [pc, #180]	; (8000b28 <MX_GPIO_Init+0x61c>)
 8000a72:	f001 f827 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000a76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2300      	movs	r3, #0
 8000a86:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000a88:	230d      	movs	r3, #13
 8000a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a90:	4619      	mov	r1, r3
 8000a92:	4820      	ldr	r0, [pc, #128]	; (8000b14 <MX_GPIO_Init+0x608>)
 8000a94:	f001 f816 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a98:	2310      	movs	r3, #16
 8000a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aa4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	481c      	ldr	r0, [pc, #112]	; (8000b1c <MX_GPIO_Init+0x610>)
 8000aac:	f001 f80a 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000ab0:	2304      	movs	r3, #4
 8000ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abc:	2303      	movs	r3, #3
 8000abe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000ac0:	230c      	movs	r3, #12
 8000ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4814      	ldr	r0, [pc, #80]	; (8000b1c <MX_GPIO_Init+0x610>)
 8000acc:	f000 fffa 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000ad0:	f248 0304 	movw	r3, #32772	; 0x8004
 8000ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ade:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4813      	ldr	r0, [pc, #76]	; (8000b34 <MX_GPIO_Init+0x628>)
 8000ae6:	f000 ffed 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BT2_Pin;
 8000aea:	2302      	movs	r3, #2
 8000aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aee:	2300      	movs	r3, #0
 8000af0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(BT2_GPIO_Port, &GPIO_InitStruct);
 8000af6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000afa:	4619      	mov	r1, r3
 8000afc:	4809      	ldr	r0, [pc, #36]	; (8000b24 <MX_GPIO_Init+0x618>)
 8000afe:	f000 ffe1 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000b02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	633b      	str	r3, [r7, #48]	; 0x30
 8000b0c:	e014      	b.n	8000b38 <MX_GPIO_Init+0x62c>
 8000b0e:	bf00      	nop
 8000b10:	40020400 	.word	0x40020400
 8000b14:	40021800 	.word	0x40021800
 8000b18:	40022400 	.word	0x40022400
 8000b1c:	40020c00 	.word	0x40020c00
 8000b20:	40020000 	.word	0x40020000
 8000b24:	40022000 	.word	0x40022000
 8000b28:	40022800 	.word	0x40022800
 8000b2c:	40020800 	.word	0x40020800
 8000b30:	40021400 	.word	0x40021400
 8000b34:	40021c00 	.word	0x40021c00
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b44:	4619      	mov	r1, r3
 8000b46:	48b1      	ldr	r0, [pc, #708]	; (8000e0c <MX_GPIO_Init+0x900>)
 8000b48:	f000 ffbc 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000b4c:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000b50:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	2302      	movs	r3, #2
 8000b54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b5e:	230d      	movs	r3, #13
 8000b60:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b66:	4619      	mov	r1, r3
 8000b68:	48a8      	ldr	r0, [pc, #672]	; (8000e0c <MX_GPIO_Init+0x900>)
 8000b6a:	f000 ffab 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_D6_Pin;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b72:	2301      	movs	r3, #1
 8000b74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_D6_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b82:	4619      	mov	r1, r3
 8000b84:	48a2      	ldr	r0, [pc, #648]	; (8000e10 <MX_GPIO_Init+0x904>)
 8000b86:	f000 ff9d 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000b8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b90:	2302      	movs	r3, #2
 8000b92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b9c:	2307      	movs	r3, #7
 8000b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	489b      	ldr	r0, [pc, #620]	; (8000e14 <MX_GPIO_Init+0x908>)
 8000ba8:	f000 ff8c 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000bac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bb2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bb6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4893      	ldr	r0, [pc, #588]	; (8000e10 <MX_GPIO_Init+0x904>)
 8000bc4:	f000 ff7e 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_RW_Pin;
 8000bc8:	23c0      	movs	r3, #192	; 0xc0
 8000bca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bdc:	4619      	mov	r1, r3
 8000bde:	488e      	ldr	r0, [pc, #568]	; (8000e18 <MX_GPIO_Init+0x90c>)
 8000be0:	f000 ff70 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000be4:	2310      	movs	r3, #16
 8000be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000bf4:	230a      	movs	r3, #10
 8000bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000bf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4883      	ldr	r0, [pc, #524]	; (8000e0c <MX_GPIO_Init+0x900>)
 8000c00:	f000 ff60 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000c04:	2328      	movs	r3, #40	; 0x28
 8000c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c10:	2303      	movs	r3, #3
 8000c12:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c14:	230c      	movs	r3, #12
 8000c16:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	487b      	ldr	r0, [pc, #492]	; (8000e0c <MX_GPIO_Init+0x900>)
 8000c20:	f000 ff50 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LCD_D5_Pin|LCD_E_Pin;
 8000c24:	23c0      	movs	r3, #192	; 0xc0
 8000c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000c30:	2301      	movs	r3, #1
 8000c32:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4878      	ldr	r0, [pc, #480]	; (8000e1c <MX_GPIO_Init+0x910>)
 8000c3c:	f000 ff42 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000c40:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000c44:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c52:	4619      	mov	r1, r3
 8000c54:	4872      	ldr	r0, [pc, #456]	; (8000e20 <MX_GPIO_Init+0x914>)
 8000c56:	f000 ff35 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000c5a:	2308      	movs	r3, #8
 8000c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c66:	2303      	movs	r3, #3
 8000c68:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c6a:	230c      	movs	r3, #12
 8000c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c72:	4619      	mov	r1, r3
 8000c74:	4868      	ldr	r0, [pc, #416]	; (8000e18 <MX_GPIO_Init+0x90c>)
 8000c76:	f000 ff25 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000c7a:	2305      	movs	r3, #5
 8000c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c86:	2303      	movs	r3, #3
 8000c88:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000c8a:	230a      	movs	r3, #10
 8000c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c92:	4619      	mov	r1, r3
 8000c94:	4860      	ldr	r0, [pc, #384]	; (8000e18 <MX_GPIO_Init+0x90c>)
 8000c96:	f000 ff15 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c9a:	2332      	movs	r3, #50	; 0x32
 8000c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000caa:	230b      	movs	r3, #11
 8000cac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4858      	ldr	r0, [pc, #352]	; (8000e18 <MX_GPIO_Init+0x90c>)
 8000cb6:	f000 ff05 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cba:	2304      	movs	r3, #4
 8000cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000cca:	2309      	movs	r3, #9
 8000ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4853      	ldr	r0, [pc, #332]	; (8000e24 <MX_GPIO_Init+0x918>)
 8000cd6:	f000 fef5 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000cda:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000cec:	2309      	movs	r3, #9
 8000cee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	484c      	ldr	r0, [pc, #304]	; (8000e28 <MX_GPIO_Init+0x91c>)
 8000cf8:	f000 fee4 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8000cfc:	2308      	movs	r3, #8
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d00:	2301      	movs	r3, #1
 8000d02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8000d0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d10:	4619      	mov	r1, r3
 8000d12:	4842      	ldr	r0, [pc, #264]	; (8000e1c <MX_GPIO_Init+0x910>)
 8000d14:	f000 fed6 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000d18:	2304      	movs	r3, #4
 8000d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000d24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d28:	4619      	mov	r1, r3
 8000d2a:	483c      	ldr	r0, [pc, #240]	; (8000e1c <MX_GPIO_Init+0x910>)
 8000d2c:	f000 feca 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d30:	2386      	movs	r3, #134	; 0x86
 8000d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d40:	230b      	movs	r3, #11
 8000d42:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4832      	ldr	r0, [pc, #200]	; (8000e14 <MX_GPIO_Init+0x908>)
 8000d4c:	f000 feba 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000d50:	2301      	movs	r3, #1
 8000d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d54:	2303      	movs	r3, #3
 8000d56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000d5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d60:	4619      	mov	r1, r3
 8000d62:	482c      	ldr	r0, [pc, #176]	; (8000e14 <MX_GPIO_Init+0x908>)
 8000d64:	f000 feae 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000d68:	2350      	movs	r3, #80	; 0x50
 8000d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d74:	2300      	movs	r3, #0
 8000d76:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d78:	230d      	movs	r3, #13
 8000d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d80:	4619      	mov	r1, r3
 8000d82:	4824      	ldr	r0, [pc, #144]	; (8000e14 <MX_GPIO_Init+0x908>)
 8000d84:	f000 fe9e 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000d88:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d8e:	2312      	movs	r3, #18
 8000d90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d96:	2303      	movs	r3, #3
 8000d98:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d9a:	2304      	movs	r3, #4
 8000d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000da2:	4619      	mov	r1, r3
 8000da4:	4819      	ldr	r0, [pc, #100]	; (8000e0c <MX_GPIO_Init+0x900>)
 8000da6:	f000 fe8d 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000daa:	2328      	movs	r3, #40	; 0x28
 8000dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dae:	2302      	movs	r3, #2
 8000db0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db6:	2303      	movs	r3, #3
 8000db8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000dba:	230a      	movs	r3, #10
 8000dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4813      	ldr	r0, [pc, #76]	; (8000e14 <MX_GPIO_Init+0x908>)
 8000dc6:	f000 fe7d 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_D7_Pin;
 8000dca:	2340      	movs	r3, #64	; 0x40
 8000dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_D7_GPIO_Port, &GPIO_InitStruct);
 8000dda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dde:	4619      	mov	r1, r3
 8000de0:	480a      	ldr	r0, [pc, #40]	; (8000e0c <MX_GPIO_Init+0x900>)
 8000de2:	f000 fe6f 	bl	8001ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED4_Pin;
 8000de6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dec:	2301      	movs	r3, #1
 8000dee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df4:	2300      	movs	r3, #0
 8000df6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 8000df8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4809      	ldr	r0, [pc, #36]	; (8000e24 <MX_GPIO_Init+0x918>)
 8000e00:	f000 fe60 	bl	8001ac4 <HAL_GPIO_Init>

}
 8000e04:	bf00      	nop
 8000e06:	3740      	adds	r7, #64	; 0x40
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40021c00 	.word	0x40021c00
 8000e10:	40022000 	.word	0x40022000
 8000e14:	40020000 	.word	0x40020000
 8000e18:	40020800 	.word	0x40020800
 8000e1c:	40021800 	.word	0x40021800
 8000e20:	40021400 	.word	0x40021400
 8000e24:	40020400 	.word	0x40020400
 8000e28:	40020c00 	.word	0x40020c00

08000e2c <LCD_WriteNibble>:
#include "lcd.h"
#include "gpio.h"
GPIO_InitTypeDef GPIO_InitStruct;
//-----------------------------------------------------------------------------
void LCD_WriteNibble(char nibbleToWrite)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8000e36:	2201      	movs	r2, #1
 8000e38:	2140      	movs	r1, #64	; 0x40
 8000e3a:	4818      	ldr	r0, [pc, #96]	; (8000e9c <LCD_WriteNibble+0x70>)
 8000e3c:	f001 f806 	bl	8001e4c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (GPIO_PinState)(nibbleToWrite & 0x01));
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	461a      	mov	r2, r3
 8000e4a:	2110      	movs	r1, #16
 8000e4c:	4814      	ldr	r0, [pc, #80]	; (8000ea0 <LCD_WriteNibble+0x74>)
 8000e4e:	f000 fffd 	bl	8001e4c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (GPIO_PinState)(nibbleToWrite & 0x02));
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	f003 0302 	and.w	r3, r3, #2
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	2180      	movs	r1, #128	; 0x80
 8000e5e:	480f      	ldr	r0, [pc, #60]	; (8000e9c <LCD_WriteNibble+0x70>)
 8000e60:	f000 fff4 	bl	8001e4c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (GPIO_PinState)(nibbleToWrite & 0x04));
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	f003 0304 	and.w	r3, r3, #4
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	2101      	movs	r1, #1
 8000e70:	480c      	ldr	r0, [pc, #48]	; (8000ea4 <LCD_WriteNibble+0x78>)
 8000e72:	f000 ffeb 	bl	8001e4c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (GPIO_PinState)(nibbleToWrite & 0x08));
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	f003 0308 	and.w	r3, r3, #8
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	461a      	mov	r2, r3
 8000e80:	2140      	movs	r1, #64	; 0x40
 8000e82:	4809      	ldr	r0, [pc, #36]	; (8000ea8 <LCD_WriteNibble+0x7c>)
 8000e84:	f000 ffe2 	bl	8001e4c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2140      	movs	r1, #64	; 0x40
 8000e8c:	4803      	ldr	r0, [pc, #12]	; (8000e9c <LCD_WriteNibble+0x70>)
 8000e8e:	f000 ffdd 	bl	8001e4c <HAL_GPIO_WritePin>
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40021800 	.word	0x40021800
 8000ea0:	40020400 	.word	0x40020400
 8000ea4:	40022000 	.word	0x40022000
 8000ea8:	40021c00 	.word	0x40021c00

08000eac <LCD_ReadNibble>:
//-----------------------------------------------------------------------------
unsigned char LCD_ReadNibble(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
  unsigned char tmp = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	2140      	movs	r1, #64	; 0x40
 8000eba:	481e      	ldr	r0, [pc, #120]	; (8000f34 <LCD_ReadNibble+0x88>)
 8000ebc:	f000 ffc6 	bl	8001e4c <HAL_GPIO_WritePin>
  tmp |= (HAL_GPIO_ReadPin(LCD_D4_GPIO_Port, LCD_D4_Pin) << 0);
 8000ec0:	2110      	movs	r1, #16
 8000ec2:	481d      	ldr	r0, [pc, #116]	; (8000f38 <LCD_ReadNibble+0x8c>)
 8000ec4:	f000 ffaa 	bl	8001e1c <HAL_GPIO_ReadPin>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	b25a      	sxtb	r2, r3
 8000ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	b25b      	sxtb	r3, r3
 8000ed4:	71fb      	strb	r3, [r7, #7]
  tmp |= (HAL_GPIO_ReadPin(LCD_D5_GPIO_Port, LCD_D5_Pin) << 1);
 8000ed6:	2180      	movs	r1, #128	; 0x80
 8000ed8:	4816      	ldr	r0, [pc, #88]	; (8000f34 <LCD_ReadNibble+0x88>)
 8000eda:	f000 ff9f 	bl	8001e1c <HAL_GPIO_ReadPin>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	b25a      	sxtb	r2, r3
 8000ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	b25b      	sxtb	r3, r3
 8000eec:	71fb      	strb	r3, [r7, #7]
  tmp |= (HAL_GPIO_ReadPin(LCD_D6_GPIO_Port, LCD_D6_Pin) << 2);
 8000eee:	2101      	movs	r1, #1
 8000ef0:	4812      	ldr	r0, [pc, #72]	; (8000f3c <LCD_ReadNibble+0x90>)
 8000ef2:	f000 ff93 	bl	8001e1c <HAL_GPIO_ReadPin>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	b25a      	sxtb	r2, r3
 8000efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	b25b      	sxtb	r3, r3
 8000f04:	71fb      	strb	r3, [r7, #7]
  tmp |= (HAL_GPIO_ReadPin(LCD_D7_GPIO_Port, LCD_D7_Pin) << 3);
 8000f06:	2140      	movs	r1, #64	; 0x40
 8000f08:	480d      	ldr	r0, [pc, #52]	; (8000f40 <LCD_ReadNibble+0x94>)
 8000f0a:	f000 ff87 	bl	8001e1c <HAL_GPIO_ReadPin>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	b25a      	sxtb	r2, r3
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	b25b      	sxtb	r3, r3
 8000f1c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2140      	movs	r1, #64	; 0x40
 8000f22:	4804      	ldr	r0, [pc, #16]	; (8000f34 <LCD_ReadNibble+0x88>)
 8000f24:	f000 ff92 	bl	8001e4c <HAL_GPIO_WritePin>
  return tmp;
 8000f28:	79fb      	ldrb	r3, [r7, #7]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40021800 	.word	0x40021800
 8000f38:	40020400 	.word	0x40020400
 8000f3c:	40022000 	.word	0x40022000
 8000f40:	40021c00 	.word	0x40021c00

08000f44 <LCD_SetDataPinInput>:
//-----------------------------------------------------------------------------
void LCD_SetDataPinInput(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Pin =  LCD_D4_Pin;
 8000f48:	4b20      	ldr	r3, [pc, #128]	; (8000fcc <LCD_SetDataPinInput+0x88>)
 8000f4a:	2210      	movs	r2, #16
 8000f4c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f4e:	4b1f      	ldr	r3, [pc, #124]	; (8000fcc <LCD_SetDataPinInput+0x88>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f54:	4b1d      	ldr	r3, [pc, #116]	; (8000fcc <LCD_SetDataPinInput+0x88>)
 8000f56:	2201      	movs	r2, #1
 8000f58:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000f5a:	4b1c      	ldr	r3, [pc, #112]	; (8000fcc <LCD_SetDataPinInput+0x88>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LCD_D4_GPIO_Port, &GPIO_InitStruct);
 8000f60:	491a      	ldr	r1, [pc, #104]	; (8000fcc <LCD_SetDataPinInput+0x88>)
 8000f62:	481b      	ldr	r0, [pc, #108]	; (8000fd0 <LCD_SetDataPinInput+0x8c>)
 8000f64:	f000 fdae 	bl	8001ac4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin =  LCD_D5_Pin;
 8000f68:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <LCD_SetDataPinInput+0x88>)
 8000f6a:	2280      	movs	r2, #128	; 0x80
 8000f6c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6e:	4b17      	ldr	r3, [pc, #92]	; (8000fcc <LCD_SetDataPinInput+0x88>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f74:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <LCD_SetDataPinInput+0x88>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000f7a:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <LCD_SetDataPinInput+0x88>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LCD_D5_GPIO_Port, &GPIO_InitStruct);
 8000f80:	4912      	ldr	r1, [pc, #72]	; (8000fcc <LCD_SetDataPinInput+0x88>)
 8000f82:	4814      	ldr	r0, [pc, #80]	; (8000fd4 <LCD_SetDataPinInput+0x90>)
 8000f84:	f000 fd9e 	bl	8001ac4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin =  LCD_D6_Pin;
 8000f88:	4b10      	ldr	r3, [pc, #64]	; (8000fcc <LCD_SetDataPinInput+0x88>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <LCD_SetDataPinInput+0x88>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f94:	4b0d      	ldr	r3, [pc, #52]	; (8000fcc <LCD_SetDataPinInput+0x88>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000f9a:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <LCD_SetDataPinInput+0x88>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LCD_D6_GPIO_Port, &GPIO_InitStruct);
 8000fa0:	490a      	ldr	r1, [pc, #40]	; (8000fcc <LCD_SetDataPinInput+0x88>)
 8000fa2:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <LCD_SetDataPinInput+0x94>)
 8000fa4:	f000 fd8e 	bl	8001ac4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin =  LCD_D7_Pin;
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <LCD_SetDataPinInput+0x88>)
 8000faa:	2240      	movs	r2, #64	; 0x40
 8000fac:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fae:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <LCD_SetDataPinInput+0x88>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <LCD_SetDataPinInput+0x88>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000fba:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <LCD_SetDataPinInput+0x88>)
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LCD_D7_GPIO_Port, &GPIO_InitStruct);
 8000fc0:	4902      	ldr	r1, [pc, #8]	; (8000fcc <LCD_SetDataPinInput+0x88>)
 8000fc2:	4806      	ldr	r0, [pc, #24]	; (8000fdc <LCD_SetDataPinInput+0x98>)
 8000fc4:	f000 fd7e 	bl	8001ac4 <HAL_GPIO_Init>

}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000054 	.word	0x20000054
 8000fd0:	40020400 	.word	0x40020400
 8000fd4:	40021800 	.word	0x40021800
 8000fd8:	40022000 	.word	0x40022000
 8000fdc:	40021c00 	.word	0x40021c00

08000fe0 <LCD_SetDataPinOutput>:
//-----------------------------------------------------------------------------
void LCD_SetDataPinOutput(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Pin = LCD_D4_Pin;
 8000fe4:	4b20      	ldr	r3, [pc, #128]	; (8001068 <LCD_SetDataPinOutput+0x88>)
 8000fe6:	2210      	movs	r2, #16
 8000fe8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fea:	4b1f      	ldr	r3, [pc, #124]	; (8001068 <LCD_SetDataPinOutput+0x88>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <LCD_SetDataPinOutput+0x88>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000ff6:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <LCD_SetDataPinOutput+0x88>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LCD_D4_GPIO_Port, &GPIO_InitStruct);
 8000ffc:	491a      	ldr	r1, [pc, #104]	; (8001068 <LCD_SetDataPinOutput+0x88>)
 8000ffe:	481b      	ldr	r0, [pc, #108]	; (800106c <LCD_SetDataPinOutput+0x8c>)
 8001000:	f000 fd60 	bl	8001ac4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_D5_Pin;
 8001004:	4b18      	ldr	r3, [pc, #96]	; (8001068 <LCD_SetDataPinOutput+0x88>)
 8001006:	2280      	movs	r2, #128	; 0x80
 8001008:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100a:	4b17      	ldr	r3, [pc, #92]	; (8001068 <LCD_SetDataPinOutput+0x88>)
 800100c:	2201      	movs	r2, #1
 800100e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	4b15      	ldr	r3, [pc, #84]	; (8001068 <LCD_SetDataPinOutput+0x88>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001016:	4b14      	ldr	r3, [pc, #80]	; (8001068 <LCD_SetDataPinOutput+0x88>)
 8001018:	2201      	movs	r2, #1
 800101a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LCD_D5_GPIO_Port, &GPIO_InitStruct);
 800101c:	4912      	ldr	r1, [pc, #72]	; (8001068 <LCD_SetDataPinOutput+0x88>)
 800101e:	4814      	ldr	r0, [pc, #80]	; (8001070 <LCD_SetDataPinOutput+0x90>)
 8001020:	f000 fd50 	bl	8001ac4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_D6_Pin;
 8001024:	4b10      	ldr	r3, [pc, #64]	; (8001068 <LCD_SetDataPinOutput+0x88>)
 8001026:	2201      	movs	r2, #1
 8001028:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102a:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <LCD_SetDataPinOutput+0x88>)
 800102c:	2201      	movs	r2, #1
 800102e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <LCD_SetDataPinOutput+0x88>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <LCD_SetDataPinOutput+0x88>)
 8001038:	2201      	movs	r2, #1
 800103a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LCD_D6_GPIO_Port, &GPIO_InitStruct);
 800103c:	490a      	ldr	r1, [pc, #40]	; (8001068 <LCD_SetDataPinOutput+0x88>)
 800103e:	480d      	ldr	r0, [pc, #52]	; (8001074 <LCD_SetDataPinOutput+0x94>)
 8001040:	f000 fd40 	bl	8001ac4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_D7_Pin;
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <LCD_SetDataPinOutput+0x88>)
 8001046:	2240      	movs	r2, #64	; 0x40
 8001048:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800104a:	4b07      	ldr	r3, [pc, #28]	; (8001068 <LCD_SetDataPinOutput+0x88>)
 800104c:	2201      	movs	r2, #1
 800104e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <LCD_SetDataPinOutput+0x88>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001056:	4b04      	ldr	r3, [pc, #16]	; (8001068 <LCD_SetDataPinOutput+0x88>)
 8001058:	2201      	movs	r2, #1
 800105a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LCD_D7_GPIO_Port, &GPIO_InitStruct);
 800105c:	4902      	ldr	r1, [pc, #8]	; (8001068 <LCD_SetDataPinOutput+0x88>)
 800105e:	4806      	ldr	r0, [pc, #24]	; (8001078 <LCD_SetDataPinOutput+0x98>)
 8001060:	f000 fd30 	bl	8001ac4 <HAL_GPIO_Init>

}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000054 	.word	0x20000054
 800106c:	40020400 	.word	0x40020400
 8001070:	40021800 	.word	0x40021800
 8001074:	40022000 	.word	0x40022000
 8001078:	40021c00 	.word	0x40021c00

0800107c <LCD_ReadStatus>:
//-----------------------------------------------------------------------------
unsigned char LCD_ReadStatus(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
  unsigned char status = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	71fb      	strb	r3, [r7, #7]

  LCD_SetDataPinInput();
 8001086:	f7ff ff5d 	bl	8000f44 <LCD_SetDataPinInput>

  HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_SET);
 800108a:	2201      	movs	r2, #1
 800108c:	2140      	movs	r1, #64	; 0x40
 800108e:	4810      	ldr	r0, [pc, #64]	; (80010d0 <LCD_ReadStatus+0x54>)
 8001090:	f000 fedc 	bl	8001e4c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	2180      	movs	r1, #128	; 0x80
 8001098:	480d      	ldr	r0, [pc, #52]	; (80010d0 <LCD_ReadStatus+0x54>)
 800109a:	f000 fed7 	bl	8001e4c <HAL_GPIO_WritePin>

  status |= (LCD_ReadNibble() << 4);
 800109e:	f7ff ff05 	bl	8000eac <LCD_ReadNibble>
 80010a2:	4603      	mov	r3, r0
 80010a4:	011b      	lsls	r3, r3, #4
 80010a6:	b25a      	sxtb	r2, r3
 80010a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	b25b      	sxtb	r3, r3
 80010b0:	71fb      	strb	r3, [r7, #7]
  status |= LCD_ReadNibble();
 80010b2:	f7ff fefb 	bl	8000eac <LCD_ReadNibble>
 80010b6:	4603      	mov	r3, r0
 80010b8:	461a      	mov	r2, r3
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	4313      	orrs	r3, r2
 80010be:	71fb      	strb	r3, [r7, #7]

  LCD_SetDataPinOutput();
 80010c0:	f7ff ff8e 	bl	8000fe0 <LCD_SetDataPinOutput>

  return status;
 80010c4:	79fb      	ldrb	r3, [r7, #7]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40020800 	.word	0x40020800

080010d4 <LCD_WriteData>:
//-----------------------------------------------------------------------------
void LCD_WriteData(char dataToWrite)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 80010de:	2200      	movs	r2, #0
 80010e0:	2140      	movs	r1, #64	; 0x40
 80010e2:	4810      	ldr	r0, [pc, #64]	; (8001124 <LCD_WriteData+0x50>)
 80010e4:	f000 feb2 	bl	8001e4c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80010e8:	2201      	movs	r2, #1
 80010ea:	2180      	movs	r1, #128	; 0x80
 80010ec:	480d      	ldr	r0, [pc, #52]	; (8001124 <LCD_WriteData+0x50>)
 80010ee:	f000 fead 	bl	8001e4c <HAL_GPIO_WritePin>

  LCD_WriteNibble(dataToWrite >> 4);
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	091b      	lsrs	r3, r3, #4
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff fe97 	bl	8000e2c <LCD_WriteNibble>
  LCD_WriteNibble(dataToWrite & 0x0F);
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	f003 030f 	and.w	r3, r3, #15
 8001104:	b2db      	uxtb	r3, r3
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fe90 	bl	8000e2c <LCD_WriteNibble>

  while(LCD_ReadStatus() & 0x80);
 800110c:	bf00      	nop
 800110e:	f7ff ffb5 	bl	800107c <LCD_ReadStatus>
 8001112:	4603      	mov	r3, r0
 8001114:	b25b      	sxtb	r3, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	dbf9      	blt.n	800110e <LCD_WriteData+0x3a>
}
 800111a:	bf00      	nop
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40020800 	.word	0x40020800

08001128 <LCD_WriteCommand>:
//-----------------------------------------------------------------------------
void LCD_WriteCommand(char commandToWrite)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 8001132:	2200      	movs	r2, #0
 8001134:	2140      	movs	r1, #64	; 0x40
 8001136:	4810      	ldr	r0, [pc, #64]	; (8001178 <LCD_WriteCommand+0x50>)
 8001138:	f000 fe88 	bl	8001e4c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 800113c:	2200      	movs	r2, #0
 800113e:	2180      	movs	r1, #128	; 0x80
 8001140:	480d      	ldr	r0, [pc, #52]	; (8001178 <LCD_WriteCommand+0x50>)
 8001142:	f000 fe83 	bl	8001e4c <HAL_GPIO_WritePin>
  LCD_WriteNibble(commandToWrite >> 4);
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	091b      	lsrs	r3, r3, #4
 800114a:	b2db      	uxtb	r3, r3
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fe6d 	bl	8000e2c <LCD_WriteNibble>
  LCD_WriteNibble(commandToWrite & 0x0F);
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	f003 030f 	and.w	r3, r3, #15
 8001158:	b2db      	uxtb	r3, r3
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fe66 	bl	8000e2c <LCD_WriteNibble>

  while(LCD_ReadStatus() & 0x80);
 8001160:	bf00      	nop
 8001162:	f7ff ff8b 	bl	800107c <LCD_ReadStatus>
 8001166:	4603      	mov	r3, r0
 8001168:	b25b      	sxtb	r3, r3
 800116a:	2b00      	cmp	r3, #0
 800116c:	dbf9      	blt.n	8001162 <LCD_WriteCommand+0x3a>
}
 800116e:	bf00      	nop
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40020800 	.word	0x40020800

0800117c <LCD_WriteText>:
//-----------------------------------------------------------------------------
void LCD_WriteText(char * text)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  while(*text)
 8001184:	e006      	b.n	8001194 <LCD_WriteText+0x18>
    LCD_WriteData(*text++);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	1c5a      	adds	r2, r3, #1
 800118a:	607a      	str	r2, [r7, #4]
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff ffa0 	bl	80010d4 <LCD_WriteData>
  while(*text)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d1f4      	bne.n	8001186 <LCD_WriteText+0xa>
}
 800119c:	bf00      	nop
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <LCD_GoTo>:
void LCD_GoTo(unsigned char x, unsigned char y)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	460a      	mov	r2, r1
 80011b0:	71fb      	strb	r3, [r7, #7]
 80011b2:	4613      	mov	r3, r2
 80011b4:	71bb      	strb	r3, [r7, #6]
  LCD_WriteCommand(HD44780_DDRAM_SET | (x + (0x40 * y)));
 80011b6:	79bb      	ldrb	r3, [r7, #6]
 80011b8:	019b      	lsls	r3, r3, #6
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	4413      	add	r3, r2
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	b25b      	sxtb	r3, r3
 80011c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011c8:	b25b      	sxtb	r3, r3
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ffab 	bl	8001128 <LCD_WriteCommand>
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <LCD_WriteTextXY>:
//-----------------------------------------------------------------------------
void LCD_WriteTextXY(char * text, unsigned char x, unsigned char y)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
 80011e2:	460b      	mov	r3, r1
 80011e4:	70fb      	strb	r3, [r7, #3]
 80011e6:	4613      	mov	r3, r2
 80011e8:	70bb      	strb	r3, [r7, #2]
  LCD_GoTo(x,y);
 80011ea:	78ba      	ldrb	r2, [r7, #2]
 80011ec:	78fb      	ldrb	r3, [r7, #3]
 80011ee:	4611      	mov	r1, r2
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ffd8 	bl	80011a6 <LCD_GoTo>
  while(*text)
 80011f6:	e006      	b.n	8001206 <LCD_WriteTextXY+0x2c>
    LCD_WriteData(*text++);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	1c5a      	adds	r2, r3, #1
 80011fc:	607a      	str	r2, [r7, #4]
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff67 	bl	80010d4 <LCD_WriteData>
  while(*text)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1f4      	bne.n	80011f8 <LCD_WriteTextXY+0x1e>
}
 800120e:	bf00      	nop
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <LCD_SetControlPinOutput>:
{
  LCD_WriteCommand(HD44780_DISPLAY_CURSOR_SHIFT | HD44780_SHIFT_RIGHT | HD44780_SHIFT_DISPLAY);
}
//-----------------------------------------------------------------------------
void LCD_SetControlPinOutput(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Pin = LCD_RS_Pin;
 800121c:	4b20      	ldr	r3, [pc, #128]	; (80012a0 <LCD_SetControlPinOutput+0x88>)
 800121e:	2280      	movs	r2, #128	; 0x80
 8001220:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001222:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <LCD_SetControlPinOutput+0x88>)
 8001224:	2201      	movs	r2, #1
 8001226:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	4b1d      	ldr	r3, [pc, #116]	; (80012a0 <LCD_SetControlPinOutput+0x88>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800122e:	4b1c      	ldr	r3, [pc, #112]	; (80012a0 <LCD_SetControlPinOutput+0x88>)
 8001230:	2201      	movs	r2, #1
 8001232:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 8001234:	491a      	ldr	r1, [pc, #104]	; (80012a0 <LCD_SetControlPinOutput+0x88>)
 8001236:	481b      	ldr	r0, [pc, #108]	; (80012a4 <LCD_SetControlPinOutput+0x8c>)
 8001238:	f000 fc44 	bl	8001ac4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_RW_Pin;
 800123c:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <LCD_SetControlPinOutput+0x88>)
 800123e:	2240      	movs	r2, #64	; 0x40
 8001240:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001242:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <LCD_SetControlPinOutput+0x88>)
 8001244:	2201      	movs	r2, #1
 8001246:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <LCD_SetControlPinOutput+0x88>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800124e:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <LCD_SetControlPinOutput+0x88>)
 8001250:	2201      	movs	r2, #1
 8001252:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LCD_RW_GPIO_Port, &GPIO_InitStruct);
 8001254:	4912      	ldr	r1, [pc, #72]	; (80012a0 <LCD_SetControlPinOutput+0x88>)
 8001256:	4813      	ldr	r0, [pc, #76]	; (80012a4 <LCD_SetControlPinOutput+0x8c>)
 8001258:	f000 fc34 	bl	8001ac4 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_E_Pin;
 800125c:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <LCD_SetControlPinOutput+0x88>)
 800125e:	2240      	movs	r2, #64	; 0x40
 8001260:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001262:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <LCD_SetControlPinOutput+0x88>)
 8001264:	2201      	movs	r2, #1
 8001266:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001268:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <LCD_SetControlPinOutput+0x88>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800126e:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <LCD_SetControlPinOutput+0x88>)
 8001270:	2201      	movs	r2, #1
 8001272:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LCD_E_GPIO_Port, &GPIO_InitStruct);
 8001274:	490a      	ldr	r1, [pc, #40]	; (80012a0 <LCD_SetControlPinOutput+0x88>)
 8001276:	480c      	ldr	r0, [pc, #48]	; (80012a8 <LCD_SetControlPinOutput+0x90>)
 8001278:	f000 fc24 	bl	8001ac4 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 800127c:	2200      	movs	r2, #0
 800127e:	2180      	movs	r1, #128	; 0x80
 8001280:	4808      	ldr	r0, [pc, #32]	; (80012a4 <LCD_SetControlPinOutput+0x8c>)
 8001282:	f000 fde3 	bl	8001e4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	2140      	movs	r1, #64	; 0x40
 800128a:	4806      	ldr	r0, [pc, #24]	; (80012a4 <LCD_SetControlPinOutput+0x8c>)
 800128c:	f000 fdde 	bl	8001e4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8001290:	2200      	movs	r2, #0
 8001292:	2140      	movs	r1, #64	; 0x40
 8001294:	4804      	ldr	r0, [pc, #16]	; (80012a8 <LCD_SetControlPinOutput+0x90>)
 8001296:	f000 fdd9 	bl	8001e4c <HAL_GPIO_WritePin>

}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000054 	.word	0x20000054
 80012a4:	40020800 	.word	0x40020800
 80012a8:	40021800 	.word	0x40021800

080012ac <LCD_Initialize>:
//-----------------------------------------------------------------------------
void LCD_Initialize(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
  volatile unsigned char i = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	71fb      	strb	r3, [r7, #7]
  volatile unsigned int delayCnt = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	603b      	str	r3, [r7, #0]

  LCD_SetDataPinOutput();
 80012ba:	f7ff fe91 	bl	8000fe0 <LCD_SetDataPinOutput>
  LCD_SetControlPinOutput();
 80012be:	f7ff ffab 	bl	8001218 <LCD_SetControlPinOutput>

  for(delayCnt = 0; delayCnt < 300000; delayCnt++);
 80012c2:	2300      	movs	r3, #0
 80012c4:	603b      	str	r3, [r7, #0]
 80012c6:	e002      	b.n	80012ce <LCD_Initialize+0x22>
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	3301      	adds	r3, #1
 80012cc:	603b      	str	r3, [r7, #0]
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	4a1e      	ldr	r2, [pc, #120]	; (800134c <LCD_Initialize+0xa0>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d9f8      	bls.n	80012c8 <LCD_Initialize+0x1c>

  for(i = 0; i < 3; i++) {
 80012d6:	2300      	movs	r3, #0
 80012d8:	71fb      	strb	r3, [r7, #7]
 80012da:	e012      	b.n	8001302 <LCD_Initialize+0x56>
    LCD_WriteNibble(0x03);
 80012dc:	2003      	movs	r0, #3
 80012de:	f7ff fda5 	bl	8000e2c <LCD_WriteNibble>
    for(delayCnt = 0; delayCnt < 30000; delayCnt++);
 80012e2:	2300      	movs	r3, #0
 80012e4:	603b      	str	r3, [r7, #0]
 80012e6:	e002      	b.n	80012ee <LCD_Initialize+0x42>
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	3301      	adds	r3, #1
 80012ec:	603b      	str	r3, [r7, #0]
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	f247 522f 	movw	r2, #29999	; 0x752f
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d9f7      	bls.n	80012e8 <LCD_Initialize+0x3c>
  for(i = 0; i < 3; i++) {
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	3301      	adds	r3, #1
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	71fb      	strb	r3, [r7, #7]
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d9e8      	bls.n	80012dc <LCD_Initialize+0x30>
  }

  LCD_WriteNibble(0x02);
 800130a:	2002      	movs	r0, #2
 800130c:	f7ff fd8e 	bl	8000e2c <LCD_WriteNibble>

  for(delayCnt = 0; delayCnt < 6000; delayCnt++);
 8001310:	2300      	movs	r3, #0
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	e002      	b.n	800131c <LCD_Initialize+0x70>
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	3301      	adds	r3, #1
 800131a:	603b      	str	r3, [r7, #0]
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	f241 726f 	movw	r2, #5999	; 0x176f
 8001322:	4293      	cmp	r3, r2
 8001324:	d9f7      	bls.n	8001316 <LCD_Initialize+0x6a>

  LCD_WriteCommand(HD44780_FUNCTION_SET |
 8001326:	2028      	movs	r0, #40	; 0x28
 8001328:	f7ff fefe 	bl	8001128 <LCD_WriteCommand>
                   HD44780_FONT5x7 |
                   HD44780_TWO_LINE |
                   HD44780_4_BIT);

  LCD_WriteCommand(HD44780_DISPLAY_ONOFF |
 800132c:	2008      	movs	r0, #8
 800132e:	f7ff fefb 	bl	8001128 <LCD_WriteCommand>
                   HD44780_DISPLAY_OFF);

  LCD_WriteCommand(HD44780_CLEAR);
 8001332:	2001      	movs	r0, #1
 8001334:	f7ff fef8 	bl	8001128 <LCD_WriteCommand>

  LCD_WriteCommand(HD44780_ENTRY_MODE |
 8001338:	2006      	movs	r0, #6
 800133a:	f7ff fef5 	bl	8001128 <LCD_WriteCommand>
                   HD44780_EM_SHIFT_CURSOR |
                   HD44780_EM_INCREMENT);

  LCD_WriteCommand(HD44780_DISPLAY_ONOFF |
 800133e:	200c      	movs	r0, #12
 8001340:	f7ff fef2 	bl	8001128 <LCD_WriteCommand>
                   HD44780_DISPLAY_ON |
                   HD44780_CURSOR_OFF |
                   HD44780_CURSOR_NOBLINK);
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	000493df 	.word	0x000493df

08001350 <LCD_SetUserChar>:
//-----------------------------------------------------------------------------
void LCD_SetUserChar (char chrNum, unsigned char n, const char *p)
{         //chrNum  - character number (code) to be registered (0..7)
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	603a      	str	r2, [r7, #0]
 800135a:	71fb      	strb	r3, [r7, #7]
 800135c:	460b      	mov	r3, r1
 800135e:	71bb      	strb	r3, [r7, #6]
          //n       - number of characters to register
          //*p      - pointer to the character pattern (8 * n bytes)
	LCD_WriteCommand(HD44780_CGRAM_SET | chrNum * 8);
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	b2db      	uxtb	r3, r3
 8001366:	b25b      	sxtb	r3, r3
 8001368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800136c:	b25b      	sxtb	r3, r3
 800136e:	b2db      	uxtb	r3, r3
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fed9 	bl	8001128 <LCD_WriteCommand>
	n *= 8;
 8001376:	79bb      	ldrb	r3, [r7, #6]
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	71bb      	strb	r3, [r7, #6]
	do
		LCD_WriteData(*p++);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	1c5a      	adds	r2, r3, #1
 8001380:	603a      	str	r2, [r7, #0]
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fea5 	bl	80010d4 <LCD_WriteData>
	while (--n);
 800138a:	79bb      	ldrb	r3, [r7, #6]
 800138c:	3b01      	subs	r3, #1
 800138e:	71bb      	strb	r3, [r7, #6]
 8001390:	79bb      	ldrb	r3, [r7, #6]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1f2      	bne.n	800137c <LCD_SetUserChar+0x2c>
}
 8001396:	bf00      	nop
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013a4:	f000 fa27 	bl	80017f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a8:	f000 f8c4 	bl	8001534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ac:	f7ff f8ae 	bl	800050c <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LCD_Initialize();                         //inicjalizacja wysietlacza
 80013b0:	f7ff ff7c 	bl	80012ac <LCD_Initialize>
  LCD_SetUserChar(1, 4, znakiDodatkowe);
 80013b4:	4a57      	ldr	r2, [pc, #348]	; (8001514 <main+0x174>)
 80013b6:	2104      	movs	r1, #4
 80013b8:	2001      	movs	r0, #1
 80013ba:	f7ff ffc9 	bl	8001350 <LCD_SetUserChar>
  LCD_WriteCommand(HD44780_CLEAR);          //wyczyszczenie wyświetlacza
 80013be:	2001      	movs	r0, #1
 80013c0:	f7ff feb2 	bl	8001128 <LCD_WriteCommand>
  LCD_WriteText("[ \0");
 80013c4:	4854      	ldr	r0, [pc, #336]	; (8001518 <main+0x178>)
 80013c6:	f7ff fed9 	bl	800117c <LCD_WriteText>
  LCD_WriteText(menu[pozycja-1]);
 80013ca:	4b54      	ldr	r3, [pc, #336]	; (800151c <main+0x17c>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	4a53      	ldr	r2, [pc, #332]	; (8001520 <main+0x180>)
 80013d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fed0 	bl	800117c <LCD_WriteText>
  LCD_WriteText(" ]\0");
 80013dc:	4851      	ldr	r0, [pc, #324]	; (8001524 <main+0x184>)
 80013de:	f7ff fecd 	bl	800117c <LCD_WriteText>
  LCD_WriteTextXY(menu[pozycja],2,1);
 80013e2:	4b4e      	ldr	r3, [pc, #312]	; (800151c <main+0x17c>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	461a      	mov	r2, r3
 80013e8:	4b4d      	ldr	r3, [pc, #308]	; (8001520 <main+0x180>)
 80013ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ee:	2201      	movs	r2, #1
 80013f0:	2102      	movs	r1, #2
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff fef1 	bl	80011da <LCD_WriteTextXY>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(!HAL_GPIO_ReadPin(BT1_GPIO_Port, BT1_Pin) && (pozycja<8))
 80013f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013fc:	484a      	ldr	r0, [pc, #296]	; (8001528 <main+0x188>)
 80013fe:	f000 fd0d 	bl	8001e1c <HAL_GPIO_ReadPin>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d10c      	bne.n	8001422 <main+0x82>
 8001408:	4b44      	ldr	r3, [pc, #272]	; (800151c <main+0x17c>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b07      	cmp	r3, #7
 800140e:	d808      	bhi.n	8001422 <main+0x82>
	  {
		  pozycja++;
 8001410:	4b42      	ldr	r3, [pc, #264]	; (800151c <main+0x17c>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	3301      	adds	r3, #1
 8001416:	b2da      	uxtb	r2, r3
 8001418:	4b40      	ldr	r3, [pc, #256]	; (800151c <main+0x17c>)
 800141a:	701a      	strb	r2, [r3, #0]
		  odswiezLCD = true;
 800141c:	4b43      	ldr	r3, [pc, #268]	; (800152c <main+0x18c>)
 800141e:	2201      	movs	r2, #1
 8001420:	701a      	strb	r2, [r3, #0]
	  }
	  if(!HAL_GPIO_ReadPin(BT2_GPIO_Port, BT2_Pin) && (pozycja>1))
 8001422:	2102      	movs	r1, #2
 8001424:	4842      	ldr	r0, [pc, #264]	; (8001530 <main+0x190>)
 8001426:	f000 fcf9 	bl	8001e1c <HAL_GPIO_ReadPin>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d10c      	bne.n	800144a <main+0xaa>
 8001430:	4b3a      	ldr	r3, [pc, #232]	; (800151c <main+0x17c>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d908      	bls.n	800144a <main+0xaa>
	  {
		  pozycja--;
 8001438:	4b38      	ldr	r3, [pc, #224]	; (800151c <main+0x17c>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	3b01      	subs	r3, #1
 800143e:	b2da      	uxtb	r2, r3
 8001440:	4b36      	ldr	r3, [pc, #216]	; (800151c <main+0x17c>)
 8001442:	701a      	strb	r2, [r3, #0]
		  odswiezLCD = true;
 8001444:	4b39      	ldr	r3, [pc, #228]	; (800152c <main+0x18c>)
 8001446:	2201      	movs	r2, #1
 8001448:	701a      	strb	r2, [r3, #0]
	  }
	  if(odswiezLCD)
 800144a:	4b38      	ldr	r3, [pc, #224]	; (800152c <main+0x18c>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d01f      	beq.n	8001492 <main+0xf2>
	  {
		  LCD_WriteCommand(HD44780_CLEAR);          //wyczyszczenie wyświetlacza
 8001452:	2001      	movs	r0, #1
 8001454:	f7ff fe68 	bl	8001128 <LCD_WriteCommand>
		  LCD_WriteText("[ \0");
 8001458:	482f      	ldr	r0, [pc, #188]	; (8001518 <main+0x178>)
 800145a:	f7ff fe8f 	bl	800117c <LCD_WriteText>
		  LCD_WriteText(menu[pozycja-1]);
 800145e:	4b2f      	ldr	r3, [pc, #188]	; (800151c <main+0x17c>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	3b01      	subs	r3, #1
 8001464:	4a2e      	ldr	r2, [pc, #184]	; (8001520 <main+0x180>)
 8001466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fe86 	bl	800117c <LCD_WriteText>
		  LCD_WriteText(" ]\0");
 8001470:	482c      	ldr	r0, [pc, #176]	; (8001524 <main+0x184>)
 8001472:	f7ff fe83 	bl	800117c <LCD_WriteText>
		  LCD_WriteTextXY(menu[pozycja],2,1);
 8001476:	4b29      	ldr	r3, [pc, #164]	; (800151c <main+0x17c>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	461a      	mov	r2, r3
 800147c:	4b28      	ldr	r3, [pc, #160]	; (8001520 <main+0x180>)
 800147e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001482:	2201      	movs	r2, #1
 8001484:	2102      	movs	r1, #2
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fea7 	bl	80011da <LCD_WriteTextXY>
		  odswiezLCD = false;
 800148c:	4b27      	ldr	r3, [pc, #156]	; (800152c <main+0x18c>)
 800148e:	2200      	movs	r2, #0
 8001490:	701a      	strb	r2, [r3, #0]
	  }
	  if(!HAL_GPIO_ReadPin(BT3_GPIO_Port, BT3_Pin))
 8001492:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001496:	4824      	ldr	r0, [pc, #144]	; (8001528 <main+0x188>)
 8001498:	f000 fcc0 	bl	8001e1c <HAL_GPIO_ReadPin>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d133      	bne.n	800150a <main+0x16a>
	  {
		  switch (pozycja)
 80014a2:	4b1e      	ldr	r3, [pc, #120]	; (800151c <main+0x17c>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	2b07      	cmp	r3, #7
 80014aa:	d82b      	bhi.n	8001504 <main+0x164>
 80014ac:	a201      	add	r2, pc, #4	; (adr r2, 80014b4 <main+0x114>)
 80014ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b2:	bf00      	nop
 80014b4:	080014d5 	.word	0x080014d5
 80014b8:	080014db 	.word	0x080014db
 80014bc:	080014e1 	.word	0x080014e1
 80014c0:	080014e7 	.word	0x080014e7
 80014c4:	080014ed 	.word	0x080014ed
 80014c8:	080014f3 	.word	0x080014f3
 80014cc:	080014f9 	.word	0x080014f9
 80014d0:	080014ff 	.word	0x080014ff
		  {
		  case 1: Opcja1(); break;
 80014d4:	f000 f896 	bl	8001604 <Opcja1>
 80014d8:	e018      	b.n	800150c <main+0x16c>
		  case 2: Opcja2(); break;
 80014da:	f000 f89d 	bl	8001618 <Opcja2>
 80014de:	e015      	b.n	800150c <main+0x16c>
		  case 3: Opcja3(); break;
 80014e0:	f000 f8a6 	bl	8001630 <Opcja3>
 80014e4:	e012      	b.n	800150c <main+0x16c>
		  case 4: Opcja4(); break;
 80014e6:	f000 f8af 	bl	8001648 <Opcja4>
 80014ea:	e00f      	b.n	800150c <main+0x16c>
		  case 5: Opcja5(); break;
 80014ec:	f000 f8b8 	bl	8001660 <Opcja5>
 80014f0:	e00c      	b.n	800150c <main+0x16c>
		  case 6: Opcja6(); break;
 80014f2:	f000 f8c4 	bl	800167e <Opcja6>
 80014f6:	e009      	b.n	800150c <main+0x16c>
		  case 7: Opcja7(); break;
 80014f8:	f000 f8d0 	bl	800169c <Opcja7>
 80014fc:	e006      	b.n	800150c <main+0x16c>
		  case 8: Opcja8(); break;
 80014fe:	f000 f8dc 	bl	80016ba <Opcja8>
 8001502:	e003      	b.n	800150c <main+0x16c>
		  default: Opcja1(); break;
 8001504:	f000 f87e 	bl	8001604 <Opcja1>
 8001508:	e000      	b.n	800150c <main+0x16c>
		  }
	  }
 800150a:	bf00      	nop
	  HAL_Delay(150);
 800150c:	2096      	movs	r0, #150	; 0x96
 800150e:	f000 f9cf 	bl	80018b0 <HAL_Delay>
	  if(!HAL_GPIO_ReadPin(BT1_GPIO_Port, BT1_Pin) && (pozycja<8))
 8001512:	e771      	b.n	80013f8 <main+0x58>
 8001514:	0800283c 	.word	0x0800283c
 8001518:	08002834 	.word	0x08002834
 800151c:	20000000 	.word	0x20000000
 8001520:	20000004 	.word	0x20000004
 8001524:	08002838 	.word	0x08002838
 8001528:	40020400 	.word	0x40020400
 800152c:	20000028 	.word	0x20000028
 8001530:	40022000 	.word	0x40022000

08001534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b094      	sub	sp, #80	; 0x50
 8001538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800153a:	f107 0320 	add.w	r3, r7, #32
 800153e:	2230      	movs	r2, #48	; 0x30
 8001540:	2100      	movs	r1, #0
 8001542:	4618      	mov	r0, r3
 8001544:	f001 f930 	bl	80027a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001548:	f107 030c 	add.w	r3, r7, #12
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]
 8001550:	605a      	str	r2, [r3, #4]
 8001552:	609a      	str	r2, [r3, #8]
 8001554:	60da      	str	r2, [r3, #12]
 8001556:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001558:	4b28      	ldr	r3, [pc, #160]	; (80015fc <SystemClock_Config+0xc8>)
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	4a27      	ldr	r2, [pc, #156]	; (80015fc <SystemClock_Config+0xc8>)
 800155e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001562:	6413      	str	r3, [r2, #64]	; 0x40
 8001564:	4b25      	ldr	r3, [pc, #148]	; (80015fc <SystemClock_Config+0xc8>)
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001570:	4b23      	ldr	r3, [pc, #140]	; (8001600 <SystemClock_Config+0xcc>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001578:	4a21      	ldr	r2, [pc, #132]	; (8001600 <SystemClock_Config+0xcc>)
 800157a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800157e:	6013      	str	r3, [r2, #0]
 8001580:	4b1f      	ldr	r3, [pc, #124]	; (8001600 <SystemClock_Config+0xcc>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800158c:	2302      	movs	r3, #2
 800158e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001590:	2301      	movs	r3, #1
 8001592:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001594:	2310      	movs	r3, #16
 8001596:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001598:	2302      	movs	r3, #2
 800159a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800159c:	2300      	movs	r3, #0
 800159e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 80015a0:	230a      	movs	r3, #10
 80015a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 80015a4:	23d2      	movs	r3, #210	; 0xd2
 80015a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015a8:	2302      	movs	r3, #2
 80015aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80015ac:	2302      	movs	r3, #2
 80015ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b0:	f107 0320 	add.w	r3, r7, #32
 80015b4:	4618      	mov	r0, r3
 80015b6:	f000 fc7d 	bl	8001eb4 <HAL_RCC_OscConfig>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80015c0:	f000 f88a 	bl	80016d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c4:	230f      	movs	r3, #15
 80015c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015c8:	2302      	movs	r3, #2
 80015ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015dc:	f107 030c 	add.w	r3, r7, #12
 80015e0:	2105      	movs	r1, #5
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 ff0a 	bl	80023fc <HAL_RCC_ClockConfig>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80015ee:	f000 f873 	bl	80016d8 <Error_Handler>
  }
}
 80015f2:	bf00      	nop
 80015f4:	3750      	adds	r7, #80	; 0x50
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800
 8001600:	40007000 	.word	0x40007000

08001604 <Opcja1>:

/* USER CODE BEGIN 4 */
void Opcja1()
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001608:	2104      	movs	r1, #4
 800160a:	4802      	ldr	r0, [pc, #8]	; (8001614 <Opcja1+0x10>)
 800160c:	f000 fc37 	bl	8001e7e <HAL_GPIO_TogglePin>
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40022000 	.word	0x40022000

08001618 <Opcja2>:
void Opcja2()
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800161c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001620:	4802      	ldr	r0, [pc, #8]	; (800162c <Opcja2+0x14>)
 8001622:	f000 fc2c 	bl	8001e7e <HAL_GPIO_TogglePin>
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40020000 	.word	0x40020000

08001630 <Opcja3>:
void Opcja3()
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001634:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001638:	4802      	ldr	r0, [pc, #8]	; (8001644 <Opcja3+0x14>)
 800163a:	f000 fc20 	bl	8001e7e <HAL_GPIO_TogglePin>
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40020000 	.word	0x40020000

08001648 <Opcja4>:
void Opcja4()
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 800164c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001650:	4802      	ldr	r0, [pc, #8]	; (800165c <Opcja4+0x14>)
 8001652:	f000 fc14 	bl	8001e7e <HAL_GPIO_TogglePin>
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40020400 	.word	0x40020400

08001660 <Opcja5>:
void Opcja5()
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
	char znak = 1;
 8001666:	2301      	movs	r3, #1
 8001668:	71fb      	strb	r3, [r7, #7]
	LCD_WriteTextXY(&znak, 15,0);
 800166a:	1dfb      	adds	r3, r7, #7
 800166c:	2200      	movs	r2, #0
 800166e:	210f      	movs	r1, #15
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff fdb2 	bl	80011da <LCD_WriteTextXY>
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <Opcja6>:
void Opcja6()
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
	char znak = 2;
 8001684:	2302      	movs	r3, #2
 8001686:	71fb      	strb	r3, [r7, #7]
	LCD_WriteTextXY(&znak, 15,0);
 8001688:	1dfb      	adds	r3, r7, #7
 800168a:	2200      	movs	r2, #0
 800168c:	210f      	movs	r1, #15
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fda3 	bl	80011da <LCD_WriteTextXY>
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <Opcja7>:
void Opcja7()
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
	char znak = 3;
 80016a2:	2303      	movs	r3, #3
 80016a4:	71fb      	strb	r3, [r7, #7]
	LCD_WriteTextXY(&znak, 15,0);
 80016a6:	1dfb      	adds	r3, r7, #7
 80016a8:	2200      	movs	r2, #0
 80016aa:	210f      	movs	r1, #15
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff fd94 	bl	80011da <LCD_WriteTextXY>
}
 80016b2:	bf00      	nop
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <Opcja8>:
void Opcja8()
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
	char znak = 4;
 80016c0:	2304      	movs	r3, #4
 80016c2:	71fb      	strb	r3, [r7, #7]
	LCD_WriteTextXY(&znak, 15,0);
 80016c4:	1dfb      	adds	r3, r7, #7
 80016c6:	2200      	movs	r2, #0
 80016c8:	210f      	movs	r1, #15
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fd85 	bl	80011da <LCD_WriteTextXY>
}
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016dc:	b672      	cpsid	i
}
 80016de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <Error_Handler+0x8>
	...

080016e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <HAL_MspInit+0x44>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	4a0e      	ldr	r2, [pc, #56]	; (8001728 <HAL_MspInit+0x44>)
 80016f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f4:	6413      	str	r3, [r2, #64]	; 0x40
 80016f6:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <HAL_MspInit+0x44>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <HAL_MspInit+0x44>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	4a08      	ldr	r2, [pc, #32]	; (8001728 <HAL_MspInit+0x44>)
 8001708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800170c:	6453      	str	r3, [r2, #68]	; 0x44
 800170e:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_MspInit+0x44>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001716:	603b      	str	r3, [r7, #0]
 8001718:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800

0800172c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <NMI_Handler+0x4>

08001732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001736:	e7fe      	b.n	8001736 <HardFault_Handler+0x4>

08001738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800173c:	e7fe      	b.n	800173c <MemManage_Handler+0x4>

0800173e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001742:	e7fe      	b.n	8001742 <BusFault_Handler+0x4>

08001744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001748:	e7fe      	b.n	8001748 <UsageFault_Handler+0x4>

0800174a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001778:	f000 f87a 	bl	8001870 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}

08001780 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001784:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <SystemInit+0x20>)
 8001786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800178a:	4a05      	ldr	r2, [pc, #20]	; (80017a0 <SystemInit+0x20>)
 800178c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001790:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017a8:	480d      	ldr	r0, [pc, #52]	; (80017e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017aa:	490e      	ldr	r1, [pc, #56]	; (80017e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017ac:	4a0e      	ldr	r2, [pc, #56]	; (80017e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b0:	e002      	b.n	80017b8 <LoopCopyDataInit>

080017b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017b6:	3304      	adds	r3, #4

080017b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017bc:	d3f9      	bcc.n	80017b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017be:	4a0b      	ldr	r2, [pc, #44]	; (80017ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017c0:	4c0b      	ldr	r4, [pc, #44]	; (80017f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c4:	e001      	b.n	80017ca <LoopFillZerobss>

080017c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c8:	3204      	adds	r2, #4

080017ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017cc:	d3fb      	bcc.n	80017c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017ce:	f7ff ffd7 	bl	8001780 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017d2:	f000 ffc5 	bl	8002760 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017d6:	f7ff fde3 	bl	80013a0 <main>
  bx  lr    
 80017da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017dc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80017e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e4:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 80017e8:	0800287c 	.word	0x0800287c
  ldr r2, =_sbss
 80017ec:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 80017f0:	2000006c 	.word	0x2000006c

080017f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017f4:	e7fe      	b.n	80017f4 <ADC_IRQHandler>

080017f6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017fa:	2003      	movs	r0, #3
 80017fc:	f000 f92e 	bl	8001a5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001800:	2000      	movs	r0, #0
 8001802:	f000 f805 	bl	8001810 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001806:	f7ff ff6d 	bl	80016e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	bd80      	pop	{r7, pc}

08001810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_InitTick+0x54>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4b12      	ldr	r3, [pc, #72]	; (8001868 <HAL_InitTick+0x58>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	4619      	mov	r1, r3
 8001822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001826:	fbb3 f3f1 	udiv	r3, r3, r1
 800182a:	fbb2 f3f3 	udiv	r3, r2, r3
 800182e:	4618      	mov	r0, r3
 8001830:	f000 f93b 	bl	8001aaa <HAL_SYSTICK_Config>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e00e      	b.n	800185c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b0f      	cmp	r3, #15
 8001842:	d80a      	bhi.n	800185a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001844:	2200      	movs	r2, #0
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	f04f 30ff 	mov.w	r0, #4294967295
 800184c:	f000 f911 	bl	8001a72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001850:	4a06      	ldr	r2, [pc, #24]	; (800186c <HAL_InitTick+0x5c>)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	e000      	b.n	800185c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
}
 800185c:	4618      	mov	r0, r3
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	2000002c 	.word	0x2000002c
 8001868:	20000034 	.word	0x20000034
 800186c:	20000030 	.word	0x20000030

08001870 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <HAL_IncTick+0x20>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	4b06      	ldr	r3, [pc, #24]	; (8001894 <HAL_IncTick+0x24>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4413      	add	r3, r2
 8001880:	4a04      	ldr	r2, [pc, #16]	; (8001894 <HAL_IncTick+0x24>)
 8001882:	6013      	str	r3, [r2, #0]
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	20000034 	.word	0x20000034
 8001894:	20000068 	.word	0x20000068

08001898 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return uwTick;
 800189c:	4b03      	ldr	r3, [pc, #12]	; (80018ac <HAL_GetTick+0x14>)
 800189e:	681b      	ldr	r3, [r3, #0]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	20000068 	.word	0x20000068

080018b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018b8:	f7ff ffee 	bl	8001898 <HAL_GetTick>
 80018bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c8:	d005      	beq.n	80018d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ca:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <HAL_Delay+0x44>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	461a      	mov	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4413      	add	r3, r2
 80018d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018d6:	bf00      	nop
 80018d8:	f7ff ffde 	bl	8001898 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d8f7      	bhi.n	80018d8 <HAL_Delay+0x28>
  {
  }
}
 80018e8:	bf00      	nop
 80018ea:	bf00      	nop
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000034 	.word	0x20000034

080018f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001908:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <__NVIC_SetPriorityGrouping+0x40>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800190e:	68ba      	ldr	r2, [r7, #8]
 8001910:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001914:	4013      	ands	r3, r2
 8001916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <__NVIC_SetPriorityGrouping+0x44>)
 8001922:	4313      	orrs	r3, r2
 8001924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001926:	4a04      	ldr	r2, [pc, #16]	; (8001938 <__NVIC_SetPriorityGrouping+0x40>)
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	60d3      	str	r3, [r2, #12]
}
 800192c:	bf00      	nop
 800192e:	3714      	adds	r7, #20
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	e000ed00 	.word	0xe000ed00
 800193c:	05fa0000 	.word	0x05fa0000

08001940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001944:	4b04      	ldr	r3, [pc, #16]	; (8001958 <__NVIC_GetPriorityGrouping+0x18>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	0a1b      	lsrs	r3, r3, #8
 800194a:	f003 0307 	and.w	r3, r3, #7
}
 800194e:	4618      	mov	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	6039      	str	r1, [r7, #0]
 8001966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196c:	2b00      	cmp	r3, #0
 800196e:	db0a      	blt.n	8001986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	b2da      	uxtb	r2, r3
 8001974:	490c      	ldr	r1, [pc, #48]	; (80019a8 <__NVIC_SetPriority+0x4c>)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	0112      	lsls	r2, r2, #4
 800197c:	b2d2      	uxtb	r2, r2
 800197e:	440b      	add	r3, r1
 8001980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001984:	e00a      	b.n	800199c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	b2da      	uxtb	r2, r3
 800198a:	4908      	ldr	r1, [pc, #32]	; (80019ac <__NVIC_SetPriority+0x50>)
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	f003 030f 	and.w	r3, r3, #15
 8001992:	3b04      	subs	r3, #4
 8001994:	0112      	lsls	r2, r2, #4
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	440b      	add	r3, r1
 800199a:	761a      	strb	r2, [r3, #24]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000e100 	.word	0xe000e100
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b089      	sub	sp, #36	; 0x24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	f1c3 0307 	rsb	r3, r3, #7
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	bf28      	it	cs
 80019ce:	2304      	movcs	r3, #4
 80019d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3304      	adds	r3, #4
 80019d6:	2b06      	cmp	r3, #6
 80019d8:	d902      	bls.n	80019e0 <NVIC_EncodePriority+0x30>
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3b03      	subs	r3, #3
 80019de:	e000      	b.n	80019e2 <NVIC_EncodePriority+0x32>
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e4:	f04f 32ff 	mov.w	r2, #4294967295
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43da      	mvns	r2, r3
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	401a      	ands	r2, r3
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f8:	f04f 31ff 	mov.w	r1, #4294967295
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001a02:	43d9      	mvns	r1, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a08:	4313      	orrs	r3, r2
         );
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3724      	adds	r7, #36	; 0x24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
	...

08001a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a28:	d301      	bcc.n	8001a2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e00f      	b.n	8001a4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a2e:	4a0a      	ldr	r2, [pc, #40]	; (8001a58 <SysTick_Config+0x40>)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a36:	210f      	movs	r1, #15
 8001a38:	f04f 30ff 	mov.w	r0, #4294967295
 8001a3c:	f7ff ff8e 	bl	800195c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a40:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <SysTick_Config+0x40>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a46:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <SysTick_Config+0x40>)
 8001a48:	2207      	movs	r2, #7
 8001a4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	e000e010 	.word	0xe000e010

08001a5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff ff47 	bl	80018f8 <__NVIC_SetPriorityGrouping>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b086      	sub	sp, #24
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	4603      	mov	r3, r0
 8001a7a:	60b9      	str	r1, [r7, #8]
 8001a7c:	607a      	str	r2, [r7, #4]
 8001a7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a84:	f7ff ff5c 	bl	8001940 <__NVIC_GetPriorityGrouping>
 8001a88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	68b9      	ldr	r1, [r7, #8]
 8001a8e:	6978      	ldr	r0, [r7, #20]
 8001a90:	f7ff ff8e 	bl	80019b0 <NVIC_EncodePriority>
 8001a94:	4602      	mov	r2, r0
 8001a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a9a:	4611      	mov	r1, r2
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff ff5d 	bl	800195c <__NVIC_SetPriority>
}
 8001aa2:	bf00      	nop
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b082      	sub	sp, #8
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff ffb0 	bl	8001a18 <SysTick_Config>
 8001ab8:	4603      	mov	r3, r0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
	...

08001ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b089      	sub	sp, #36	; 0x24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61fb      	str	r3, [r7, #28]
 8001ae2:	e175      	b.n	8001dd0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	4013      	ands	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	f040 8164 	bne.w	8001dca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d005      	beq.n	8001b1a <HAL_GPIO_Init+0x56>
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 0303 	and.w	r3, r3, #3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d130      	bne.n	8001b7c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	2203      	movs	r2, #3
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	68da      	ldr	r2, [r3, #12]
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b50:	2201      	movs	r2, #1
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	091b      	lsrs	r3, r3, #4
 8001b66:	f003 0201 	and.w	r2, r3, #1
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	2b03      	cmp	r3, #3
 8001b86:	d017      	beq.n	8001bb8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	2203      	movs	r2, #3
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 0303 	and.w	r3, r3, #3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d123      	bne.n	8001c0c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	08da      	lsrs	r2, r3, #3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3208      	adds	r2, #8
 8001bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	220f      	movs	r2, #15
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	691a      	ldr	r2, [r3, #16]
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	08da      	lsrs	r2, r3, #3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	3208      	adds	r2, #8
 8001c06:	69b9      	ldr	r1, [r7, #24]
 8001c08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	2203      	movs	r2, #3
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 0203 	and.w	r2, r3, #3
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 80be 	beq.w	8001dca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c4e:	4b66      	ldr	r3, [pc, #408]	; (8001de8 <HAL_GPIO_Init+0x324>)
 8001c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c52:	4a65      	ldr	r2, [pc, #404]	; (8001de8 <HAL_GPIO_Init+0x324>)
 8001c54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c58:	6453      	str	r3, [r2, #68]	; 0x44
 8001c5a:	4b63      	ldr	r3, [pc, #396]	; (8001de8 <HAL_GPIO_Init+0x324>)
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c66:	4a61      	ldr	r2, [pc, #388]	; (8001dec <HAL_GPIO_Init+0x328>)
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	089b      	lsrs	r3, r3, #2
 8001c6c:	3302      	adds	r3, #2
 8001c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	220f      	movs	r2, #15
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43db      	mvns	r3, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4013      	ands	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a58      	ldr	r2, [pc, #352]	; (8001df0 <HAL_GPIO_Init+0x32c>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d037      	beq.n	8001d02 <HAL_GPIO_Init+0x23e>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a57      	ldr	r2, [pc, #348]	; (8001df4 <HAL_GPIO_Init+0x330>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d031      	beq.n	8001cfe <HAL_GPIO_Init+0x23a>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a56      	ldr	r2, [pc, #344]	; (8001df8 <HAL_GPIO_Init+0x334>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d02b      	beq.n	8001cfa <HAL_GPIO_Init+0x236>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a55      	ldr	r2, [pc, #340]	; (8001dfc <HAL_GPIO_Init+0x338>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d025      	beq.n	8001cf6 <HAL_GPIO_Init+0x232>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a54      	ldr	r2, [pc, #336]	; (8001e00 <HAL_GPIO_Init+0x33c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d01f      	beq.n	8001cf2 <HAL_GPIO_Init+0x22e>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a53      	ldr	r2, [pc, #332]	; (8001e04 <HAL_GPIO_Init+0x340>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d019      	beq.n	8001cee <HAL_GPIO_Init+0x22a>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a52      	ldr	r2, [pc, #328]	; (8001e08 <HAL_GPIO_Init+0x344>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d013      	beq.n	8001cea <HAL_GPIO_Init+0x226>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a51      	ldr	r2, [pc, #324]	; (8001e0c <HAL_GPIO_Init+0x348>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d00d      	beq.n	8001ce6 <HAL_GPIO_Init+0x222>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a50      	ldr	r2, [pc, #320]	; (8001e10 <HAL_GPIO_Init+0x34c>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d007      	beq.n	8001ce2 <HAL_GPIO_Init+0x21e>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a4f      	ldr	r2, [pc, #316]	; (8001e14 <HAL_GPIO_Init+0x350>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d101      	bne.n	8001cde <HAL_GPIO_Init+0x21a>
 8001cda:	2309      	movs	r3, #9
 8001cdc:	e012      	b.n	8001d04 <HAL_GPIO_Init+0x240>
 8001cde:	230a      	movs	r3, #10
 8001ce0:	e010      	b.n	8001d04 <HAL_GPIO_Init+0x240>
 8001ce2:	2308      	movs	r3, #8
 8001ce4:	e00e      	b.n	8001d04 <HAL_GPIO_Init+0x240>
 8001ce6:	2307      	movs	r3, #7
 8001ce8:	e00c      	b.n	8001d04 <HAL_GPIO_Init+0x240>
 8001cea:	2306      	movs	r3, #6
 8001cec:	e00a      	b.n	8001d04 <HAL_GPIO_Init+0x240>
 8001cee:	2305      	movs	r3, #5
 8001cf0:	e008      	b.n	8001d04 <HAL_GPIO_Init+0x240>
 8001cf2:	2304      	movs	r3, #4
 8001cf4:	e006      	b.n	8001d04 <HAL_GPIO_Init+0x240>
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e004      	b.n	8001d04 <HAL_GPIO_Init+0x240>
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	e002      	b.n	8001d04 <HAL_GPIO_Init+0x240>
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e000      	b.n	8001d04 <HAL_GPIO_Init+0x240>
 8001d02:	2300      	movs	r3, #0
 8001d04:	69fa      	ldr	r2, [r7, #28]
 8001d06:	f002 0203 	and.w	r2, r2, #3
 8001d0a:	0092      	lsls	r2, r2, #2
 8001d0c:	4093      	lsls	r3, r2
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d14:	4935      	ldr	r1, [pc, #212]	; (8001dec <HAL_GPIO_Init+0x328>)
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	089b      	lsrs	r3, r3, #2
 8001d1a:	3302      	adds	r3, #2
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d22:	4b3d      	ldr	r3, [pc, #244]	; (8001e18 <HAL_GPIO_Init+0x354>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d003      	beq.n	8001d46 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d46:	4a34      	ldr	r2, [pc, #208]	; (8001e18 <HAL_GPIO_Init+0x354>)
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d4c:	4b32      	ldr	r3, [pc, #200]	; (8001e18 <HAL_GPIO_Init+0x354>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	43db      	mvns	r3, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d003      	beq.n	8001d70 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d70:	4a29      	ldr	r2, [pc, #164]	; (8001e18 <HAL_GPIO_Init+0x354>)
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d76:	4b28      	ldr	r3, [pc, #160]	; (8001e18 <HAL_GPIO_Init+0x354>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4013      	ands	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d9a:	4a1f      	ldr	r2, [pc, #124]	; (8001e18 <HAL_GPIO_Init+0x354>)
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001da0:	4b1d      	ldr	r3, [pc, #116]	; (8001e18 <HAL_GPIO_Init+0x354>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dc4:	4a14      	ldr	r2, [pc, #80]	; (8001e18 <HAL_GPIO_Init+0x354>)
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	61fb      	str	r3, [r7, #28]
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	2b0f      	cmp	r3, #15
 8001dd4:	f67f ae86 	bls.w	8001ae4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001dd8:	bf00      	nop
 8001dda:	bf00      	nop
 8001ddc:	3724      	adds	r7, #36	; 0x24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	40023800 	.word	0x40023800
 8001dec:	40013800 	.word	0x40013800
 8001df0:	40020000 	.word	0x40020000
 8001df4:	40020400 	.word	0x40020400
 8001df8:	40020800 	.word	0x40020800
 8001dfc:	40020c00 	.word	0x40020c00
 8001e00:	40021000 	.word	0x40021000
 8001e04:	40021400 	.word	0x40021400
 8001e08:	40021800 	.word	0x40021800
 8001e0c:	40021c00 	.word	0x40021c00
 8001e10:	40022000 	.word	0x40022000
 8001e14:	40022400 	.word	0x40022400
 8001e18:	40013c00 	.word	0x40013c00

08001e1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	460b      	mov	r3, r1
 8001e26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691a      	ldr	r2, [r3, #16]
 8001e2c:	887b      	ldrh	r3, [r7, #2]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d002      	beq.n	8001e3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e34:	2301      	movs	r3, #1
 8001e36:	73fb      	strb	r3, [r7, #15]
 8001e38:	e001      	b.n	8001e3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	460b      	mov	r3, r1
 8001e56:	807b      	strh	r3, [r7, #2]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e5c:	787b      	ldrb	r3, [r7, #1]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e62:	887a      	ldrh	r2, [r7, #2]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001e68:	e003      	b.n	8001e72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001e6a:	887b      	ldrh	r3, [r7, #2]
 8001e6c:	041a      	lsls	r2, r3, #16
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	619a      	str	r2, [r3, #24]
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b085      	sub	sp, #20
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
 8001e86:	460b      	mov	r3, r1
 8001e88:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e90:	887a      	ldrh	r2, [r7, #2]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	4013      	ands	r3, r2
 8001e96:	041a      	lsls	r2, r3, #16
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	43d9      	mvns	r1, r3
 8001e9c:	887b      	ldrh	r3, [r7, #2]
 8001e9e:	400b      	ands	r3, r1
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	619a      	str	r2, [r3, #24]
}
 8001ea6:	bf00      	nop
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
	...

08001eb4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e291      	b.n	80023ee <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f000 8087 	beq.w	8001fe6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ed8:	4b96      	ldr	r3, [pc, #600]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 030c 	and.w	r3, r3, #12
 8001ee0:	2b04      	cmp	r3, #4
 8001ee2:	d00c      	beq.n	8001efe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ee4:	4b93      	ldr	r3, [pc, #588]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 030c 	and.w	r3, r3, #12
 8001eec:	2b08      	cmp	r3, #8
 8001eee:	d112      	bne.n	8001f16 <HAL_RCC_OscConfig+0x62>
 8001ef0:	4b90      	ldr	r3, [pc, #576]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ef8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001efc:	d10b      	bne.n	8001f16 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001efe:	4b8d      	ldr	r3, [pc, #564]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d06c      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x130>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d168      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e26b      	b.n	80023ee <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f1e:	d106      	bne.n	8001f2e <HAL_RCC_OscConfig+0x7a>
 8001f20:	4b84      	ldr	r3, [pc, #528]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a83      	ldr	r2, [pc, #524]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f2a:	6013      	str	r3, [r2, #0]
 8001f2c:	e02e      	b.n	8001f8c <HAL_RCC_OscConfig+0xd8>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d10c      	bne.n	8001f50 <HAL_RCC_OscConfig+0x9c>
 8001f36:	4b7f      	ldr	r3, [pc, #508]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a7e      	ldr	r2, [pc, #504]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	4b7c      	ldr	r3, [pc, #496]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a7b      	ldr	r2, [pc, #492]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	e01d      	b.n	8001f8c <HAL_RCC_OscConfig+0xd8>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f58:	d10c      	bne.n	8001f74 <HAL_RCC_OscConfig+0xc0>
 8001f5a:	4b76      	ldr	r3, [pc, #472]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a75      	ldr	r2, [pc, #468]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	4b73      	ldr	r3, [pc, #460]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a72      	ldr	r2, [pc, #456]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	e00b      	b.n	8001f8c <HAL_RCC_OscConfig+0xd8>
 8001f74:	4b6f      	ldr	r3, [pc, #444]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a6e      	ldr	r2, [pc, #440]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f7e:	6013      	str	r3, [r2, #0]
 8001f80:	4b6c      	ldr	r3, [pc, #432]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a6b      	ldr	r2, [pc, #428]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001f86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d013      	beq.n	8001fbc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f94:	f7ff fc80 	bl	8001898 <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f9c:	f7ff fc7c 	bl	8001898 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b64      	cmp	r3, #100	; 0x64
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e21f      	b.n	80023ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fae:	4b61      	ldr	r3, [pc, #388]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f0      	beq.n	8001f9c <HAL_RCC_OscConfig+0xe8>
 8001fba:	e014      	b.n	8001fe6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fbc:	f7ff fc6c 	bl	8001898 <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc4:	f7ff fc68 	bl	8001898 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b64      	cmp	r3, #100	; 0x64
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e20b      	b.n	80023ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fd6:	4b57      	ldr	r3, [pc, #348]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f0      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x110>
 8001fe2:	e000      	b.n	8001fe6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d069      	beq.n	80020c6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ff2:	4b50      	ldr	r3, [pc, #320]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	f003 030c 	and.w	r3, r3, #12
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00b      	beq.n	8002016 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ffe:	4b4d      	ldr	r3, [pc, #308]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 030c 	and.w	r3, r3, #12
 8002006:	2b08      	cmp	r3, #8
 8002008:	d11c      	bne.n	8002044 <HAL_RCC_OscConfig+0x190>
 800200a:	4b4a      	ldr	r3, [pc, #296]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d116      	bne.n	8002044 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002016:	4b47      	ldr	r3, [pc, #284]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d005      	beq.n	800202e <HAL_RCC_OscConfig+0x17a>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	2b01      	cmp	r3, #1
 8002028:	d001      	beq.n	800202e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e1df      	b.n	80023ee <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800202e:	4b41      	ldr	r3, [pc, #260]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	493d      	ldr	r1, [pc, #244]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 800203e:	4313      	orrs	r3, r2
 8002040:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002042:	e040      	b.n	80020c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d023      	beq.n	8002094 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800204c:	4b39      	ldr	r3, [pc, #228]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a38      	ldr	r2, [pc, #224]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002058:	f7ff fc1e 	bl	8001898 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002060:	f7ff fc1a 	bl	8001898 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e1bd      	b.n	80023ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002072:	4b30      	ldr	r3, [pc, #192]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0f0      	beq.n	8002060 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800207e:	4b2d      	ldr	r3, [pc, #180]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4929      	ldr	r1, [pc, #164]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 800208e:	4313      	orrs	r3, r2
 8002090:	600b      	str	r3, [r1, #0]
 8002092:	e018      	b.n	80020c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002094:	4b27      	ldr	r3, [pc, #156]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a26      	ldr	r2, [pc, #152]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 800209a:	f023 0301 	bic.w	r3, r3, #1
 800209e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a0:	f7ff fbfa 	bl	8001898 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020a8:	f7ff fbf6 	bl	8001898 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e199      	b.n	80023ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ba:	4b1e      	ldr	r3, [pc, #120]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1f0      	bne.n	80020a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d038      	beq.n	8002144 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d019      	beq.n	800210e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020da:	4b16      	ldr	r3, [pc, #88]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 80020dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020de:	4a15      	ldr	r2, [pc, #84]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 80020e0:	f043 0301 	orr.w	r3, r3, #1
 80020e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e6:	f7ff fbd7 	bl	8001898 <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020ee:	f7ff fbd3 	bl	8001898 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e176      	b.n	80023ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002100:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8002102:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0f0      	beq.n	80020ee <HAL_RCC_OscConfig+0x23a>
 800210c:	e01a      	b.n	8002144 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800210e:	4b09      	ldr	r3, [pc, #36]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8002110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002112:	4a08      	ldr	r2, [pc, #32]	; (8002134 <HAL_RCC_OscConfig+0x280>)
 8002114:	f023 0301 	bic.w	r3, r3, #1
 8002118:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800211a:	f7ff fbbd 	bl	8001898 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002120:	e00a      	b.n	8002138 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002122:	f7ff fbb9 	bl	8001898 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d903      	bls.n	8002138 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e15c      	b.n	80023ee <HAL_RCC_OscConfig+0x53a>
 8002134:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002138:	4b91      	ldr	r3, [pc, #580]	; (8002380 <HAL_RCC_OscConfig+0x4cc>)
 800213a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1ee      	bne.n	8002122 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0304 	and.w	r3, r3, #4
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 80a4 	beq.w	800229a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002152:	4b8b      	ldr	r3, [pc, #556]	; (8002380 <HAL_RCC_OscConfig+0x4cc>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10d      	bne.n	800217a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800215e:	4b88      	ldr	r3, [pc, #544]	; (8002380 <HAL_RCC_OscConfig+0x4cc>)
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	4a87      	ldr	r2, [pc, #540]	; (8002380 <HAL_RCC_OscConfig+0x4cc>)
 8002164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002168:	6413      	str	r3, [r2, #64]	; 0x40
 800216a:	4b85      	ldr	r3, [pc, #532]	; (8002380 <HAL_RCC_OscConfig+0x4cc>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002176:	2301      	movs	r3, #1
 8002178:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800217a:	4b82      	ldr	r3, [pc, #520]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002182:	2b00      	cmp	r3, #0
 8002184:	d118      	bne.n	80021b8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002186:	4b7f      	ldr	r3, [pc, #508]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a7e      	ldr	r2, [pc, #504]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 800218c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002192:	f7ff fb81 	bl	8001898 <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800219a:	f7ff fb7d 	bl	8001898 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b64      	cmp	r3, #100	; 0x64
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e120      	b.n	80023ee <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021ac:	4b75      	ldr	r3, [pc, #468]	; (8002384 <HAL_RCC_OscConfig+0x4d0>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0f0      	beq.n	800219a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d106      	bne.n	80021ce <HAL_RCC_OscConfig+0x31a>
 80021c0:	4b6f      	ldr	r3, [pc, #444]	; (8002380 <HAL_RCC_OscConfig+0x4cc>)
 80021c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021c4:	4a6e      	ldr	r2, [pc, #440]	; (8002380 <HAL_RCC_OscConfig+0x4cc>)
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	6713      	str	r3, [r2, #112]	; 0x70
 80021cc:	e02d      	b.n	800222a <HAL_RCC_OscConfig+0x376>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10c      	bne.n	80021f0 <HAL_RCC_OscConfig+0x33c>
 80021d6:	4b6a      	ldr	r3, [pc, #424]	; (8002380 <HAL_RCC_OscConfig+0x4cc>)
 80021d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021da:	4a69      	ldr	r2, [pc, #420]	; (8002380 <HAL_RCC_OscConfig+0x4cc>)
 80021dc:	f023 0301 	bic.w	r3, r3, #1
 80021e0:	6713      	str	r3, [r2, #112]	; 0x70
 80021e2:	4b67      	ldr	r3, [pc, #412]	; (8002380 <HAL_RCC_OscConfig+0x4cc>)
 80021e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e6:	4a66      	ldr	r2, [pc, #408]	; (8002380 <HAL_RCC_OscConfig+0x4cc>)
 80021e8:	f023 0304 	bic.w	r3, r3, #4
 80021ec:	6713      	str	r3, [r2, #112]	; 0x70
 80021ee:	e01c      	b.n	800222a <HAL_RCC_OscConfig+0x376>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	2b05      	cmp	r3, #5
 80021f6:	d10c      	bne.n	8002212 <HAL_RCC_OscConfig+0x35e>
 80021f8:	4b61      	ldr	r3, [pc, #388]	; (8002380 <HAL_RCC_OscConfig+0x4cc>)
 80021fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fc:	4a60      	ldr	r2, [pc, #384]	; (8002380 <HAL_RCC_OscConfig+0x4cc>)
 80021fe:	f043 0304 	orr.w	r3, r3, #4
 8002202:	6713      	str	r3, [r2, #112]	; 0x70
 8002204:	4b5e      	ldr	r3, [pc, #376]	; (8002380 <HAL_RCC_OscConfig+0x4cc>)
 8002206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002208:	4a5d      	ldr	r2, [pc, #372]	; (8002380 <HAL_RCC_OscConfig+0x4cc>)
 800220a:	f043 0301 	orr.w	r3, r3, #1
 800220e:	6713      	str	r3, [r2, #112]	; 0x70
 8002210:	e00b      	b.n	800222a <HAL_RCC_OscConfig+0x376>
 8002212:	4b5b      	ldr	r3, [pc, #364]	; (8002380 <HAL_RCC_OscConfig+0x4cc>)
 8002214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002216:	4a5a      	ldr	r2, [pc, #360]	; (8002380 <HAL_RCC_OscConfig+0x4cc>)
 8002218:	f023 0301 	bic.w	r3, r3, #1
 800221c:	6713      	str	r3, [r2, #112]	; 0x70
 800221e:	4b58      	ldr	r3, [pc, #352]	; (8002380 <HAL_RCC_OscConfig+0x4cc>)
 8002220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002222:	4a57      	ldr	r2, [pc, #348]	; (8002380 <HAL_RCC_OscConfig+0x4cc>)
 8002224:	f023 0304 	bic.w	r3, r3, #4
 8002228:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d015      	beq.n	800225e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002232:	f7ff fb31 	bl	8001898 <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002238:	e00a      	b.n	8002250 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223a:	f7ff fb2d 	bl	8001898 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	f241 3288 	movw	r2, #5000	; 0x1388
 8002248:	4293      	cmp	r3, r2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e0ce      	b.n	80023ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002250:	4b4b      	ldr	r3, [pc, #300]	; (8002380 <HAL_RCC_OscConfig+0x4cc>)
 8002252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0ee      	beq.n	800223a <HAL_RCC_OscConfig+0x386>
 800225c:	e014      	b.n	8002288 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800225e:	f7ff fb1b 	bl	8001898 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002264:	e00a      	b.n	800227c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002266:	f7ff fb17 	bl	8001898 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	f241 3288 	movw	r2, #5000	; 0x1388
 8002274:	4293      	cmp	r3, r2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e0b8      	b.n	80023ee <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800227c:	4b40      	ldr	r3, [pc, #256]	; (8002380 <HAL_RCC_OscConfig+0x4cc>)
 800227e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1ee      	bne.n	8002266 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002288:	7dfb      	ldrb	r3, [r7, #23]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d105      	bne.n	800229a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800228e:	4b3c      	ldr	r3, [pc, #240]	; (8002380 <HAL_RCC_OscConfig+0x4cc>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	4a3b      	ldr	r2, [pc, #236]	; (8002380 <HAL_RCC_OscConfig+0x4cc>)
 8002294:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002298:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f000 80a4 	beq.w	80023ec <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022a4:	4b36      	ldr	r3, [pc, #216]	; (8002380 <HAL_RCC_OscConfig+0x4cc>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 030c 	and.w	r3, r3, #12
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d06b      	beq.n	8002388 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d149      	bne.n	800234c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b8:	4b31      	ldr	r3, [pc, #196]	; (8002380 <HAL_RCC_OscConfig+0x4cc>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a30      	ldr	r2, [pc, #192]	; (8002380 <HAL_RCC_OscConfig+0x4cc>)
 80022be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c4:	f7ff fae8 	bl	8001898 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022cc:	f7ff fae4 	bl	8001898 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e087      	b.n	80023ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022de:	4b28      	ldr	r3, [pc, #160]	; (8002380 <HAL_RCC_OscConfig+0x4cc>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69da      	ldr	r2, [r3, #28]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	431a      	orrs	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	019b      	lsls	r3, r3, #6
 80022fa:	431a      	orrs	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002300:	085b      	lsrs	r3, r3, #1
 8002302:	3b01      	subs	r3, #1
 8002304:	041b      	lsls	r3, r3, #16
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230c:	061b      	lsls	r3, r3, #24
 800230e:	4313      	orrs	r3, r2
 8002310:	4a1b      	ldr	r2, [pc, #108]	; (8002380 <HAL_RCC_OscConfig+0x4cc>)
 8002312:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002316:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002318:	4b19      	ldr	r3, [pc, #100]	; (8002380 <HAL_RCC_OscConfig+0x4cc>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a18      	ldr	r2, [pc, #96]	; (8002380 <HAL_RCC_OscConfig+0x4cc>)
 800231e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002322:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002324:	f7ff fab8 	bl	8001898 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800232c:	f7ff fab4 	bl	8001898 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e057      	b.n	80023ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800233e:	4b10      	ldr	r3, [pc, #64]	; (8002380 <HAL_RCC_OscConfig+0x4cc>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0f0      	beq.n	800232c <HAL_RCC_OscConfig+0x478>
 800234a:	e04f      	b.n	80023ec <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800234c:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <HAL_RCC_OscConfig+0x4cc>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a0b      	ldr	r2, [pc, #44]	; (8002380 <HAL_RCC_OscConfig+0x4cc>)
 8002352:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002356:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002358:	f7ff fa9e 	bl	8001898 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002360:	f7ff fa9a 	bl	8001898 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e03d      	b.n	80023ee <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002372:	4b03      	ldr	r3, [pc, #12]	; (8002380 <HAL_RCC_OscConfig+0x4cc>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1f0      	bne.n	8002360 <HAL_RCC_OscConfig+0x4ac>
 800237e:	e035      	b.n	80023ec <HAL_RCC_OscConfig+0x538>
 8002380:	40023800 	.word	0x40023800
 8002384:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002388:	4b1b      	ldr	r3, [pc, #108]	; (80023f8 <HAL_RCC_OscConfig+0x544>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d028      	beq.n	80023e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d121      	bne.n	80023e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d11a      	bne.n	80023e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023b8:	4013      	ands	r3, r2
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023be:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d111      	bne.n	80023e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ce:	085b      	lsrs	r3, r3, #1
 80023d0:	3b01      	subs	r3, #1
 80023d2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d107      	bne.n	80023e8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d001      	beq.n	80023ec <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e000      	b.n	80023ee <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40023800 	.word	0x40023800

080023fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e0d0      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002414:	4b6a      	ldr	r3, [pc, #424]	; (80025c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 030f 	and.w	r3, r3, #15
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d910      	bls.n	8002444 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002422:	4b67      	ldr	r3, [pc, #412]	; (80025c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f023 020f 	bic.w	r2, r3, #15
 800242a:	4965      	ldr	r1, [pc, #404]	; (80025c0 <HAL_RCC_ClockConfig+0x1c4>)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	4313      	orrs	r3, r2
 8002430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002432:	4b63      	ldr	r3, [pc, #396]	; (80025c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	683a      	ldr	r2, [r7, #0]
 800243c:	429a      	cmp	r2, r3
 800243e:	d001      	beq.n	8002444 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e0b8      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d020      	beq.n	8002492 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800245c:	4b59      	ldr	r3, [pc, #356]	; (80025c4 <HAL_RCC_ClockConfig+0x1c8>)
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	4a58      	ldr	r2, [pc, #352]	; (80025c4 <HAL_RCC_ClockConfig+0x1c8>)
 8002462:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002466:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0308 	and.w	r3, r3, #8
 8002470:	2b00      	cmp	r3, #0
 8002472:	d005      	beq.n	8002480 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002474:	4b53      	ldr	r3, [pc, #332]	; (80025c4 <HAL_RCC_ClockConfig+0x1c8>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	4a52      	ldr	r2, [pc, #328]	; (80025c4 <HAL_RCC_ClockConfig+0x1c8>)
 800247a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800247e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002480:	4b50      	ldr	r3, [pc, #320]	; (80025c4 <HAL_RCC_ClockConfig+0x1c8>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	494d      	ldr	r1, [pc, #308]	; (80025c4 <HAL_RCC_ClockConfig+0x1c8>)
 800248e:	4313      	orrs	r3, r2
 8002490:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d040      	beq.n	8002520 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d107      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a6:	4b47      	ldr	r3, [pc, #284]	; (80025c4 <HAL_RCC_ClockConfig+0x1c8>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d115      	bne.n	80024de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e07f      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d107      	bne.n	80024ce <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024be:	4b41      	ldr	r3, [pc, #260]	; (80025c4 <HAL_RCC_ClockConfig+0x1c8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d109      	bne.n	80024de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e073      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ce:	4b3d      	ldr	r3, [pc, #244]	; (80025c4 <HAL_RCC_ClockConfig+0x1c8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e06b      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024de:	4b39      	ldr	r3, [pc, #228]	; (80025c4 <HAL_RCC_ClockConfig+0x1c8>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f023 0203 	bic.w	r2, r3, #3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	4936      	ldr	r1, [pc, #216]	; (80025c4 <HAL_RCC_ClockConfig+0x1c8>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024f0:	f7ff f9d2 	bl	8001898 <HAL_GetTick>
 80024f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f6:	e00a      	b.n	800250e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f8:	f7ff f9ce 	bl	8001898 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	f241 3288 	movw	r2, #5000	; 0x1388
 8002506:	4293      	cmp	r3, r2
 8002508:	d901      	bls.n	800250e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e053      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800250e:	4b2d      	ldr	r3, [pc, #180]	; (80025c4 <HAL_RCC_ClockConfig+0x1c8>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 020c 	and.w	r2, r3, #12
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	429a      	cmp	r2, r3
 800251e:	d1eb      	bne.n	80024f8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002520:	4b27      	ldr	r3, [pc, #156]	; (80025c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 030f 	and.w	r3, r3, #15
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d210      	bcs.n	8002550 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252e:	4b24      	ldr	r3, [pc, #144]	; (80025c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 020f 	bic.w	r2, r3, #15
 8002536:	4922      	ldr	r1, [pc, #136]	; (80025c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	4313      	orrs	r3, r2
 800253c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800253e:	4b20      	ldr	r3, [pc, #128]	; (80025c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	429a      	cmp	r2, r3
 800254a:	d001      	beq.n	8002550 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e032      	b.n	80025b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b00      	cmp	r3, #0
 800255a:	d008      	beq.n	800256e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800255c:	4b19      	ldr	r3, [pc, #100]	; (80025c4 <HAL_RCC_ClockConfig+0x1c8>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	4916      	ldr	r1, [pc, #88]	; (80025c4 <HAL_RCC_ClockConfig+0x1c8>)
 800256a:	4313      	orrs	r3, r2
 800256c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0308 	and.w	r3, r3, #8
 8002576:	2b00      	cmp	r3, #0
 8002578:	d009      	beq.n	800258e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800257a:	4b12      	ldr	r3, [pc, #72]	; (80025c4 <HAL_RCC_ClockConfig+0x1c8>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	00db      	lsls	r3, r3, #3
 8002588:	490e      	ldr	r1, [pc, #56]	; (80025c4 <HAL_RCC_ClockConfig+0x1c8>)
 800258a:	4313      	orrs	r3, r2
 800258c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800258e:	f000 f821 	bl	80025d4 <HAL_RCC_GetSysClockFreq>
 8002592:	4602      	mov	r2, r0
 8002594:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <HAL_RCC_ClockConfig+0x1c8>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	091b      	lsrs	r3, r3, #4
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	490a      	ldr	r1, [pc, #40]	; (80025c8 <HAL_RCC_ClockConfig+0x1cc>)
 80025a0:	5ccb      	ldrb	r3, [r1, r3]
 80025a2:	fa22 f303 	lsr.w	r3, r2, r3
 80025a6:	4a09      	ldr	r2, [pc, #36]	; (80025cc <HAL_RCC_ClockConfig+0x1d0>)
 80025a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025aa:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <HAL_RCC_ClockConfig+0x1d4>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff f92e 	bl	8001810 <HAL_InitTick>

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40023c00 	.word	0x40023c00
 80025c4:	40023800 	.word	0x40023800
 80025c8:	0800285c 	.word	0x0800285c
 80025cc:	2000002c 	.word	0x2000002c
 80025d0:	20000030 	.word	0x20000030

080025d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025d8:	b090      	sub	sp, #64	; 0x40
 80025da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80025dc:	2300      	movs	r3, #0
 80025de:	637b      	str	r3, [r7, #52]	; 0x34
 80025e0:	2300      	movs	r3, #0
 80025e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025e4:	2300      	movs	r3, #0
 80025e6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80025e8:	2300      	movs	r3, #0
 80025ea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025ec:	4b59      	ldr	r3, [pc, #356]	; (8002754 <HAL_RCC_GetSysClockFreq+0x180>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 030c 	and.w	r3, r3, #12
 80025f4:	2b08      	cmp	r3, #8
 80025f6:	d00d      	beq.n	8002614 <HAL_RCC_GetSysClockFreq+0x40>
 80025f8:	2b08      	cmp	r3, #8
 80025fa:	f200 80a1 	bhi.w	8002740 <HAL_RCC_GetSysClockFreq+0x16c>
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d002      	beq.n	8002608 <HAL_RCC_GetSysClockFreq+0x34>
 8002602:	2b04      	cmp	r3, #4
 8002604:	d003      	beq.n	800260e <HAL_RCC_GetSysClockFreq+0x3a>
 8002606:	e09b      	b.n	8002740 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002608:	4b53      	ldr	r3, [pc, #332]	; (8002758 <HAL_RCC_GetSysClockFreq+0x184>)
 800260a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800260c:	e09b      	b.n	8002746 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800260e:	4b53      	ldr	r3, [pc, #332]	; (800275c <HAL_RCC_GetSysClockFreq+0x188>)
 8002610:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002612:	e098      	b.n	8002746 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002614:	4b4f      	ldr	r3, [pc, #316]	; (8002754 <HAL_RCC_GetSysClockFreq+0x180>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800261c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800261e:	4b4d      	ldr	r3, [pc, #308]	; (8002754 <HAL_RCC_GetSysClockFreq+0x180>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d028      	beq.n	800267c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800262a:	4b4a      	ldr	r3, [pc, #296]	; (8002754 <HAL_RCC_GetSysClockFreq+0x180>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	099b      	lsrs	r3, r3, #6
 8002630:	2200      	movs	r2, #0
 8002632:	623b      	str	r3, [r7, #32]
 8002634:	627a      	str	r2, [r7, #36]	; 0x24
 8002636:	6a3b      	ldr	r3, [r7, #32]
 8002638:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800263c:	2100      	movs	r1, #0
 800263e:	4b47      	ldr	r3, [pc, #284]	; (800275c <HAL_RCC_GetSysClockFreq+0x188>)
 8002640:	fb03 f201 	mul.w	r2, r3, r1
 8002644:	2300      	movs	r3, #0
 8002646:	fb00 f303 	mul.w	r3, r0, r3
 800264a:	4413      	add	r3, r2
 800264c:	4a43      	ldr	r2, [pc, #268]	; (800275c <HAL_RCC_GetSysClockFreq+0x188>)
 800264e:	fba0 1202 	umull	r1, r2, r0, r2
 8002652:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002654:	460a      	mov	r2, r1
 8002656:	62ba      	str	r2, [r7, #40]	; 0x28
 8002658:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800265a:	4413      	add	r3, r2
 800265c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800265e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002660:	2200      	movs	r2, #0
 8002662:	61bb      	str	r3, [r7, #24]
 8002664:	61fa      	str	r2, [r7, #28]
 8002666:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800266a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800266e:	f7fd fdcb 	bl	8000208 <__aeabi_uldivmod>
 8002672:	4602      	mov	r2, r0
 8002674:	460b      	mov	r3, r1
 8002676:	4613      	mov	r3, r2
 8002678:	63fb      	str	r3, [r7, #60]	; 0x3c
 800267a:	e053      	b.n	8002724 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800267c:	4b35      	ldr	r3, [pc, #212]	; (8002754 <HAL_RCC_GetSysClockFreq+0x180>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	099b      	lsrs	r3, r3, #6
 8002682:	2200      	movs	r2, #0
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	617a      	str	r2, [r7, #20]
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800268e:	f04f 0b00 	mov.w	fp, #0
 8002692:	4652      	mov	r2, sl
 8002694:	465b      	mov	r3, fp
 8002696:	f04f 0000 	mov.w	r0, #0
 800269a:	f04f 0100 	mov.w	r1, #0
 800269e:	0159      	lsls	r1, r3, #5
 80026a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026a4:	0150      	lsls	r0, r2, #5
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	ebb2 080a 	subs.w	r8, r2, sl
 80026ae:	eb63 090b 	sbc.w	r9, r3, fp
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	f04f 0300 	mov.w	r3, #0
 80026ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80026be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80026c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80026c6:	ebb2 0408 	subs.w	r4, r2, r8
 80026ca:	eb63 0509 	sbc.w	r5, r3, r9
 80026ce:	f04f 0200 	mov.w	r2, #0
 80026d2:	f04f 0300 	mov.w	r3, #0
 80026d6:	00eb      	lsls	r3, r5, #3
 80026d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026dc:	00e2      	lsls	r2, r4, #3
 80026de:	4614      	mov	r4, r2
 80026e0:	461d      	mov	r5, r3
 80026e2:	eb14 030a 	adds.w	r3, r4, sl
 80026e6:	603b      	str	r3, [r7, #0]
 80026e8:	eb45 030b 	adc.w	r3, r5, fp
 80026ec:	607b      	str	r3, [r7, #4]
 80026ee:	f04f 0200 	mov.w	r2, #0
 80026f2:	f04f 0300 	mov.w	r3, #0
 80026f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026fa:	4629      	mov	r1, r5
 80026fc:	028b      	lsls	r3, r1, #10
 80026fe:	4621      	mov	r1, r4
 8002700:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002704:	4621      	mov	r1, r4
 8002706:	028a      	lsls	r2, r1, #10
 8002708:	4610      	mov	r0, r2
 800270a:	4619      	mov	r1, r3
 800270c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800270e:	2200      	movs	r2, #0
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	60fa      	str	r2, [r7, #12]
 8002714:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002718:	f7fd fd76 	bl	8000208 <__aeabi_uldivmod>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	4613      	mov	r3, r2
 8002722:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002724:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <HAL_RCC_GetSysClockFreq+0x180>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	0c1b      	lsrs	r3, r3, #16
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	3301      	adds	r3, #1
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002734:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002738:	fbb2 f3f3 	udiv	r3, r2, r3
 800273c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800273e:	e002      	b.n	8002746 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002740:	4b05      	ldr	r3, [pc, #20]	; (8002758 <HAL_RCC_GetSysClockFreq+0x184>)
 8002742:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002744:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002748:	4618      	mov	r0, r3
 800274a:	3740      	adds	r7, #64	; 0x40
 800274c:	46bd      	mov	sp, r7
 800274e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002752:	bf00      	nop
 8002754:	40023800 	.word	0x40023800
 8002758:	00f42400 	.word	0x00f42400
 800275c:	017d7840 	.word	0x017d7840

08002760 <__libc_init_array>:
 8002760:	b570      	push	{r4, r5, r6, lr}
 8002762:	4d0d      	ldr	r5, [pc, #52]	; (8002798 <__libc_init_array+0x38>)
 8002764:	4c0d      	ldr	r4, [pc, #52]	; (800279c <__libc_init_array+0x3c>)
 8002766:	1b64      	subs	r4, r4, r5
 8002768:	10a4      	asrs	r4, r4, #2
 800276a:	2600      	movs	r6, #0
 800276c:	42a6      	cmp	r6, r4
 800276e:	d109      	bne.n	8002784 <__libc_init_array+0x24>
 8002770:	4d0b      	ldr	r5, [pc, #44]	; (80027a0 <__libc_init_array+0x40>)
 8002772:	4c0c      	ldr	r4, [pc, #48]	; (80027a4 <__libc_init_array+0x44>)
 8002774:	f000 f820 	bl	80027b8 <_init>
 8002778:	1b64      	subs	r4, r4, r5
 800277a:	10a4      	asrs	r4, r4, #2
 800277c:	2600      	movs	r6, #0
 800277e:	42a6      	cmp	r6, r4
 8002780:	d105      	bne.n	800278e <__libc_init_array+0x2e>
 8002782:	bd70      	pop	{r4, r5, r6, pc}
 8002784:	f855 3b04 	ldr.w	r3, [r5], #4
 8002788:	4798      	blx	r3
 800278a:	3601      	adds	r6, #1
 800278c:	e7ee      	b.n	800276c <__libc_init_array+0xc>
 800278e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002792:	4798      	blx	r3
 8002794:	3601      	adds	r6, #1
 8002796:	e7f2      	b.n	800277e <__libc_init_array+0x1e>
 8002798:	08002874 	.word	0x08002874
 800279c:	08002874 	.word	0x08002874
 80027a0:	08002874 	.word	0x08002874
 80027a4:	08002878 	.word	0x08002878

080027a8 <memset>:
 80027a8:	4402      	add	r2, r0
 80027aa:	4603      	mov	r3, r0
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d100      	bne.n	80027b2 <memset+0xa>
 80027b0:	4770      	bx	lr
 80027b2:	f803 1b01 	strb.w	r1, [r3], #1
 80027b6:	e7f9      	b.n	80027ac <memset+0x4>

080027b8 <_init>:
 80027b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ba:	bf00      	nop
 80027bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027be:	bc08      	pop	{r3}
 80027c0:	469e      	mov	lr, r3
 80027c2:	4770      	bx	lr

080027c4 <_fini>:
 80027c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027c6:	bf00      	nop
 80027c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ca:	bc08      	pop	{r3}
 80027cc:	469e      	mov	lr, r3
 80027ce:	4770      	bx	lr
