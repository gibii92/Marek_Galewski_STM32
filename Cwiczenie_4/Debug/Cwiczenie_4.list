
Cwiczenie_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e0c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08002fdc  08002fdc  00012fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003030  08003030  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003030  08003030  00013030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003038  08003038  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003038  08003038  00013038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800303c  0800303c  0001303c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003040  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000004c  20000074  080030b4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  080030b4  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000049df  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011fd  00000000  00000000  00024a83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004d0  00000000  00000000  00025c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000418  00000000  00000000  00026150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000251b7  00000000  00000000  00026568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000067ad  00000000  00000000  0004b71f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2b00  00000000  00000000  00051ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001349cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000014e0  00000000  00000000  00134a1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002fc4 	.word	0x08002fc4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08002fc4 	.word	0x08002fc4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b090      	sub	sp, #64	; 0x40
 80005b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005ca:	4bae      	ldr	r3, [pc, #696]	; (8000884 <MX_GPIO_Init+0x2d0>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4aad      	ldr	r2, [pc, #692]	; (8000884 <MX_GPIO_Init+0x2d0>)
 80005d0:	f043 0310 	orr.w	r3, r3, #16
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4bab      	ldr	r3, [pc, #684]	; (8000884 <MX_GPIO_Init+0x2d0>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0310 	and.w	r3, r3, #16
 80005de:	62bb      	str	r3, [r7, #40]	; 0x28
 80005e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005e2:	4ba8      	ldr	r3, [pc, #672]	; (8000884 <MX_GPIO_Init+0x2d0>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4aa7      	ldr	r2, [pc, #668]	; (8000884 <MX_GPIO_Init+0x2d0>)
 80005e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4ba5      	ldr	r3, [pc, #660]	; (8000884 <MX_GPIO_Init+0x2d0>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005f6:	627b      	str	r3, [r7, #36]	; 0x24
 80005f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	4ba2      	ldr	r3, [pc, #648]	; (8000884 <MX_GPIO_Init+0x2d0>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4aa1      	ldr	r2, [pc, #644]	; (8000884 <MX_GPIO_Init+0x2d0>)
 8000600:	f043 0302 	orr.w	r3, r3, #2
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b9f      	ldr	r3, [pc, #636]	; (8000884 <MX_GPIO_Init+0x2d0>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	623b      	str	r3, [r7, #32]
 8000610:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000612:	4b9c      	ldr	r3, [pc, #624]	; (8000884 <MX_GPIO_Init+0x2d0>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a9b      	ldr	r2, [pc, #620]	; (8000884 <MX_GPIO_Init+0x2d0>)
 8000618:	f043 0308 	orr.w	r3, r3, #8
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b99      	ldr	r3, [pc, #612]	; (8000884 <MX_GPIO_Init+0x2d0>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0308 	and.w	r3, r3, #8
 8000626:	61fb      	str	r3, [r7, #28]
 8000628:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800062a:	4b96      	ldr	r3, [pc, #600]	; (8000884 <MX_GPIO_Init+0x2d0>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a95      	ldr	r2, [pc, #596]	; (8000884 <MX_GPIO_Init+0x2d0>)
 8000630:	f043 0304 	orr.w	r3, r3, #4
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b93      	ldr	r3, [pc, #588]	; (8000884 <MX_GPIO_Init+0x2d0>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f003 0304 	and.w	r3, r3, #4
 800063e:	61bb      	str	r3, [r7, #24]
 8000640:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	4b90      	ldr	r3, [pc, #576]	; (8000884 <MX_GPIO_Init+0x2d0>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	4a8f      	ldr	r2, [pc, #572]	; (8000884 <MX_GPIO_Init+0x2d0>)
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	6313      	str	r3, [r2, #48]	; 0x30
 800064e:	4b8d      	ldr	r3, [pc, #564]	; (8000884 <MX_GPIO_Init+0x2d0>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	617b      	str	r3, [r7, #20]
 8000658:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800065a:	4b8a      	ldr	r3, [pc, #552]	; (8000884 <MX_GPIO_Init+0x2d0>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a89      	ldr	r2, [pc, #548]	; (8000884 <MX_GPIO_Init+0x2d0>)
 8000660:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b87      	ldr	r3, [pc, #540]	; (8000884 <MX_GPIO_Init+0x2d0>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800066e:	613b      	str	r3, [r7, #16]
 8000670:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000672:	4b84      	ldr	r3, [pc, #528]	; (8000884 <MX_GPIO_Init+0x2d0>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a83      	ldr	r2, [pc, #524]	; (8000884 <MX_GPIO_Init+0x2d0>)
 8000678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b81      	ldr	r3, [pc, #516]	; (8000884 <MX_GPIO_Init+0x2d0>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800068a:	4b7e      	ldr	r3, [pc, #504]	; (8000884 <MX_GPIO_Init+0x2d0>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a7d      	ldr	r2, [pc, #500]	; (8000884 <MX_GPIO_Init+0x2d0>)
 8000690:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b7b      	ldr	r3, [pc, #492]	; (8000884 <MX_GPIO_Init+0x2d0>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006a2:	4b78      	ldr	r3, [pc, #480]	; (8000884 <MX_GPIO_Init+0x2d0>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a77      	ldr	r2, [pc, #476]	; (8000884 <MX_GPIO_Init+0x2d0>)
 80006a8:	f043 0320 	orr.w	r3, r3, #32
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b75      	ldr	r3, [pc, #468]	; (8000884 <MX_GPIO_Init+0x2d0>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0320 	and.w	r3, r3, #32
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ba:	4b72      	ldr	r3, [pc, #456]	; (8000884 <MX_GPIO_Init+0x2d0>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a71      	ldr	r2, [pc, #452]	; (8000884 <MX_GPIO_Init+0x2d0>)
 80006c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b6f      	ldr	r3, [pc, #444]	; (8000884 <MX_GPIO_Init+0x2d0>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2110      	movs	r1, #16
 80006d6:	486c      	ldr	r0, [pc, #432]	; (8000888 <MX_GPIO_Init+0x2d4>)
 80006d8:	f001 fb64 	bl	8001da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80006dc:	2201      	movs	r2, #1
 80006de:	2120      	movs	r1, #32
 80006e0:	486a      	ldr	r0, [pc, #424]	; (800088c <MX_GPIO_Init+0x2d8>)
 80006e2:	f001 fb5f 	bl	8001da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED1_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin|LCD_D6_Pin, GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	f241 010d 	movw	r1, #4109	; 0x100d
 80006ec:	4868      	ldr	r0, [pc, #416]	; (8000890 <MX_GPIO_Init+0x2dc>)
 80006ee:	f001 fb59 	bl	8001da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2108      	movs	r1, #8
 80006f6:	4867      	ldr	r0, [pc, #412]	; (8000894 <MX_GPIO_Init+0x2e0>)
 80006f8:	f001 fb54 	bl	8001da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, DCMI_PWR_EN_Pin|LCD_D7_Pin, GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 8000702:	4865      	ldr	r0, [pc, #404]	; (8000898 <MX_GPIO_Init+0x2e4>)
 8000704:	f001 fb4e 	bl	8001da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin|LCD_RW_Pin, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	21c0      	movs	r1, #192	; 0xc0
 800070c:	4863      	ldr	r0, [pc, #396]	; (800089c <MX_GPIO_Init+0x2e8>)
 800070e:	f001 fb49 	bl	8001da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LCD_D5_Pin|LCD_E_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	21c8      	movs	r1, #200	; 0xc8
 8000716:	4862      	ldr	r0, [pc, #392]	; (80008a0 <MX_GPIO_Init+0x2ec>)
 8000718:	f001 fb44 	bl	8001da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 800071c:	2310      	movs	r3, #16
 800071e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000720:	2302      	movs	r3, #2
 8000722:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000728:	2300      	movs	r3, #0
 800072a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800072c:	230e      	movs	r3, #14
 800072e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000730:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000734:	4619      	mov	r1, r3
 8000736:	485b      	ldr	r0, [pc, #364]	; (80008a4 <MX_GPIO_Init+0x2f0>)
 8000738:	f001 f970 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800073c:	2308      	movs	r3, #8
 800073e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000740:	2300      	movs	r3, #0
 8000742:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000748:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800074c:	4619      	mov	r1, r3
 800074e:	4855      	ldr	r0, [pc, #340]	; (80008a4 <MX_GPIO_Init+0x2f0>)
 8000750:	f001 f964 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000754:	2304      	movs	r3, #4
 8000756:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000758:	2302      	movs	r3, #2
 800075a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000760:	2303      	movs	r3, #3
 8000762:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000764:	2309      	movs	r3, #9
 8000766:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000768:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800076c:	4619      	mov	r1, r3
 800076e:	484d      	ldr	r0, [pc, #308]	; (80008a4 <MX_GPIO_Init+0x2f0>)
 8000770:	f001 f954 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000774:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000778:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077a:	2302      	movs	r3, #2
 800077c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000782:	2303      	movs	r3, #3
 8000784:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000786:	230b      	movs	r3, #11
 8000788:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800078a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800078e:	4619      	mov	r1, r3
 8000790:	4843      	ldr	r0, [pc, #268]	; (80008a0 <MX_GPIO_Init+0x2ec>)
 8000792:	f001 f943 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000796:	f64f 7383 	movw	r3, #65411	; 0xff83
 800079a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079c:	2302      	movs	r3, #2
 800079e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a4:	2303      	movs	r3, #3
 80007a6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007a8:	230c      	movs	r3, #12
 80007aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007b0:	4619      	mov	r1, r3
 80007b2:	483c      	ldr	r0, [pc, #240]	; (80008a4 <MX_GPIO_Init+0x2f0>)
 80007b4:	f001 f932 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80007b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007be:	2312      	movs	r3, #18
 80007c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007ca:	2304      	movs	r3, #4
 80007cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007d2:	4619      	mov	r1, r3
 80007d4:	482c      	ldr	r0, [pc, #176]	; (8000888 <MX_GPIO_Init+0x2d4>)
 80007d6:	f001 f921 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 80007da:	f643 4323 	movw	r3, #15395	; 0x3c23
 80007de:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e0:	2302      	movs	r3, #2
 80007e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e8:	2303      	movs	r3, #3
 80007ea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80007ec:	230a      	movs	r3, #10
 80007ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007f4:	4619      	mov	r1, r3
 80007f6:	4824      	ldr	r0, [pc, #144]	; (8000888 <MX_GPIO_Init+0x2d4>)
 80007f8:	f001 f910 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_D4_Pin;
 80007fc:	2310      	movs	r3, #16
 80007fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000800:	2301      	movs	r3, #1
 8000802:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000808:	2301      	movs	r3, #1
 800080a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_D4_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000810:	4619      	mov	r1, r3
 8000812:	481d      	ldr	r0, [pc, #116]	; (8000888 <MX_GPIO_Init+0x2d4>)
 8000814:	f001 f902 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000818:	2380      	movs	r3, #128	; 0x80
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081c:	2302      	movs	r3, #2
 800081e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000828:	2308      	movs	r3, #8
 800082a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 800082c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000830:	4619      	mov	r1, r3
 8000832:	4816      	ldr	r0, [pc, #88]	; (800088c <MX_GPIO_Init+0x2d8>)
 8000834:	f001 f8f2 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8000838:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800083c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000846:	2303      	movs	r3, #3
 8000848:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800084a:	230c      	movs	r3, #12
 800084c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800084e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000852:	4619      	mov	r1, r3
 8000854:	4811      	ldr	r0, [pc, #68]	; (800089c <MX_GPIO_Init+0x2e8>)
 8000856:	f001 f8e1 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800085a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800085e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000860:	2302      	movs	r3, #2
 8000862:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800086c:	2301      	movs	r3, #1
 800086e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000874:	4619      	mov	r1, r3
 8000876:	480c      	ldr	r0, [pc, #48]	; (80008a8 <MX_GPIO_Init+0x2f4>)
 8000878:	f001 f8d0 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 800087c:	2360      	movs	r3, #96	; 0x60
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000880:	2302      	movs	r3, #2
 8000882:	e013      	b.n	80008ac <MX_GPIO_Init+0x2f8>
 8000884:	40023800 	.word	0x40023800
 8000888:	40020400 	.word	0x40020400
 800088c:	40020c00 	.word	0x40020c00
 8000890:	40022000 	.word	0x40022000
 8000894:	40022800 	.word	0x40022800
 8000898:	40021c00 	.word	0x40021c00
 800089c:	40020800 	.word	0x40020800
 80008a0:	40021800 	.word	0x40021800
 80008a4:	40021000 	.word	0x40021000
 80008a8:	40020000 	.word	0x40020000
 80008ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008b6:	230d      	movs	r3, #13
 80008b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008be:	4619      	mov	r1, r3
 80008c0:	48bb      	ldr	r0, [pc, #748]	; (8000bb0 <MX_GPIO_Init+0x5fc>)
 80008c2:	f001 f8ab 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 80008c6:	2380      	movs	r3, #128	; 0x80
 80008c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008d6:	2307      	movs	r3, #7
 80008d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008de:	4619      	mov	r1, r3
 80008e0:	48b4      	ldr	r0, [pc, #720]	; (8000bb4 <MX_GPIO_Init+0x600>)
 80008e2:	f001 f89b 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80008e6:	2340      	movs	r3, #64	; 0x40
 80008e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f2:	2303      	movs	r3, #3
 80008f4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80008f6:	230a      	movs	r3, #10
 80008f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008fe:	4619      	mov	r1, r3
 8000900:	48ac      	ldr	r0, [pc, #688]	; (8000bb4 <MX_GPIO_Init+0x600>)
 8000902:	f001 f88b 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000906:	f248 1333 	movw	r3, #33075	; 0x8133
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000914:	2303      	movs	r3, #3
 8000916:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000918:	230c      	movs	r3, #12
 800091a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800091c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000920:	4619      	mov	r1, r3
 8000922:	48a5      	ldr	r0, [pc, #660]	; (8000bb8 <MX_GPIO_Init+0x604>)
 8000924:	f001 f87a 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000928:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800092c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092e:	2302      	movs	r3, #2
 8000930:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800093a:	230e      	movs	r3, #14
 800093c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800093e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000942:	4619      	mov	r1, r3
 8000944:	489d      	ldr	r0, [pc, #628]	; (8000bbc <MX_GPIO_Init+0x608>)
 8000946:	f001 f869 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800094a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800094e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000950:	2300      	movs	r3, #0
 8000952:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000958:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800095c:	4619      	mov	r1, r3
 800095e:	4897      	ldr	r0, [pc, #604]	; (8000bbc <MX_GPIO_Init+0x608>)
 8000960:	f001 f85c 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8000964:	2340      	movs	r3, #64	; 0x40
 8000966:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000968:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800096c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000976:	4619      	mov	r1, r3
 8000978:	4891      	ldr	r0, [pc, #580]	; (8000bc0 <MX_GPIO_Init+0x60c>)
 800097a:	f001 f84f 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800097e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000982:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000984:	2302      	movs	r3, #2
 8000986:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098c:	2303      	movs	r3, #3
 800098e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000990:	230c      	movs	r3, #12
 8000992:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000994:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000998:	4619      	mov	r1, r3
 800099a:	4889      	ldr	r0, [pc, #548]	; (8000bc0 <MX_GPIO_Init+0x60c>)
 800099c:	f001 f83e 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80009a0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a6:	2302      	movs	r3, #2
 80009a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ae:	2303      	movs	r3, #3
 80009b0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009b2:	230a      	movs	r3, #10
 80009b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009ba:	4619      	mov	r1, r3
 80009bc:	4881      	ldr	r0, [pc, #516]	; (8000bc4 <MX_GPIO_Init+0x610>)
 80009be:	f001 f82d 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80009c2:	23f0      	movs	r3, #240	; 0xf0
 80009c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	2300      	movs	r3, #0
 80009d0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80009d2:	230a      	movs	r3, #10
 80009d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80009d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009da:	4619      	mov	r1, r3
 80009dc:	487a      	ldr	r0, [pc, #488]	; (8000bc8 <MX_GPIO_Init+0x614>)
 80009de:	f001 f81d 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin PKPin PKPin
                           PKPin PKPin PKPin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80009e2:	23f7      	movs	r3, #247	; 0xf7
 80009e4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	2302      	movs	r3, #2
 80009e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009f2:	230e      	movs	r3, #14
 80009f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80009f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009fa:	4619      	mov	r1, r3
 80009fc:	4873      	ldr	r0, [pc, #460]	; (8000bcc <MX_GPIO_Init+0x618>)
 80009fe:	f001 f80d 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 8000a02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a14:	2309      	movs	r3, #9
 8000a16:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000a18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4866      	ldr	r0, [pc, #408]	; (8000bb8 <MX_GPIO_Init+0x604>)
 8000a20:	f000 fffc 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8000a24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000a36:	230a      	movs	r3, #10
 8000a38:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a3e:	4619      	mov	r1, r3
 8000a40:	485d      	ldr	r0, [pc, #372]	; (8000bb8 <MX_GPIO_Init+0x604>)
 8000a42:	f000 ffeb 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a46:	2320      	movs	r3, #32
 8000a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4858      	ldr	r0, [pc, #352]	; (8000bc0 <MX_GPIO_Init+0x60c>)
 8000a5e:	f000 ffdd 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8000a62:	2308      	movs	r3, #8
 8000a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a66:	2302      	movs	r3, #2
 8000a68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000a72:	230d      	movs	r3, #13
 8000a74:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4850      	ldr	r0, [pc, #320]	; (8000bc0 <MX_GPIO_Init+0x60c>)
 8000a7e:	f000 ffcd 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = LED1_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8000a82:	f241 030c 	movw	r3, #4108	; 0x100c
 8000a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a98:	4619      	mov	r1, r3
 8000a9a:	484b      	ldr	r0, [pc, #300]	; (8000bc8 <MX_GPIO_Init+0x614>)
 8000a9c:	f000 ffbe 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000aa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4846      	ldr	r0, [pc, #280]	; (8000bd0 <MX_GPIO_Init+0x61c>)
 8000ab6:	f000 ffb1 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000aba:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000abe:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000acc:	230c      	movs	r3, #12
 8000ace:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ad0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	483f      	ldr	r0, [pc, #252]	; (8000bd4 <MX_GPIO_Init+0x620>)
 8000ad8:	f000 ffa0 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000adc:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8000ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000aee:	230e      	movs	r3, #14
 8000af0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000af2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000af6:	4619      	mov	r1, r3
 8000af8:	4833      	ldr	r0, [pc, #204]	; (8000bc8 <MX_GPIO_Init+0x614>)
 8000afa:	f000 ff8f 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000afe:	2308      	movs	r3, #8
 8000b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b02:	2301      	movs	r3, #1
 8000b04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b12:	4619      	mov	r1, r3
 8000b14:	482d      	ldr	r0, [pc, #180]	; (8000bcc <MX_GPIO_Init+0x618>)
 8000b16:	f000 ff81 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000b1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b2c:	230d      	movs	r3, #13
 8000b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000b30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b34:	4619      	mov	r1, r3
 8000b36:	4820      	ldr	r0, [pc, #128]	; (8000bb8 <MX_GPIO_Init+0x604>)
 8000b38:	f000 ff70 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b3c:	2310      	movs	r3, #16
 8000b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b40:	2300      	movs	r3, #0
 8000b42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	481c      	ldr	r0, [pc, #112]	; (8000bc0 <MX_GPIO_Init+0x60c>)
 8000b50:	f000 ff64 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000b54:	2304      	movs	r3, #4
 8000b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b60:	2303      	movs	r3, #3
 8000b62:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000b64:	230c      	movs	r3, #12
 8000b66:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000b68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4814      	ldr	r0, [pc, #80]	; (8000bc0 <MX_GPIO_Init+0x60c>)
 8000b70:	f000 ff54 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000b74:	f248 0304 	movw	r3, #32772	; 0x8004
 8000b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b86:	4619      	mov	r1, r3
 8000b88:	4813      	ldr	r0, [pc, #76]	; (8000bd8 <MX_GPIO_Init+0x624>)
 8000b8a:	f000 ff47 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b9e:	2305      	movs	r3, #5
 8000ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000ba2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4807      	ldr	r0, [pc, #28]	; (8000bc8 <MX_GPIO_Init+0x614>)
 8000baa:	f000 ff37 	bl	8001a1c <HAL_GPIO_Init>
 8000bae:	e015      	b.n	8000bdc <MX_GPIO_Init+0x628>
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	40020400 	.word	0x40020400
 8000bb8:	40021800 	.word	0x40021800
 8000bbc:	40022400 	.word	0x40022400
 8000bc0:	40020c00 	.word	0x40020c00
 8000bc4:	40020000 	.word	0x40020000
 8000bc8:	40022000 	.word	0x40022000
 8000bcc:	40022800 	.word	0x40022800
 8000bd0:	40020800 	.word	0x40020800
 8000bd4:	40021400 	.word	0x40021400
 8000bd8:	40021c00 	.word	0x40021c00

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000bdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be2:	2301      	movs	r3, #1
 8000be4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	48ba      	ldr	r0, [pc, #744]	; (8000ee0 <MX_GPIO_Init+0x92c>)
 8000bf6:	f000 ff11 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000bfa:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c00:	2302      	movs	r3, #2
 8000c02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c0c:	230d      	movs	r3, #13
 8000c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c14:	4619      	mov	r1, r3
 8000c16:	48b2      	ldr	r0, [pc, #712]	; (8000ee0 <MX_GPIO_Init+0x92c>)
 8000c18:	f000 ff00 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_D6_Pin;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c20:	2301      	movs	r3, #1
 8000c22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_D6_GPIO_Port, &GPIO_InitStruct);
 8000c2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c30:	4619      	mov	r1, r3
 8000c32:	48ac      	ldr	r0, [pc, #688]	; (8000ee4 <MX_GPIO_Init+0x930>)
 8000c34:	f000 fef2 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000c38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c4a:	2307      	movs	r3, #7
 8000c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c52:	4619      	mov	r1, r3
 8000c54:	48a4      	ldr	r0, [pc, #656]	; (8000ee8 <MX_GPIO_Init+0x934>)
 8000c56:	f000 fee1 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000c5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000c70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c74:	4619      	mov	r1, r3
 8000c76:	489c      	ldr	r0, [pc, #624]	; (8000ee8 <MX_GPIO_Init+0x934>)
 8000c78:	f000 fed0 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000c7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c82:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000c8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c90:	4619      	mov	r1, r3
 8000c92:	4894      	ldr	r0, [pc, #592]	; (8000ee4 <MX_GPIO_Init+0x930>)
 8000c94:	f000 fec2 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_RW_Pin;
 8000c98:	23c0      	movs	r3, #192	; 0xc0
 8000c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ca8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cac:	4619      	mov	r1, r3
 8000cae:	488f      	ldr	r0, [pc, #572]	; (8000eec <MX_GPIO_Init+0x938>)
 8000cb0:	f000 feb4 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000cb4:	2310      	movs	r3, #16
 8000cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000cc4:	230a      	movs	r3, #10
 8000cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000cc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4884      	ldr	r0, [pc, #528]	; (8000ee0 <MX_GPIO_Init+0x92c>)
 8000cd0:	f000 fea4 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000cd4:	2328      	movs	r3, #40	; 0x28
 8000cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ce4:	230c      	movs	r3, #12
 8000ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ce8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cec:	4619      	mov	r1, r3
 8000cee:	487c      	ldr	r0, [pc, #496]	; (8000ee0 <MX_GPIO_Init+0x92c>)
 8000cf0:	f000 fe94 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LCD_D5_Pin|LCD_E_Pin;
 8000cf4:	23c0      	movs	r3, #192	; 0xc0
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000d00:	2301      	movs	r3, #1
 8000d02:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4879      	ldr	r0, [pc, #484]	; (8000ef0 <MX_GPIO_Init+0x93c>)
 8000d0c:	f000 fe86 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000d10:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000d14:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d16:	2303      	movs	r3, #3
 8000d18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d22:	4619      	mov	r1, r3
 8000d24:	4873      	ldr	r0, [pc, #460]	; (8000ef4 <MX_GPIO_Init+0x940>)
 8000d26:	f000 fe79 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000d2a:	2308      	movs	r3, #8
 8000d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d36:	2303      	movs	r3, #3
 8000d38:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d3a:	230c      	movs	r3, #12
 8000d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000d3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d42:	4619      	mov	r1, r3
 8000d44:	4869      	ldr	r0, [pc, #420]	; (8000eec <MX_GPIO_Init+0x938>)
 8000d46:	f000 fe69 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000d4a:	2305      	movs	r3, #5
 8000d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d56:	2303      	movs	r3, #3
 8000d58:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d5a:	230a      	movs	r3, #10
 8000d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d62:	4619      	mov	r1, r3
 8000d64:	4861      	ldr	r0, [pc, #388]	; (8000eec <MX_GPIO_Init+0x938>)
 8000d66:	f000 fe59 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d6a:	2332      	movs	r3, #50	; 0x32
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d76:	2303      	movs	r3, #3
 8000d78:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d7a:	230b      	movs	r3, #11
 8000d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d82:	4619      	mov	r1, r3
 8000d84:	4859      	ldr	r0, [pc, #356]	; (8000eec <MX_GPIO_Init+0x938>)
 8000d86:	f000 fe49 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d8a:	2304      	movs	r3, #4
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d96:	2303      	movs	r3, #3
 8000d98:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d9a:	2309      	movs	r3, #9
 8000d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000da2:	4619      	mov	r1, r3
 8000da4:	4854      	ldr	r0, [pc, #336]	; (8000ef8 <MX_GPIO_Init+0x944>)
 8000da6:	f000 fe39 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000daa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db0:	2302      	movs	r3, #2
 8000db2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db8:	2303      	movs	r3, #3
 8000dba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000dbc:	2309      	movs	r3, #9
 8000dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	484d      	ldr	r0, [pc, #308]	; (8000efc <MX_GPIO_Init+0x948>)
 8000dc8:	f000 fe28 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8000dcc:	2308      	movs	r3, #8
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8000ddc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000de0:	4619      	mov	r1, r3
 8000de2:	4843      	ldr	r0, [pc, #268]	; (8000ef0 <MX_GPIO_Init+0x93c>)
 8000de4:	f000 fe1a 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000de8:	2304      	movs	r3, #4
 8000dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dec:	2300      	movs	r3, #0
 8000dee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000df4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000df8:	4619      	mov	r1, r3
 8000dfa:	483d      	ldr	r0, [pc, #244]	; (8000ef0 <MX_GPIO_Init+0x93c>)
 8000dfc:	f000 fe0e 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e00:	2386      	movs	r3, #134	; 0x86
 8000e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e04:	2302      	movs	r3, #2
 8000e06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e10:	230b      	movs	r3, #11
 8000e12:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4833      	ldr	r0, [pc, #204]	; (8000ee8 <MX_GPIO_Init+0x934>)
 8000e1c:	f000 fdfe 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000e20:	2301      	movs	r3, #1
 8000e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e24:	2303      	movs	r3, #3
 8000e26:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000e2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e30:	4619      	mov	r1, r3
 8000e32:	482d      	ldr	r0, [pc, #180]	; (8000ee8 <MX_GPIO_Init+0x934>)
 8000e34:	f000 fdf2 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000e38:	2350      	movs	r3, #80	; 0x50
 8000e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e48:	230d      	movs	r3, #13
 8000e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e50:	4619      	mov	r1, r3
 8000e52:	4825      	ldr	r0, [pc, #148]	; (8000ee8 <MX_GPIO_Init+0x934>)
 8000e54:	f000 fde2 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000e58:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e5e:	2312      	movs	r3, #18
 8000e60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e66:	2303      	movs	r3, #3
 8000e68:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e6a:	2304      	movs	r3, #4
 8000e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e72:	4619      	mov	r1, r3
 8000e74:	481a      	ldr	r0, [pc, #104]	; (8000ee0 <MX_GPIO_Init+0x92c>)
 8000e76:	f000 fdd1 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000e7a:	2328      	movs	r3, #40	; 0x28
 8000e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e86:	2303      	movs	r3, #3
 8000e88:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e8a:	230a      	movs	r3, #10
 8000e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e92:	4619      	mov	r1, r3
 8000e94:	4814      	ldr	r0, [pc, #80]	; (8000ee8 <MX_GPIO_Init+0x934>)
 8000e96:	f000 fdc1 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_D7_Pin;
 8000e9a:	2340      	movs	r3, #64	; 0x40
 8000e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_D7_GPIO_Port, &GPIO_InitStruct);
 8000eaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eae:	4619      	mov	r1, r3
 8000eb0:	480b      	ldr	r0, [pc, #44]	; (8000ee0 <MX_GPIO_Init+0x92c>)
 8000eb2:	f000 fdb3 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000eb6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ec8:	2305      	movs	r3, #5
 8000eca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ecc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4809      	ldr	r0, [pc, #36]	; (8000ef8 <MX_GPIO_Init+0x944>)
 8000ed4:	f000 fda2 	bl	8001a1c <HAL_GPIO_Init>

}
 8000ed8:	bf00      	nop
 8000eda:	3740      	adds	r7, #64	; 0x40
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40021c00 	.word	0x40021c00
 8000ee4:	40022000 	.word	0x40022000
 8000ee8:	40020000 	.word	0x40020000
 8000eec:	40020800 	.word	0x40020800
 8000ef0:	40021800 	.word	0x40021800
 8000ef4:	40021400 	.word	0x40021400
 8000ef8:	40020400 	.word	0x40020400
 8000efc:	40020c00 	.word	0x40020c00

08000f00 <LCD_WriteNibble>:
#include "lcd.h"
#include "gpio.h"
GPIO_InitTypeDef GPIO_InitStruct;
//-----------------------------------------------------------------------------
void LCD_WriteNibble(char nibbleToWrite)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	2140      	movs	r1, #64	; 0x40
 8000f0e:	4818      	ldr	r0, [pc, #96]	; (8000f70 <LCD_WriteNibble+0x70>)
 8000f10:	f000 ff48 	bl	8001da4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (GPIO_PinState)(nibbleToWrite & 0x01));
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	2110      	movs	r1, #16
 8000f20:	4814      	ldr	r0, [pc, #80]	; (8000f74 <LCD_WriteNibble+0x74>)
 8000f22:	f000 ff3f 	bl	8001da4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (GPIO_PinState)(nibbleToWrite & 0x02));
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	f003 0302 	and.w	r3, r3, #2
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	461a      	mov	r2, r3
 8000f30:	2180      	movs	r1, #128	; 0x80
 8000f32:	480f      	ldr	r0, [pc, #60]	; (8000f70 <LCD_WriteNibble+0x70>)
 8000f34:	f000 ff36 	bl	8001da4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (GPIO_PinState)(nibbleToWrite & 0x04));
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	f003 0304 	and.w	r3, r3, #4
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	461a      	mov	r2, r3
 8000f42:	2101      	movs	r1, #1
 8000f44:	480c      	ldr	r0, [pc, #48]	; (8000f78 <LCD_WriteNibble+0x78>)
 8000f46:	f000 ff2d 	bl	8001da4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (GPIO_PinState)(nibbleToWrite & 0x08));
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	f003 0308 	and.w	r3, r3, #8
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	461a      	mov	r2, r3
 8000f54:	2140      	movs	r1, #64	; 0x40
 8000f56:	4809      	ldr	r0, [pc, #36]	; (8000f7c <LCD_WriteNibble+0x7c>)
 8000f58:	f000 ff24 	bl	8001da4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2140      	movs	r1, #64	; 0x40
 8000f60:	4803      	ldr	r0, [pc, #12]	; (8000f70 <LCD_WriteNibble+0x70>)
 8000f62:	f000 ff1f 	bl	8001da4 <HAL_GPIO_WritePin>
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40021800 	.word	0x40021800
 8000f74:	40020400 	.word	0x40020400
 8000f78:	40022000 	.word	0x40022000
 8000f7c:	40021c00 	.word	0x40021c00

08000f80 <LCD_ReadNibble>:
//-----------------------------------------------------------------------------
unsigned char LCD_ReadNibble(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
  unsigned char tmp = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	2140      	movs	r1, #64	; 0x40
 8000f8e:	481e      	ldr	r0, [pc, #120]	; (8001008 <LCD_ReadNibble+0x88>)
 8000f90:	f000 ff08 	bl	8001da4 <HAL_GPIO_WritePin>
  tmp |= (HAL_GPIO_ReadPin(LCD_D4_GPIO_Port, LCD_D4_Pin) << 0);
 8000f94:	2110      	movs	r1, #16
 8000f96:	481d      	ldr	r0, [pc, #116]	; (800100c <LCD_ReadNibble+0x8c>)
 8000f98:	f000 feec 	bl	8001d74 <HAL_GPIO_ReadPin>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	b25a      	sxtb	r2, r3
 8000fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	b25b      	sxtb	r3, r3
 8000fa8:	71fb      	strb	r3, [r7, #7]
  tmp |= (HAL_GPIO_ReadPin(LCD_D5_GPIO_Port, LCD_D5_Pin) << 1);
 8000faa:	2180      	movs	r1, #128	; 0x80
 8000fac:	4816      	ldr	r0, [pc, #88]	; (8001008 <LCD_ReadNibble+0x88>)
 8000fae:	f000 fee1 	bl	8001d74 <HAL_GPIO_ReadPin>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	b25a      	sxtb	r2, r3
 8000fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	b25b      	sxtb	r3, r3
 8000fc0:	71fb      	strb	r3, [r7, #7]
  tmp |= (HAL_GPIO_ReadPin(LCD_D6_GPIO_Port, LCD_D6_Pin) << 2);
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	4812      	ldr	r0, [pc, #72]	; (8001010 <LCD_ReadNibble+0x90>)
 8000fc6:	f000 fed5 	bl	8001d74 <HAL_GPIO_ReadPin>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	b25a      	sxtb	r2, r3
 8000fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	b25b      	sxtb	r3, r3
 8000fd8:	71fb      	strb	r3, [r7, #7]
  tmp |= (HAL_GPIO_ReadPin(LCD_D7_GPIO_Port, LCD_D7_Pin) << 3);
 8000fda:	2140      	movs	r1, #64	; 0x40
 8000fdc:	480d      	ldr	r0, [pc, #52]	; (8001014 <LCD_ReadNibble+0x94>)
 8000fde:	f000 fec9 	bl	8001d74 <HAL_GPIO_ReadPin>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	00db      	lsls	r3, r3, #3
 8000fe6:	b25a      	sxtb	r2, r3
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	b25b      	sxtb	r3, r3
 8000ff0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2140      	movs	r1, #64	; 0x40
 8000ff6:	4804      	ldr	r0, [pc, #16]	; (8001008 <LCD_ReadNibble+0x88>)
 8000ff8:	f000 fed4 	bl	8001da4 <HAL_GPIO_WritePin>
  return tmp;
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40021800 	.word	0x40021800
 800100c:	40020400 	.word	0x40020400
 8001010:	40022000 	.word	0x40022000
 8001014:	40021c00 	.word	0x40021c00

08001018 <LCD_SetDataPinInput>:
//-----------------------------------------------------------------------------
void LCD_SetDataPinInput(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Pin =  LCD_D4_Pin;
 800101c:	4b20      	ldr	r3, [pc, #128]	; (80010a0 <LCD_SetDataPinInput+0x88>)
 800101e:	2210      	movs	r2, #16
 8001020:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001022:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <LCD_SetDataPinInput+0x88>)
 8001024:	2200      	movs	r2, #0
 8001026:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001028:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <LCD_SetDataPinInput+0x88>)
 800102a:	2201      	movs	r2, #1
 800102c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800102e:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <LCD_SetDataPinInput+0x88>)
 8001030:	2201      	movs	r2, #1
 8001032:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LCD_D4_GPIO_Port, &GPIO_InitStruct);
 8001034:	491a      	ldr	r1, [pc, #104]	; (80010a0 <LCD_SetDataPinInput+0x88>)
 8001036:	481b      	ldr	r0, [pc, #108]	; (80010a4 <LCD_SetDataPinInput+0x8c>)
 8001038:	f000 fcf0 	bl	8001a1c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin =  LCD_D5_Pin;
 800103c:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <LCD_SetDataPinInput+0x88>)
 800103e:	2280      	movs	r2, #128	; 0x80
 8001040:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001042:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <LCD_SetDataPinInput+0x88>)
 8001044:	2200      	movs	r2, #0
 8001046:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001048:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <LCD_SetDataPinInput+0x88>)
 800104a:	2201      	movs	r2, #1
 800104c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800104e:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <LCD_SetDataPinInput+0x88>)
 8001050:	2201      	movs	r2, #1
 8001052:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LCD_D5_GPIO_Port, &GPIO_InitStruct);
 8001054:	4912      	ldr	r1, [pc, #72]	; (80010a0 <LCD_SetDataPinInput+0x88>)
 8001056:	4814      	ldr	r0, [pc, #80]	; (80010a8 <LCD_SetDataPinInput+0x90>)
 8001058:	f000 fce0 	bl	8001a1c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin =  LCD_D6_Pin;
 800105c:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <LCD_SetDataPinInput+0x88>)
 800105e:	2201      	movs	r2, #1
 8001060:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001062:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <LCD_SetDataPinInput+0x88>)
 8001064:	2200      	movs	r2, #0
 8001066:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001068:	4b0d      	ldr	r3, [pc, #52]	; (80010a0 <LCD_SetDataPinInput+0x88>)
 800106a:	2201      	movs	r2, #1
 800106c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800106e:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <LCD_SetDataPinInput+0x88>)
 8001070:	2201      	movs	r2, #1
 8001072:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LCD_D6_GPIO_Port, &GPIO_InitStruct);
 8001074:	490a      	ldr	r1, [pc, #40]	; (80010a0 <LCD_SetDataPinInput+0x88>)
 8001076:	480d      	ldr	r0, [pc, #52]	; (80010ac <LCD_SetDataPinInput+0x94>)
 8001078:	f000 fcd0 	bl	8001a1c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin =  LCD_D7_Pin;
 800107c:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <LCD_SetDataPinInput+0x88>)
 800107e:	2240      	movs	r2, #64	; 0x40
 8001080:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001082:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <LCD_SetDataPinInput+0x88>)
 8001084:	2200      	movs	r2, #0
 8001086:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <LCD_SetDataPinInput+0x88>)
 800108a:	2201      	movs	r2, #1
 800108c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800108e:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <LCD_SetDataPinInput+0x88>)
 8001090:	2201      	movs	r2, #1
 8001092:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LCD_D7_GPIO_Port, &GPIO_InitStruct);
 8001094:	4902      	ldr	r1, [pc, #8]	; (80010a0 <LCD_SetDataPinInput+0x88>)
 8001096:	4806      	ldr	r0, [pc, #24]	; (80010b0 <LCD_SetDataPinInput+0x98>)
 8001098:	f000 fcc0 	bl	8001a1c <HAL_GPIO_Init>

}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000090 	.word	0x20000090
 80010a4:	40020400 	.word	0x40020400
 80010a8:	40021800 	.word	0x40021800
 80010ac:	40022000 	.word	0x40022000
 80010b0:	40021c00 	.word	0x40021c00

080010b4 <LCD_SetDataPinOutput>:
//-----------------------------------------------------------------------------
void LCD_SetDataPinOutput(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Pin = LCD_D4_Pin;
 80010b8:	4b20      	ldr	r3, [pc, #128]	; (800113c <LCD_SetDataPinOutput+0x88>)
 80010ba:	2210      	movs	r2, #16
 80010bc:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010be:	4b1f      	ldr	r3, [pc, #124]	; (800113c <LCD_SetDataPinOutput+0x88>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	4b1d      	ldr	r3, [pc, #116]	; (800113c <LCD_SetDataPinOutput+0x88>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80010ca:	4b1c      	ldr	r3, [pc, #112]	; (800113c <LCD_SetDataPinOutput+0x88>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LCD_D4_GPIO_Port, &GPIO_InitStruct);
 80010d0:	491a      	ldr	r1, [pc, #104]	; (800113c <LCD_SetDataPinOutput+0x88>)
 80010d2:	481b      	ldr	r0, [pc, #108]	; (8001140 <LCD_SetDataPinOutput+0x8c>)
 80010d4:	f000 fca2 	bl	8001a1c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_D5_Pin;
 80010d8:	4b18      	ldr	r3, [pc, #96]	; (800113c <LCD_SetDataPinOutput+0x88>)
 80010da:	2280      	movs	r2, #128	; 0x80
 80010dc:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010de:	4b17      	ldr	r3, [pc, #92]	; (800113c <LCD_SetDataPinOutput+0x88>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	4b15      	ldr	r3, [pc, #84]	; (800113c <LCD_SetDataPinOutput+0x88>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80010ea:	4b14      	ldr	r3, [pc, #80]	; (800113c <LCD_SetDataPinOutput+0x88>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LCD_D5_GPIO_Port, &GPIO_InitStruct);
 80010f0:	4912      	ldr	r1, [pc, #72]	; (800113c <LCD_SetDataPinOutput+0x88>)
 80010f2:	4814      	ldr	r0, [pc, #80]	; (8001144 <LCD_SetDataPinOutput+0x90>)
 80010f4:	f000 fc92 	bl	8001a1c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_D6_Pin;
 80010f8:	4b10      	ldr	r3, [pc, #64]	; (800113c <LCD_SetDataPinOutput+0x88>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fe:	4b0f      	ldr	r3, [pc, #60]	; (800113c <LCD_SetDataPinOutput+0x88>)
 8001100:	2201      	movs	r2, #1
 8001102:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	4b0d      	ldr	r3, [pc, #52]	; (800113c <LCD_SetDataPinOutput+0x88>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <LCD_SetDataPinOutput+0x88>)
 800110c:	2201      	movs	r2, #1
 800110e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LCD_D6_GPIO_Port, &GPIO_InitStruct);
 8001110:	490a      	ldr	r1, [pc, #40]	; (800113c <LCD_SetDataPinOutput+0x88>)
 8001112:	480d      	ldr	r0, [pc, #52]	; (8001148 <LCD_SetDataPinOutput+0x94>)
 8001114:	f000 fc82 	bl	8001a1c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_D7_Pin;
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <LCD_SetDataPinOutput+0x88>)
 800111a:	2240      	movs	r2, #64	; 0x40
 800111c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111e:	4b07      	ldr	r3, [pc, #28]	; (800113c <LCD_SetDataPinOutput+0x88>)
 8001120:	2201      	movs	r2, #1
 8001122:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <LCD_SetDataPinOutput+0x88>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800112a:	4b04      	ldr	r3, [pc, #16]	; (800113c <LCD_SetDataPinOutput+0x88>)
 800112c:	2201      	movs	r2, #1
 800112e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LCD_D7_GPIO_Port, &GPIO_InitStruct);
 8001130:	4902      	ldr	r1, [pc, #8]	; (800113c <LCD_SetDataPinOutput+0x88>)
 8001132:	4806      	ldr	r0, [pc, #24]	; (800114c <LCD_SetDataPinOutput+0x98>)
 8001134:	f000 fc72 	bl	8001a1c <HAL_GPIO_Init>

}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000090 	.word	0x20000090
 8001140:	40020400 	.word	0x40020400
 8001144:	40021800 	.word	0x40021800
 8001148:	40022000 	.word	0x40022000
 800114c:	40021c00 	.word	0x40021c00

08001150 <LCD_ReadStatus>:
//-----------------------------------------------------------------------------
unsigned char LCD_ReadStatus(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
  unsigned char status = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	71fb      	strb	r3, [r7, #7]

  LCD_SetDataPinInput();
 800115a:	f7ff ff5d 	bl	8001018 <LCD_SetDataPinInput>

  HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_SET);
 800115e:	2201      	movs	r2, #1
 8001160:	2140      	movs	r1, #64	; 0x40
 8001162:	4810      	ldr	r0, [pc, #64]	; (80011a4 <LCD_ReadStatus+0x54>)
 8001164:	f000 fe1e 	bl	8001da4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8001168:	2200      	movs	r2, #0
 800116a:	2180      	movs	r1, #128	; 0x80
 800116c:	480d      	ldr	r0, [pc, #52]	; (80011a4 <LCD_ReadStatus+0x54>)
 800116e:	f000 fe19 	bl	8001da4 <HAL_GPIO_WritePin>

  status |= (LCD_ReadNibble() << 4);
 8001172:	f7ff ff05 	bl	8000f80 <LCD_ReadNibble>
 8001176:	4603      	mov	r3, r0
 8001178:	011b      	lsls	r3, r3, #4
 800117a:	b25a      	sxtb	r2, r3
 800117c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001180:	4313      	orrs	r3, r2
 8001182:	b25b      	sxtb	r3, r3
 8001184:	71fb      	strb	r3, [r7, #7]
  status |= LCD_ReadNibble();
 8001186:	f7ff fefb 	bl	8000f80 <LCD_ReadNibble>
 800118a:	4603      	mov	r3, r0
 800118c:	461a      	mov	r2, r3
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	4313      	orrs	r3, r2
 8001192:	71fb      	strb	r3, [r7, #7]

  LCD_SetDataPinOutput();
 8001194:	f7ff ff8e 	bl	80010b4 <LCD_SetDataPinOutput>

  return status;
 8001198:	79fb      	ldrb	r3, [r7, #7]
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40020800 	.word	0x40020800

080011a8 <LCD_WriteData>:
//-----------------------------------------------------------------------------
void LCD_WriteData(char dataToWrite)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2140      	movs	r1, #64	; 0x40
 80011b6:	4810      	ldr	r0, [pc, #64]	; (80011f8 <LCD_WriteData+0x50>)
 80011b8:	f000 fdf4 	bl	8001da4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80011bc:	2201      	movs	r2, #1
 80011be:	2180      	movs	r1, #128	; 0x80
 80011c0:	480d      	ldr	r0, [pc, #52]	; (80011f8 <LCD_WriteData+0x50>)
 80011c2:	f000 fdef 	bl	8001da4 <HAL_GPIO_WritePin>

  LCD_WriteNibble(dataToWrite >> 4);
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	091b      	lsrs	r3, r3, #4
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fe97 	bl	8000f00 <LCD_WriteNibble>
  LCD_WriteNibble(dataToWrite & 0x0F);
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	f003 030f 	and.w	r3, r3, #15
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fe90 	bl	8000f00 <LCD_WriteNibble>

  while(LCD_ReadStatus() & 0x80);
 80011e0:	bf00      	nop
 80011e2:	f7ff ffb5 	bl	8001150 <LCD_ReadStatus>
 80011e6:	4603      	mov	r3, r0
 80011e8:	b25b      	sxtb	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	dbf9      	blt.n	80011e2 <LCD_WriteData+0x3a>
}
 80011ee:	bf00      	nop
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40020800 	.word	0x40020800

080011fc <LCD_WriteCommand>:
//-----------------------------------------------------------------------------
void LCD_WriteCommand(char commandToWrite)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 8001206:	2200      	movs	r2, #0
 8001208:	2140      	movs	r1, #64	; 0x40
 800120a:	4810      	ldr	r0, [pc, #64]	; (800124c <LCD_WriteCommand+0x50>)
 800120c:	f000 fdca 	bl	8001da4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8001210:	2200      	movs	r2, #0
 8001212:	2180      	movs	r1, #128	; 0x80
 8001214:	480d      	ldr	r0, [pc, #52]	; (800124c <LCD_WriteCommand+0x50>)
 8001216:	f000 fdc5 	bl	8001da4 <HAL_GPIO_WritePin>
  LCD_WriteNibble(commandToWrite >> 4);
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	091b      	lsrs	r3, r3, #4
 800121e:	b2db      	uxtb	r3, r3
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff fe6d 	bl	8000f00 <LCD_WriteNibble>
  LCD_WriteNibble(commandToWrite & 0x0F);
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	f003 030f 	and.w	r3, r3, #15
 800122c:	b2db      	uxtb	r3, r3
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fe66 	bl	8000f00 <LCD_WriteNibble>

  while(LCD_ReadStatus() & 0x80);
 8001234:	bf00      	nop
 8001236:	f7ff ff8b 	bl	8001150 <LCD_ReadStatus>
 800123a:	4603      	mov	r3, r0
 800123c:	b25b      	sxtb	r3, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	dbf9      	blt.n	8001236 <LCD_WriteCommand+0x3a>
}
 8001242:	bf00      	nop
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40020800 	.word	0x40020800

08001250 <LCD_GoTo>:
{
  while(*text)
    LCD_WriteData(*text++);
}
void LCD_GoTo(unsigned char x, unsigned char y)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	460a      	mov	r2, r1
 800125a:	71fb      	strb	r3, [r7, #7]
 800125c:	4613      	mov	r3, r2
 800125e:	71bb      	strb	r3, [r7, #6]
  LCD_WriteCommand(HD44780_DDRAM_SET | (x + (0x40 * y)));
 8001260:	79bb      	ldrb	r3, [r7, #6]
 8001262:	019b      	lsls	r3, r3, #6
 8001264:	b2da      	uxtb	r2, r3
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	4413      	add	r3, r2
 800126a:	b2db      	uxtb	r3, r3
 800126c:	b25b      	sxtb	r3, r3
 800126e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001272:	b25b      	sxtb	r3, r3
 8001274:	b2db      	uxtb	r3, r3
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ffc0 	bl	80011fc <LCD_WriteCommand>
}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <LCD_WriteTextXY>:
//-----------------------------------------------------------------------------
void LCD_WriteTextXY(char * text, unsigned char x, unsigned char y)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	70fb      	strb	r3, [r7, #3]
 8001290:	4613      	mov	r3, r2
 8001292:	70bb      	strb	r3, [r7, #2]
  LCD_GoTo(x,y);
 8001294:	78ba      	ldrb	r2, [r7, #2]
 8001296:	78fb      	ldrb	r3, [r7, #3]
 8001298:	4611      	mov	r1, r2
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff ffd8 	bl	8001250 <LCD_GoTo>
  while(*text)
 80012a0:	e006      	b.n	80012b0 <LCD_WriteTextXY+0x2c>
    LCD_WriteData(*text++);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	1c5a      	adds	r2, r3, #1
 80012a6:	607a      	str	r2, [r7, #4]
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff ff7c 	bl	80011a8 <LCD_WriteData>
  while(*text)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d1f4      	bne.n	80012a2 <LCD_WriteTextXY+0x1e>
}
 80012b8:	bf00      	nop
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <LCD_SetControlPinOutput>:
{
  LCD_WriteCommand(HD44780_DISPLAY_CURSOR_SHIFT | HD44780_SHIFT_RIGHT | HD44780_SHIFT_DISPLAY);
}
//-----------------------------------------------------------------------------
void LCD_SetControlPinOutput(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Pin = LCD_RS_Pin;
 80012c8:	4b20      	ldr	r3, [pc, #128]	; (800134c <LCD_SetControlPinOutput+0x88>)
 80012ca:	2280      	movs	r2, #128	; 0x80
 80012cc:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ce:	4b1f      	ldr	r3, [pc, #124]	; (800134c <LCD_SetControlPinOutput+0x88>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	4b1d      	ldr	r3, [pc, #116]	; (800134c <LCD_SetControlPinOutput+0x88>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80012da:	4b1c      	ldr	r3, [pc, #112]	; (800134c <LCD_SetControlPinOutput+0x88>)
 80012dc:	2201      	movs	r2, #1
 80012de:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 80012e0:	491a      	ldr	r1, [pc, #104]	; (800134c <LCD_SetControlPinOutput+0x88>)
 80012e2:	481b      	ldr	r0, [pc, #108]	; (8001350 <LCD_SetControlPinOutput+0x8c>)
 80012e4:	f000 fb9a 	bl	8001a1c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_RW_Pin;
 80012e8:	4b18      	ldr	r3, [pc, #96]	; (800134c <LCD_SetControlPinOutput+0x88>)
 80012ea:	2240      	movs	r2, #64	; 0x40
 80012ec:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ee:	4b17      	ldr	r3, [pc, #92]	; (800134c <LCD_SetControlPinOutput+0x88>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	4b15      	ldr	r3, [pc, #84]	; (800134c <LCD_SetControlPinOutput+0x88>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80012fa:	4b14      	ldr	r3, [pc, #80]	; (800134c <LCD_SetControlPinOutput+0x88>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LCD_RW_GPIO_Port, &GPIO_InitStruct);
 8001300:	4912      	ldr	r1, [pc, #72]	; (800134c <LCD_SetControlPinOutput+0x88>)
 8001302:	4813      	ldr	r0, [pc, #76]	; (8001350 <LCD_SetControlPinOutput+0x8c>)
 8001304:	f000 fb8a 	bl	8001a1c <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_E_Pin;
 8001308:	4b10      	ldr	r3, [pc, #64]	; (800134c <LCD_SetControlPinOutput+0x88>)
 800130a:	2240      	movs	r2, #64	; 0x40
 800130c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800130e:	4b0f      	ldr	r3, [pc, #60]	; (800134c <LCD_SetControlPinOutput+0x88>)
 8001310:	2201      	movs	r2, #1
 8001312:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	4b0d      	ldr	r3, [pc, #52]	; (800134c <LCD_SetControlPinOutput+0x88>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800131a:	4b0c      	ldr	r3, [pc, #48]	; (800134c <LCD_SetControlPinOutput+0x88>)
 800131c:	2201      	movs	r2, #1
 800131e:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LCD_E_GPIO_Port, &GPIO_InitStruct);
 8001320:	490a      	ldr	r1, [pc, #40]	; (800134c <LCD_SetControlPinOutput+0x88>)
 8001322:	480c      	ldr	r0, [pc, #48]	; (8001354 <LCD_SetControlPinOutput+0x90>)
 8001324:	f000 fb7a 	bl	8001a1c <HAL_GPIO_Init>

	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8001328:	2200      	movs	r2, #0
 800132a:	2180      	movs	r1, #128	; 0x80
 800132c:	4808      	ldr	r0, [pc, #32]	; (8001350 <LCD_SetControlPinOutput+0x8c>)
 800132e:	f000 fd39 	bl	8001da4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 8001332:	2200      	movs	r2, #0
 8001334:	2140      	movs	r1, #64	; 0x40
 8001336:	4806      	ldr	r0, [pc, #24]	; (8001350 <LCD_SetControlPinOutput+0x8c>)
 8001338:	f000 fd34 	bl	8001da4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 800133c:	2200      	movs	r2, #0
 800133e:	2140      	movs	r1, #64	; 0x40
 8001340:	4804      	ldr	r0, [pc, #16]	; (8001354 <LCD_SetControlPinOutput+0x90>)
 8001342:	f000 fd2f 	bl	8001da4 <HAL_GPIO_WritePin>

}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000090 	.word	0x20000090
 8001350:	40020800 	.word	0x40020800
 8001354:	40021800 	.word	0x40021800

08001358 <LCD_Initialize>:
//-----------------------------------------------------------------------------
void LCD_Initialize(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
  volatile unsigned char i = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	71fb      	strb	r3, [r7, #7]
  volatile unsigned int delayCnt = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	603b      	str	r3, [r7, #0]

  LCD_SetDataPinOutput();
 8001366:	f7ff fea5 	bl	80010b4 <LCD_SetDataPinOutput>
  LCD_SetControlPinOutput();
 800136a:	f7ff ffab 	bl	80012c4 <LCD_SetControlPinOutput>

  for(delayCnt = 0; delayCnt < 300000; delayCnt++);
 800136e:	2300      	movs	r3, #0
 8001370:	603b      	str	r3, [r7, #0]
 8001372:	e002      	b.n	800137a <LCD_Initialize+0x22>
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	3301      	adds	r3, #1
 8001378:	603b      	str	r3, [r7, #0]
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	4a1e      	ldr	r2, [pc, #120]	; (80013f8 <LCD_Initialize+0xa0>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d9f8      	bls.n	8001374 <LCD_Initialize+0x1c>

  for(i = 0; i < 3; i++) {
 8001382:	2300      	movs	r3, #0
 8001384:	71fb      	strb	r3, [r7, #7]
 8001386:	e012      	b.n	80013ae <LCD_Initialize+0x56>
    LCD_WriteNibble(0x03);
 8001388:	2003      	movs	r0, #3
 800138a:	f7ff fdb9 	bl	8000f00 <LCD_WriteNibble>
    for(delayCnt = 0; delayCnt < 30000; delayCnt++);
 800138e:	2300      	movs	r3, #0
 8001390:	603b      	str	r3, [r7, #0]
 8001392:	e002      	b.n	800139a <LCD_Initialize+0x42>
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	3301      	adds	r3, #1
 8001398:	603b      	str	r3, [r7, #0]
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	f247 522f 	movw	r2, #29999	; 0x752f
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d9f7      	bls.n	8001394 <LCD_Initialize+0x3c>
  for(i = 0; i < 3; i++) {
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	3301      	adds	r3, #1
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	71fb      	strb	r3, [r7, #7]
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d9e8      	bls.n	8001388 <LCD_Initialize+0x30>
  }

  LCD_WriteNibble(0x02);
 80013b6:	2002      	movs	r0, #2
 80013b8:	f7ff fda2 	bl	8000f00 <LCD_WriteNibble>

  for(delayCnt = 0; delayCnt < 6000; delayCnt++);
 80013bc:	2300      	movs	r3, #0
 80013be:	603b      	str	r3, [r7, #0]
 80013c0:	e002      	b.n	80013c8 <LCD_Initialize+0x70>
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	3301      	adds	r3, #1
 80013c6:	603b      	str	r3, [r7, #0]
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	f241 726f 	movw	r2, #5999	; 0x176f
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d9f7      	bls.n	80013c2 <LCD_Initialize+0x6a>

  LCD_WriteCommand(HD44780_FUNCTION_SET |
 80013d2:	2028      	movs	r0, #40	; 0x28
 80013d4:	f7ff ff12 	bl	80011fc <LCD_WriteCommand>
                   HD44780_FONT5x7 |
                   HD44780_TWO_LINE |
                   HD44780_4_BIT);

  LCD_WriteCommand(HD44780_DISPLAY_ONOFF |
 80013d8:	2008      	movs	r0, #8
 80013da:	f7ff ff0f 	bl	80011fc <LCD_WriteCommand>
                   HD44780_DISPLAY_OFF);

  LCD_WriteCommand(HD44780_CLEAR);
 80013de:	2001      	movs	r0, #1
 80013e0:	f7ff ff0c 	bl	80011fc <LCD_WriteCommand>

  LCD_WriteCommand(HD44780_ENTRY_MODE |
 80013e4:	2006      	movs	r0, #6
 80013e6:	f7ff ff09 	bl	80011fc <LCD_WriteCommand>
                   HD44780_EM_SHIFT_CURSOR |
                   HD44780_EM_INCREMENT);

  LCD_WriteCommand(HD44780_DISPLAY_ONOFF |
 80013ea:	200c      	movs	r0, #12
 80013ec:	f7ff ff06 	bl	80011fc <LCD_WriteCommand>
                   HD44780_DISPLAY_ON |
                   HD44780_CURSOR_OFF |
                   HD44780_CURSOR_NOBLINK);
}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	000493df 	.word	0x000493df

080013fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001400:	f000 f9a5 	bl	800174e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001404:	f000 f876 	bl	80014f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001408:	f7ff f8d4 	bl	80005b4 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LCD_Initialize();                         //inicjalizacja wysietlacza
 800140c:	f7ff ffa4 	bl	8001358 <LCD_Initialize>
  {
	  /* USER CODE END WHILE */

	  /* USER CODE BEGIN 3 */

	  LCD_WriteCommand(HD44780_CLEAR);          //wyczyszczenie wyświetlacza
 8001410:	2001      	movs	r0, #1
 8001412:	f7ff fef3 	bl	80011fc <LCD_WriteCommand>
	  LCD_WriteTextXY("Odliczanie:",0,0);
 8001416:	2200      	movs	r2, #0
 8001418:	2100      	movs	r1, #0
 800141a:	4830      	ldr	r0, [pc, #192]	; (80014dc <main+0xe0>)
 800141c:	f7ff ff32 	bl	8001284 <LCD_WriteTextXY>

	  sprintf(licznikTekst, "%i", licznik);
 8001420:	4b2f      	ldr	r3, [pc, #188]	; (80014e0 <main+0xe4>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	b2db      	uxtb	r3, r3
 8001426:	461a      	mov	r2, r3
 8001428:	492e      	ldr	r1, [pc, #184]	; (80014e4 <main+0xe8>)
 800142a:	482f      	ldr	r0, [pc, #188]	; (80014e8 <main+0xec>)
 800142c:	f001 f95c 	bl	80026e8 <siprintf>
	  LCD_WriteTextXY(licznikTekst, 0, 1);
 8001430:	2201      	movs	r2, #1
 8001432:	2100      	movs	r1, #0
 8001434:	482c      	ldr	r0, [pc, #176]	; (80014e8 <main+0xec>)
 8001436:	f7ff ff25 	bl	8001284 <LCD_WriteTextXY>

	  if (licznik >= 15)
 800143a:	4b29      	ldr	r3, [pc, #164]	; (80014e0 <main+0xe4>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b0e      	cmp	r3, #14
 8001442:	d90e      	bls.n	8001462 <main+0x66>
		  kierunekWGore = !kierunekWGore;
 8001444:	4b29      	ldr	r3, [pc, #164]	; (80014ec <main+0xf0>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	bf14      	ite	ne
 800144c:	2301      	movne	r3, #1
 800144e:	2300      	moveq	r3, #0
 8001450:	b2db      	uxtb	r3, r3
 8001452:	f083 0301 	eor.w	r3, r3, #1
 8001456:	b2db      	uxtb	r3, r3
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	b2da      	uxtb	r2, r3
 800145e:	4b23      	ldr	r3, [pc, #140]	; (80014ec <main+0xf0>)
 8001460:	701a      	strb	r2, [r3, #0]
	  if (licznik ==0 && kierunekWGore != true )
 8001462:	4b1f      	ldr	r3, [pc, #124]	; (80014e0 <main+0xe4>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	b2db      	uxtb	r3, r3
 8001468:	2b00      	cmp	r3, #0
 800146a:	d115      	bne.n	8001498 <main+0x9c>
 800146c:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <main+0xf0>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	f083 0301 	eor.w	r3, r3, #1
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d00e      	beq.n	8001498 <main+0x9c>
	  		  kierunekWGore = !kierunekWGore;
 800147a:	4b1c      	ldr	r3, [pc, #112]	; (80014ec <main+0xf0>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	bf14      	ite	ne
 8001482:	2301      	movne	r3, #1
 8001484:	2300      	moveq	r3, #0
 8001486:	b2db      	uxtb	r3, r3
 8001488:	f083 0301 	eor.w	r3, r3, #1
 800148c:	b2db      	uxtb	r3, r3
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	b2da      	uxtb	r2, r3
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <main+0xf0>)
 8001496:	701a      	strb	r2, [r3, #0]

	  if(kierunekWGore)
 8001498:	4b14      	ldr	r3, [pc, #80]	; (80014ec <main+0xf0>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d00c      	beq.n	80014ba <main+0xbe>
	  {
		  licznik++;
 80014a0:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <main+0xe4>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	3301      	adds	r3, #1
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <main+0xe4>)
 80014ac:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 80014ae:	2201      	movs	r2, #1
 80014b0:	2108      	movs	r1, #8
 80014b2:	480f      	ldr	r0, [pc, #60]	; (80014f0 <main+0xf4>)
 80014b4:	f000 fc76 	bl	8001da4 <HAL_GPIO_WritePin>
 80014b8:	e00b      	b.n	80014d2 <main+0xd6>
	  }
	  else
	  {
		  licznik--;
 80014ba:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <main+0xe4>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	3b01      	subs	r3, #1
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <main+0xe4>)
 80014c6:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2108      	movs	r1, #8
 80014cc:	4808      	ldr	r0, [pc, #32]	; (80014f0 <main+0xf4>)
 80014ce:	f000 fc69 	bl	8001da4 <HAL_GPIO_WritePin>
	  }

	  HAL_Delay(1000);
 80014d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014d6:	f000 f997 	bl	8001808 <HAL_Delay>
	  LCD_WriteCommand(HD44780_CLEAR);          //wyczyszczenie wyświetlacza
 80014da:	e799      	b.n	8001410 <main+0x14>
 80014dc:	08002fdc 	.word	0x08002fdc
 80014e0:	200000a4 	.word	0x200000a4
 80014e4:	08002fe8 	.word	0x08002fe8
 80014e8:	20000000 	.word	0x20000000
 80014ec:	20000003 	.word	0x20000003
 80014f0:	40022000 	.word	0x40022000

080014f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b094      	sub	sp, #80	; 0x50
 80014f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014fa:	f107 0320 	add.w	r3, r7, #32
 80014fe:	2230      	movs	r2, #48	; 0x30
 8001500:	2100      	movs	r1, #0
 8001502:	4618      	mov	r0, r3
 8001504:	f001 f8e8 	bl	80026d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001508:	f107 030c 	add.w	r3, r7, #12
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001518:	4b28      	ldr	r3, [pc, #160]	; (80015bc <SystemClock_Config+0xc8>)
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	4a27      	ldr	r2, [pc, #156]	; (80015bc <SystemClock_Config+0xc8>)
 800151e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001522:	6413      	str	r3, [r2, #64]	; 0x40
 8001524:	4b25      	ldr	r3, [pc, #148]	; (80015bc <SystemClock_Config+0xc8>)
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001530:	4b23      	ldr	r3, [pc, #140]	; (80015c0 <SystemClock_Config+0xcc>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001538:	4a21      	ldr	r2, [pc, #132]	; (80015c0 <SystemClock_Config+0xcc>)
 800153a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800153e:	6013      	str	r3, [r2, #0]
 8001540:	4b1f      	ldr	r3, [pc, #124]	; (80015c0 <SystemClock_Config+0xcc>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800154c:	2302      	movs	r3, #2
 800154e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001550:	2301      	movs	r3, #1
 8001552:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001554:	2310      	movs	r3, #16
 8001556:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001558:	2302      	movs	r3, #2
 800155a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800155c:	2300      	movs	r3, #0
 800155e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 8001560:	230a      	movs	r3, #10
 8001562:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 8001564:	23d2      	movs	r3, #210	; 0xd2
 8001566:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001568:	2302      	movs	r3, #2
 800156a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800156c:	2302      	movs	r3, #2
 800156e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001570:	f107 0320 	add.w	r3, r7, #32
 8001574:	4618      	mov	r0, r3
 8001576:	f000 fc2f 	bl	8001dd8 <HAL_RCC_OscConfig>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001580:	f000 f820 	bl	80015c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001584:	230f      	movs	r3, #15
 8001586:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001588:	2302      	movs	r3, #2
 800158a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001590:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001594:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001596:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800159a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800159c:	f107 030c 	add.w	r3, r7, #12
 80015a0:	2105      	movs	r1, #5
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 febc 	bl	8002320 <HAL_RCC_ClockConfig>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80015ae:	f000 f809 	bl	80015c4 <Error_Handler>
  }
}
 80015b2:	bf00      	nop
 80015b4:	3750      	adds	r7, #80	; 0x50
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40007000 	.word	0x40007000

080015c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c8:	b672      	cpsid	i
}
 80015ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015cc:	e7fe      	b.n	80015cc <Error_Handler+0x8>
	...

080015d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80015d6:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <HAL_MspInit+0x44>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	4a0e      	ldr	r2, [pc, #56]	; (8001614 <HAL_MspInit+0x44>)
 80015dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e0:	6413      	str	r3, [r2, #64]	; 0x40
 80015e2:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <HAL_MspInit+0x44>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ee:	4b09      	ldr	r3, [pc, #36]	; (8001614 <HAL_MspInit+0x44>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f2:	4a08      	ldr	r2, [pc, #32]	; (8001614 <HAL_MspInit+0x44>)
 80015f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f8:	6453      	str	r3, [r2, #68]	; 0x44
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <HAL_MspInit+0x44>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001602:	603b      	str	r3, [r7, #0]
 8001604:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	40023800 	.word	0x40023800

08001618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800161c:	e7fe      	b.n	800161c <NMI_Handler+0x4>

0800161e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001622:	e7fe      	b.n	8001622 <HardFault_Handler+0x4>

08001624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001628:	e7fe      	b.n	8001628 <MemManage_Handler+0x4>

0800162a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800162e:	e7fe      	b.n	800162e <BusFault_Handler+0x4>

08001630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001634:	e7fe      	b.n	8001634 <UsageFault_Handler+0x4>

08001636 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001664:	f000 f8b0 	bl	80017c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}

0800166c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001674:	4a14      	ldr	r2, [pc, #80]	; (80016c8 <_sbrk+0x5c>)
 8001676:	4b15      	ldr	r3, [pc, #84]	; (80016cc <_sbrk+0x60>)
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001680:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <_sbrk+0x64>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d102      	bne.n	800168e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001688:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <_sbrk+0x64>)
 800168a:	4a12      	ldr	r2, [pc, #72]	; (80016d4 <_sbrk+0x68>)
 800168c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <_sbrk+0x64>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	429a      	cmp	r2, r3
 800169a:	d207      	bcs.n	80016ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800169c:	f000 fff2 	bl	8002684 <__errno>
 80016a0:	4603      	mov	r3, r0
 80016a2:	220c      	movs	r2, #12
 80016a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016a6:	f04f 33ff 	mov.w	r3, #4294967295
 80016aa:	e009      	b.n	80016c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <_sbrk+0x64>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016b2:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <_sbrk+0x64>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4413      	add	r3, r2
 80016ba:	4a05      	ldr	r2, [pc, #20]	; (80016d0 <_sbrk+0x64>)
 80016bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016be:	68fb      	ldr	r3, [r7, #12]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20050000 	.word	0x20050000
 80016cc:	00000400 	.word	0x00000400
 80016d0:	200000a8 	.word	0x200000a8
 80016d4:	200000c0 	.word	0x200000c0

080016d8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <SystemInit+0x20>)
 80016de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016e2:	4a05      	ldr	r2, [pc, #20]	; (80016f8 <SystemInit+0x20>)
 80016e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001734 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001700:	480d      	ldr	r0, [pc, #52]	; (8001738 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001702:	490e      	ldr	r1, [pc, #56]	; (800173c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001704:	4a0e      	ldr	r2, [pc, #56]	; (8001740 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001708:	e002      	b.n	8001710 <LoopCopyDataInit>

0800170a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800170a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800170c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800170e:	3304      	adds	r3, #4

08001710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001714:	d3f9      	bcc.n	800170a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001716:	4a0b      	ldr	r2, [pc, #44]	; (8001744 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001718:	4c0b      	ldr	r4, [pc, #44]	; (8001748 <LoopFillZerobss+0x26>)
  movs r3, #0
 800171a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800171c:	e001      	b.n	8001722 <LoopFillZerobss>

0800171e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800171e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001720:	3204      	adds	r2, #4

08001722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001724:	d3fb      	bcc.n	800171e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001726:	f7ff ffd7 	bl	80016d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800172a:	f000 ffb1 	bl	8002690 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800172e:	f7ff fe65 	bl	80013fc <main>
  bx  lr    
 8001732:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001734:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800173c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001740:	08003040 	.word	0x08003040
  ldr r2, =_sbss
 8001744:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001748:	200000c0 	.word	0x200000c0

0800174c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800174c:	e7fe      	b.n	800174c <ADC_IRQHandler>

0800174e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001752:	2003      	movs	r0, #3
 8001754:	f000 f92e 	bl	80019b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001758:	2000      	movs	r0, #0
 800175a:	f000 f805 	bl	8001768 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800175e:	f7ff ff37 	bl	80015d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	bd80      	pop	{r7, pc}

08001768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001770:	4b12      	ldr	r3, [pc, #72]	; (80017bc <HAL_InitTick+0x54>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <HAL_InitTick+0x58>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	4619      	mov	r1, r3
 800177a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800177e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001782:	fbb2 f3f3 	udiv	r3, r2, r3
 8001786:	4618      	mov	r0, r3
 8001788:	f000 f93b 	bl	8001a02 <HAL_SYSTICK_Config>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e00e      	b.n	80017b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b0f      	cmp	r3, #15
 800179a:	d80a      	bhi.n	80017b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800179c:	2200      	movs	r2, #0
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	f04f 30ff 	mov.w	r0, #4294967295
 80017a4:	f000 f911 	bl	80019ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017a8:	4a06      	ldr	r2, [pc, #24]	; (80017c4 <HAL_InitTick+0x5c>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	e000      	b.n	80017b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000004 	.word	0x20000004
 80017c0:	2000000c 	.word	0x2000000c
 80017c4:	20000008 	.word	0x20000008

080017c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <HAL_IncTick+0x20>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	461a      	mov	r2, r3
 80017d2:	4b06      	ldr	r3, [pc, #24]	; (80017ec <HAL_IncTick+0x24>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4413      	add	r3, r2
 80017d8:	4a04      	ldr	r2, [pc, #16]	; (80017ec <HAL_IncTick+0x24>)
 80017da:	6013      	str	r3, [r2, #0]
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	2000000c 	.word	0x2000000c
 80017ec:	200000ac 	.word	0x200000ac

080017f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return uwTick;
 80017f4:	4b03      	ldr	r3, [pc, #12]	; (8001804 <HAL_GetTick+0x14>)
 80017f6:	681b      	ldr	r3, [r3, #0]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	200000ac 	.word	0x200000ac

08001808 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001810:	f7ff ffee 	bl	80017f0 <HAL_GetTick>
 8001814:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001820:	d005      	beq.n	800182e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001822:	4b0a      	ldr	r3, [pc, #40]	; (800184c <HAL_Delay+0x44>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	461a      	mov	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4413      	add	r3, r2
 800182c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800182e:	bf00      	nop
 8001830:	f7ff ffde 	bl	80017f0 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	429a      	cmp	r2, r3
 800183e:	d8f7      	bhi.n	8001830 <HAL_Delay+0x28>
  {
  }
}
 8001840:	bf00      	nop
 8001842:	bf00      	nop
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	2000000c 	.word	0x2000000c

08001850 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001860:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <__NVIC_SetPriorityGrouping+0x40>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800186c:	4013      	ands	r3, r2
 800186e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <__NVIC_SetPriorityGrouping+0x44>)
 800187a:	4313      	orrs	r3, r2
 800187c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800187e:	4a04      	ldr	r2, [pc, #16]	; (8001890 <__NVIC_SetPriorityGrouping+0x40>)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	60d3      	str	r3, [r2, #12]
}
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000ed00 	.word	0xe000ed00
 8001894:	05fa0000 	.word	0x05fa0000

08001898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800189c:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <__NVIC_GetPriorityGrouping+0x18>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	0a1b      	lsrs	r3, r3, #8
 80018a2:	f003 0307 	and.w	r3, r3, #7
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	6039      	str	r1, [r7, #0]
 80018be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	db0a      	blt.n	80018de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	490c      	ldr	r1, [pc, #48]	; (8001900 <__NVIC_SetPriority+0x4c>)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	0112      	lsls	r2, r2, #4
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	440b      	add	r3, r1
 80018d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018dc:	e00a      	b.n	80018f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	4908      	ldr	r1, [pc, #32]	; (8001904 <__NVIC_SetPriority+0x50>)
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	f003 030f 	and.w	r3, r3, #15
 80018ea:	3b04      	subs	r3, #4
 80018ec:	0112      	lsls	r2, r2, #4
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	440b      	add	r3, r1
 80018f2:	761a      	strb	r2, [r3, #24]
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	e000e100 	.word	0xe000e100
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001908:	b480      	push	{r7}
 800190a:	b089      	sub	sp, #36	; 0x24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f1c3 0307 	rsb	r3, r3, #7
 8001922:	2b04      	cmp	r3, #4
 8001924:	bf28      	it	cs
 8001926:	2304      	movcs	r3, #4
 8001928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3304      	adds	r3, #4
 800192e:	2b06      	cmp	r3, #6
 8001930:	d902      	bls.n	8001938 <NVIC_EncodePriority+0x30>
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3b03      	subs	r3, #3
 8001936:	e000      	b.n	800193a <NVIC_EncodePriority+0x32>
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800193c:	f04f 32ff 	mov.w	r2, #4294967295
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43da      	mvns	r2, r3
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	401a      	ands	r2, r3
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001950:	f04f 31ff 	mov.w	r1, #4294967295
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	fa01 f303 	lsl.w	r3, r1, r3
 800195a:	43d9      	mvns	r1, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	4313      	orrs	r3, r2
         );
}
 8001962:	4618      	mov	r0, r3
 8001964:	3724      	adds	r7, #36	; 0x24
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3b01      	subs	r3, #1
 800197c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001980:	d301      	bcc.n	8001986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001982:	2301      	movs	r3, #1
 8001984:	e00f      	b.n	80019a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001986:	4a0a      	ldr	r2, [pc, #40]	; (80019b0 <SysTick_Config+0x40>)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3b01      	subs	r3, #1
 800198c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800198e:	210f      	movs	r1, #15
 8001990:	f04f 30ff 	mov.w	r0, #4294967295
 8001994:	f7ff ff8e 	bl	80018b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001998:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <SysTick_Config+0x40>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800199e:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <SysTick_Config+0x40>)
 80019a0:	2207      	movs	r2, #7
 80019a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	e000e010 	.word	0xe000e010

080019b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff ff47 	bl	8001850 <__NVIC_SetPriorityGrouping>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b086      	sub	sp, #24
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	4603      	mov	r3, r0
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
 80019d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019dc:	f7ff ff5c 	bl	8001898 <__NVIC_GetPriorityGrouping>
 80019e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	6978      	ldr	r0, [r7, #20]
 80019e8:	f7ff ff8e 	bl	8001908 <NVIC_EncodePriority>
 80019ec:	4602      	mov	r2, r0
 80019ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f2:	4611      	mov	r1, r2
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff ff5d 	bl	80018b4 <__NVIC_SetPriority>
}
 80019fa:	bf00      	nop
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff ffb0 	bl	8001970 <SysTick_Config>
 8001a10:	4603      	mov	r3, r0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b089      	sub	sp, #36	; 0x24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a32:	2300      	movs	r3, #0
 8001a34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a36:	2300      	movs	r3, #0
 8001a38:	61fb      	str	r3, [r7, #28]
 8001a3a:	e175      	b.n	8001d28 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	f040 8164 	bne.w	8001d22 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d005      	beq.n	8001a72 <HAL_GPIO_Init+0x56>
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f003 0303 	and.w	r3, r3, #3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d130      	bne.n	8001ad4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43db      	mvns	r3, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4013      	ands	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	68da      	ldr	r2, [r3, #12]
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	091b      	lsrs	r3, r3, #4
 8001abe:	f003 0201 	and.w	r2, r3, #1
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f003 0303 	and.w	r3, r3, #3
 8001adc:	2b03      	cmp	r3, #3
 8001ade:	d017      	beq.n	8001b10 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	2203      	movs	r2, #3
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 0303 	and.w	r3, r3, #3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d123      	bne.n	8001b64 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	08da      	lsrs	r2, r3, #3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3208      	adds	r2, #8
 8001b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	220f      	movs	r2, #15
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	691a      	ldr	r2, [r3, #16]
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	08da      	lsrs	r2, r3, #3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	3208      	adds	r2, #8
 8001b5e:	69b9      	ldr	r1, [r7, #24]
 8001b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	2203      	movs	r2, #3
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 0203 	and.w	r2, r3, #3
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f000 80be 	beq.w	8001d22 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba6:	4b66      	ldr	r3, [pc, #408]	; (8001d40 <HAL_GPIO_Init+0x324>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	4a65      	ldr	r2, [pc, #404]	; (8001d40 <HAL_GPIO_Init+0x324>)
 8001bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bb2:	4b63      	ldr	r3, [pc, #396]	; (8001d40 <HAL_GPIO_Init+0x324>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001bbe:	4a61      	ldr	r2, [pc, #388]	; (8001d44 <HAL_GPIO_Init+0x328>)
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	089b      	lsrs	r3, r3, #2
 8001bc4:	3302      	adds	r3, #2
 8001bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	220f      	movs	r2, #15
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4013      	ands	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a58      	ldr	r2, [pc, #352]	; (8001d48 <HAL_GPIO_Init+0x32c>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d037      	beq.n	8001c5a <HAL_GPIO_Init+0x23e>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a57      	ldr	r2, [pc, #348]	; (8001d4c <HAL_GPIO_Init+0x330>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d031      	beq.n	8001c56 <HAL_GPIO_Init+0x23a>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a56      	ldr	r2, [pc, #344]	; (8001d50 <HAL_GPIO_Init+0x334>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d02b      	beq.n	8001c52 <HAL_GPIO_Init+0x236>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a55      	ldr	r2, [pc, #340]	; (8001d54 <HAL_GPIO_Init+0x338>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d025      	beq.n	8001c4e <HAL_GPIO_Init+0x232>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a54      	ldr	r2, [pc, #336]	; (8001d58 <HAL_GPIO_Init+0x33c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d01f      	beq.n	8001c4a <HAL_GPIO_Init+0x22e>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a53      	ldr	r2, [pc, #332]	; (8001d5c <HAL_GPIO_Init+0x340>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d019      	beq.n	8001c46 <HAL_GPIO_Init+0x22a>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a52      	ldr	r2, [pc, #328]	; (8001d60 <HAL_GPIO_Init+0x344>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d013      	beq.n	8001c42 <HAL_GPIO_Init+0x226>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a51      	ldr	r2, [pc, #324]	; (8001d64 <HAL_GPIO_Init+0x348>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d00d      	beq.n	8001c3e <HAL_GPIO_Init+0x222>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a50      	ldr	r2, [pc, #320]	; (8001d68 <HAL_GPIO_Init+0x34c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d007      	beq.n	8001c3a <HAL_GPIO_Init+0x21e>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a4f      	ldr	r2, [pc, #316]	; (8001d6c <HAL_GPIO_Init+0x350>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d101      	bne.n	8001c36 <HAL_GPIO_Init+0x21a>
 8001c32:	2309      	movs	r3, #9
 8001c34:	e012      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c36:	230a      	movs	r3, #10
 8001c38:	e010      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c3a:	2308      	movs	r3, #8
 8001c3c:	e00e      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c3e:	2307      	movs	r3, #7
 8001c40:	e00c      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c42:	2306      	movs	r3, #6
 8001c44:	e00a      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c46:	2305      	movs	r3, #5
 8001c48:	e008      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c4a:	2304      	movs	r3, #4
 8001c4c:	e006      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e004      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c52:	2302      	movs	r3, #2
 8001c54:	e002      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <HAL_GPIO_Init+0x240>
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	69fa      	ldr	r2, [r7, #28]
 8001c5e:	f002 0203 	and.w	r2, r2, #3
 8001c62:	0092      	lsls	r2, r2, #2
 8001c64:	4093      	lsls	r3, r2
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c6c:	4935      	ldr	r1, [pc, #212]	; (8001d44 <HAL_GPIO_Init+0x328>)
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	089b      	lsrs	r3, r3, #2
 8001c72:	3302      	adds	r3, #2
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c7a:	4b3d      	ldr	r3, [pc, #244]	; (8001d70 <HAL_GPIO_Init+0x354>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	43db      	mvns	r3, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4013      	ands	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c9e:	4a34      	ldr	r2, [pc, #208]	; (8001d70 <HAL_GPIO_Init+0x354>)
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ca4:	4b32      	ldr	r3, [pc, #200]	; (8001d70 <HAL_GPIO_Init+0x354>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cc8:	4a29      	ldr	r2, [pc, #164]	; (8001d70 <HAL_GPIO_Init+0x354>)
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cce:	4b28      	ldr	r3, [pc, #160]	; (8001d70 <HAL_GPIO_Init+0x354>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cf2:	4a1f      	ldr	r2, [pc, #124]	; (8001d70 <HAL_GPIO_Init+0x354>)
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cf8:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <HAL_GPIO_Init+0x354>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	43db      	mvns	r3, r3
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	4013      	ands	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d1c:	4a14      	ldr	r2, [pc, #80]	; (8001d70 <HAL_GPIO_Init+0x354>)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3301      	adds	r3, #1
 8001d26:	61fb      	str	r3, [r7, #28]
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	2b0f      	cmp	r3, #15
 8001d2c:	f67f ae86 	bls.w	8001a3c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d30:	bf00      	nop
 8001d32:	bf00      	nop
 8001d34:	3724      	adds	r7, #36	; 0x24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40013800 	.word	0x40013800
 8001d48:	40020000 	.word	0x40020000
 8001d4c:	40020400 	.word	0x40020400
 8001d50:	40020800 	.word	0x40020800
 8001d54:	40020c00 	.word	0x40020c00
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40021400 	.word	0x40021400
 8001d60:	40021800 	.word	0x40021800
 8001d64:	40021c00 	.word	0x40021c00
 8001d68:	40022000 	.word	0x40022000
 8001d6c:	40022400 	.word	0x40022400
 8001d70:	40013c00 	.word	0x40013c00

08001d74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	691a      	ldr	r2, [r3, #16]
 8001d84:	887b      	ldrh	r3, [r7, #2]
 8001d86:	4013      	ands	r3, r2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d002      	beq.n	8001d92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	73fb      	strb	r3, [r7, #15]
 8001d90:	e001      	b.n	8001d96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d92:	2300      	movs	r3, #0
 8001d94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	460b      	mov	r3, r1
 8001dae:	807b      	strh	r3, [r7, #2]
 8001db0:	4613      	mov	r3, r2
 8001db2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001db4:	787b      	ldrb	r3, [r7, #1]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dba:	887a      	ldrh	r2, [r7, #2]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001dc0:	e003      	b.n	8001dca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001dc2:	887b      	ldrh	r3, [r7, #2]
 8001dc4:	041a      	lsls	r2, r3, #16
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	619a      	str	r2, [r3, #24]
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
	...

08001dd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001de0:	2300      	movs	r3, #0
 8001de2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e291      	b.n	8002312 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 8087 	beq.w	8001f0a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dfc:	4b96      	ldr	r3, [pc, #600]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f003 030c 	and.w	r3, r3, #12
 8001e04:	2b04      	cmp	r3, #4
 8001e06:	d00c      	beq.n	8001e22 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e08:	4b93      	ldr	r3, [pc, #588]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f003 030c 	and.w	r3, r3, #12
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d112      	bne.n	8001e3a <HAL_RCC_OscConfig+0x62>
 8001e14:	4b90      	ldr	r3, [pc, #576]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e20:	d10b      	bne.n	8001e3a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e22:	4b8d      	ldr	r3, [pc, #564]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d06c      	beq.n	8001f08 <HAL_RCC_OscConfig+0x130>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d168      	bne.n	8001f08 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e26b      	b.n	8002312 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e42:	d106      	bne.n	8001e52 <HAL_RCC_OscConfig+0x7a>
 8001e44:	4b84      	ldr	r3, [pc, #528]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a83      	ldr	r2, [pc, #524]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	e02e      	b.n	8001eb0 <HAL_RCC_OscConfig+0xd8>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10c      	bne.n	8001e74 <HAL_RCC_OscConfig+0x9c>
 8001e5a:	4b7f      	ldr	r3, [pc, #508]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a7e      	ldr	r2, [pc, #504]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	4b7c      	ldr	r3, [pc, #496]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a7b      	ldr	r2, [pc, #492]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e70:	6013      	str	r3, [r2, #0]
 8001e72:	e01d      	b.n	8001eb0 <HAL_RCC_OscConfig+0xd8>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e7c:	d10c      	bne.n	8001e98 <HAL_RCC_OscConfig+0xc0>
 8001e7e:	4b76      	ldr	r3, [pc, #472]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a75      	ldr	r2, [pc, #468]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	4b73      	ldr	r3, [pc, #460]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a72      	ldr	r2, [pc, #456]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	e00b      	b.n	8001eb0 <HAL_RCC_OscConfig+0xd8>
 8001e98:	4b6f      	ldr	r3, [pc, #444]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a6e      	ldr	r2, [pc, #440]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ea2:	6013      	str	r3, [r2, #0]
 8001ea4:	4b6c      	ldr	r3, [pc, #432]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a6b      	ldr	r2, [pc, #428]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d013      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb8:	f7ff fc9a 	bl	80017f0 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec0:	f7ff fc96 	bl	80017f0 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b64      	cmp	r3, #100	; 0x64
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e21f      	b.n	8002312 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed2:	4b61      	ldr	r3, [pc, #388]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d0f0      	beq.n	8001ec0 <HAL_RCC_OscConfig+0xe8>
 8001ede:	e014      	b.n	8001f0a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee0:	f7ff fc86 	bl	80017f0 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee8:	f7ff fc82 	bl	80017f0 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b64      	cmp	r3, #100	; 0x64
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e20b      	b.n	8002312 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001efa:	4b57      	ldr	r3, [pc, #348]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f0      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x110>
 8001f06:	e000      	b.n	8001f0a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d069      	beq.n	8001fea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f16:	4b50      	ldr	r3, [pc, #320]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 030c 	and.w	r3, r3, #12
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00b      	beq.n	8001f3a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f22:	4b4d      	ldr	r3, [pc, #308]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 030c 	and.w	r3, r3, #12
 8001f2a:	2b08      	cmp	r3, #8
 8001f2c:	d11c      	bne.n	8001f68 <HAL_RCC_OscConfig+0x190>
 8001f2e:	4b4a      	ldr	r3, [pc, #296]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d116      	bne.n	8001f68 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f3a:	4b47      	ldr	r3, [pc, #284]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d005      	beq.n	8001f52 <HAL_RCC_OscConfig+0x17a>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d001      	beq.n	8001f52 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e1df      	b.n	8002312 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f52:	4b41      	ldr	r3, [pc, #260]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	493d      	ldr	r1, [pc, #244]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f66:	e040      	b.n	8001fea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d023      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f70:	4b39      	ldr	r3, [pc, #228]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a38      	ldr	r2, [pc, #224]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001f76:	f043 0301 	orr.w	r3, r3, #1
 8001f7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7c:	f7ff fc38 	bl	80017f0 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f84:	f7ff fc34 	bl	80017f0 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e1bd      	b.n	8002312 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f96:	4b30      	ldr	r3, [pc, #192]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d0f0      	beq.n	8001f84 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa2:	4b2d      	ldr	r3, [pc, #180]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	4929      	ldr	r1, [pc, #164]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	600b      	str	r3, [r1, #0]
 8001fb6:	e018      	b.n	8001fea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fb8:	4b27      	ldr	r3, [pc, #156]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a26      	ldr	r2, [pc, #152]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001fbe:	f023 0301 	bic.w	r3, r3, #1
 8001fc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc4:	f7ff fc14 	bl	80017f0 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fcc:	f7ff fc10 	bl	80017f0 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e199      	b.n	8002312 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fde:	4b1e      	ldr	r3, [pc, #120]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1f0      	bne.n	8001fcc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d038      	beq.n	8002068 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d019      	beq.n	8002032 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ffe:	4b16      	ldr	r3, [pc, #88]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8002000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002002:	4a15      	ldr	r2, [pc, #84]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800200a:	f7ff fbf1 	bl	80017f0 <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002012:	f7ff fbed 	bl	80017f0 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e176      	b.n	8002312 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002024:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8002026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0f0      	beq.n	8002012 <HAL_RCC_OscConfig+0x23a>
 8002030:	e01a      	b.n	8002068 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8002034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002036:	4a08      	ldr	r2, [pc, #32]	; (8002058 <HAL_RCC_OscConfig+0x280>)
 8002038:	f023 0301 	bic.w	r3, r3, #1
 800203c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800203e:	f7ff fbd7 	bl	80017f0 <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002044:	e00a      	b.n	800205c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002046:	f7ff fbd3 	bl	80017f0 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d903      	bls.n	800205c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e15c      	b.n	8002312 <HAL_RCC_OscConfig+0x53a>
 8002058:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800205c:	4b91      	ldr	r3, [pc, #580]	; (80022a4 <HAL_RCC_OscConfig+0x4cc>)
 800205e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002060:	f003 0302 	and.w	r3, r3, #2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d1ee      	bne.n	8002046 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0304 	and.w	r3, r3, #4
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 80a4 	beq.w	80021be <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002076:	4b8b      	ldr	r3, [pc, #556]	; (80022a4 <HAL_RCC_OscConfig+0x4cc>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10d      	bne.n	800209e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002082:	4b88      	ldr	r3, [pc, #544]	; (80022a4 <HAL_RCC_OscConfig+0x4cc>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	4a87      	ldr	r2, [pc, #540]	; (80022a4 <HAL_RCC_OscConfig+0x4cc>)
 8002088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800208c:	6413      	str	r3, [r2, #64]	; 0x40
 800208e:	4b85      	ldr	r3, [pc, #532]	; (80022a4 <HAL_RCC_OscConfig+0x4cc>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002096:	60bb      	str	r3, [r7, #8]
 8002098:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800209a:	2301      	movs	r3, #1
 800209c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800209e:	4b82      	ldr	r3, [pc, #520]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d118      	bne.n	80020dc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80020aa:	4b7f      	ldr	r3, [pc, #508]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a7e      	ldr	r2, [pc, #504]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 80020b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020b6:	f7ff fb9b 	bl	80017f0 <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020bc:	e008      	b.n	80020d0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020be:	f7ff fb97 	bl	80017f0 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b64      	cmp	r3, #100	; 0x64
 80020ca:	d901      	bls.n	80020d0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e120      	b.n	8002312 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020d0:	4b75      	ldr	r3, [pc, #468]	; (80022a8 <HAL_RCC_OscConfig+0x4d0>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d0f0      	beq.n	80020be <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d106      	bne.n	80020f2 <HAL_RCC_OscConfig+0x31a>
 80020e4:	4b6f      	ldr	r3, [pc, #444]	; (80022a4 <HAL_RCC_OscConfig+0x4cc>)
 80020e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e8:	4a6e      	ldr	r2, [pc, #440]	; (80022a4 <HAL_RCC_OscConfig+0x4cc>)
 80020ea:	f043 0301 	orr.w	r3, r3, #1
 80020ee:	6713      	str	r3, [r2, #112]	; 0x70
 80020f0:	e02d      	b.n	800214e <HAL_RCC_OscConfig+0x376>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10c      	bne.n	8002114 <HAL_RCC_OscConfig+0x33c>
 80020fa:	4b6a      	ldr	r3, [pc, #424]	; (80022a4 <HAL_RCC_OscConfig+0x4cc>)
 80020fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020fe:	4a69      	ldr	r2, [pc, #420]	; (80022a4 <HAL_RCC_OscConfig+0x4cc>)
 8002100:	f023 0301 	bic.w	r3, r3, #1
 8002104:	6713      	str	r3, [r2, #112]	; 0x70
 8002106:	4b67      	ldr	r3, [pc, #412]	; (80022a4 <HAL_RCC_OscConfig+0x4cc>)
 8002108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210a:	4a66      	ldr	r2, [pc, #408]	; (80022a4 <HAL_RCC_OscConfig+0x4cc>)
 800210c:	f023 0304 	bic.w	r3, r3, #4
 8002110:	6713      	str	r3, [r2, #112]	; 0x70
 8002112:	e01c      	b.n	800214e <HAL_RCC_OscConfig+0x376>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	2b05      	cmp	r3, #5
 800211a:	d10c      	bne.n	8002136 <HAL_RCC_OscConfig+0x35e>
 800211c:	4b61      	ldr	r3, [pc, #388]	; (80022a4 <HAL_RCC_OscConfig+0x4cc>)
 800211e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002120:	4a60      	ldr	r2, [pc, #384]	; (80022a4 <HAL_RCC_OscConfig+0x4cc>)
 8002122:	f043 0304 	orr.w	r3, r3, #4
 8002126:	6713      	str	r3, [r2, #112]	; 0x70
 8002128:	4b5e      	ldr	r3, [pc, #376]	; (80022a4 <HAL_RCC_OscConfig+0x4cc>)
 800212a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800212c:	4a5d      	ldr	r2, [pc, #372]	; (80022a4 <HAL_RCC_OscConfig+0x4cc>)
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	6713      	str	r3, [r2, #112]	; 0x70
 8002134:	e00b      	b.n	800214e <HAL_RCC_OscConfig+0x376>
 8002136:	4b5b      	ldr	r3, [pc, #364]	; (80022a4 <HAL_RCC_OscConfig+0x4cc>)
 8002138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213a:	4a5a      	ldr	r2, [pc, #360]	; (80022a4 <HAL_RCC_OscConfig+0x4cc>)
 800213c:	f023 0301 	bic.w	r3, r3, #1
 8002140:	6713      	str	r3, [r2, #112]	; 0x70
 8002142:	4b58      	ldr	r3, [pc, #352]	; (80022a4 <HAL_RCC_OscConfig+0x4cc>)
 8002144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002146:	4a57      	ldr	r2, [pc, #348]	; (80022a4 <HAL_RCC_OscConfig+0x4cc>)
 8002148:	f023 0304 	bic.w	r3, r3, #4
 800214c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d015      	beq.n	8002182 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002156:	f7ff fb4b 	bl	80017f0 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800215c:	e00a      	b.n	8002174 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800215e:	f7ff fb47 	bl	80017f0 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	f241 3288 	movw	r2, #5000	; 0x1388
 800216c:	4293      	cmp	r3, r2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e0ce      	b.n	8002312 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002174:	4b4b      	ldr	r3, [pc, #300]	; (80022a4 <HAL_RCC_OscConfig+0x4cc>)
 8002176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0ee      	beq.n	800215e <HAL_RCC_OscConfig+0x386>
 8002180:	e014      	b.n	80021ac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002182:	f7ff fb35 	bl	80017f0 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002188:	e00a      	b.n	80021a0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800218a:	f7ff fb31 	bl	80017f0 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	f241 3288 	movw	r2, #5000	; 0x1388
 8002198:	4293      	cmp	r3, r2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e0b8      	b.n	8002312 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a0:	4b40      	ldr	r3, [pc, #256]	; (80022a4 <HAL_RCC_OscConfig+0x4cc>)
 80021a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a4:	f003 0302 	and.w	r3, r3, #2
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1ee      	bne.n	800218a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021ac:	7dfb      	ldrb	r3, [r7, #23]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d105      	bne.n	80021be <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021b2:	4b3c      	ldr	r3, [pc, #240]	; (80022a4 <HAL_RCC_OscConfig+0x4cc>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	4a3b      	ldr	r2, [pc, #236]	; (80022a4 <HAL_RCC_OscConfig+0x4cc>)
 80021b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f000 80a4 	beq.w	8002310 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021c8:	4b36      	ldr	r3, [pc, #216]	; (80022a4 <HAL_RCC_OscConfig+0x4cc>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f003 030c 	and.w	r3, r3, #12
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d06b      	beq.n	80022ac <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d149      	bne.n	8002270 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021dc:	4b31      	ldr	r3, [pc, #196]	; (80022a4 <HAL_RCC_OscConfig+0x4cc>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a30      	ldr	r2, [pc, #192]	; (80022a4 <HAL_RCC_OscConfig+0x4cc>)
 80021e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e8:	f7ff fb02 	bl	80017f0 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f0:	f7ff fafe 	bl	80017f0 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e087      	b.n	8002312 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002202:	4b28      	ldr	r3, [pc, #160]	; (80022a4 <HAL_RCC_OscConfig+0x4cc>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f0      	bne.n	80021f0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69da      	ldr	r2, [r3, #28]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	019b      	lsls	r3, r3, #6
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002224:	085b      	lsrs	r3, r3, #1
 8002226:	3b01      	subs	r3, #1
 8002228:	041b      	lsls	r3, r3, #16
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002230:	061b      	lsls	r3, r3, #24
 8002232:	4313      	orrs	r3, r2
 8002234:	4a1b      	ldr	r2, [pc, #108]	; (80022a4 <HAL_RCC_OscConfig+0x4cc>)
 8002236:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800223a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800223c:	4b19      	ldr	r3, [pc, #100]	; (80022a4 <HAL_RCC_OscConfig+0x4cc>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a18      	ldr	r2, [pc, #96]	; (80022a4 <HAL_RCC_OscConfig+0x4cc>)
 8002242:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002246:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002248:	f7ff fad2 	bl	80017f0 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002250:	f7ff face 	bl	80017f0 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e057      	b.n	8002312 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002262:	4b10      	ldr	r3, [pc, #64]	; (80022a4 <HAL_RCC_OscConfig+0x4cc>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f0      	beq.n	8002250 <HAL_RCC_OscConfig+0x478>
 800226e:	e04f      	b.n	8002310 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002270:	4b0c      	ldr	r3, [pc, #48]	; (80022a4 <HAL_RCC_OscConfig+0x4cc>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a0b      	ldr	r2, [pc, #44]	; (80022a4 <HAL_RCC_OscConfig+0x4cc>)
 8002276:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800227a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227c:	f7ff fab8 	bl	80017f0 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002284:	f7ff fab4 	bl	80017f0 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e03d      	b.n	8002312 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002296:	4b03      	ldr	r3, [pc, #12]	; (80022a4 <HAL_RCC_OscConfig+0x4cc>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x4ac>
 80022a2:	e035      	b.n	8002310 <HAL_RCC_OscConfig+0x538>
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80022ac:	4b1b      	ldr	r3, [pc, #108]	; (800231c <HAL_RCC_OscConfig+0x544>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d028      	beq.n	800230c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d121      	bne.n	800230c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d11a      	bne.n	800230c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022dc:	4013      	ands	r3, r2
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022e2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d111      	bne.n	800230c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f2:	085b      	lsrs	r3, r3, #1
 80022f4:	3b01      	subs	r3, #1
 80022f6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d107      	bne.n	800230c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002306:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002308:	429a      	cmp	r2, r3
 800230a:	d001      	beq.n	8002310 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e000      	b.n	8002312 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3718      	adds	r7, #24
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40023800 	.word	0x40023800

08002320 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800232a:	2300      	movs	r3, #0
 800232c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e0d0      	b.n	80024da <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002338:	4b6a      	ldr	r3, [pc, #424]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 030f 	and.w	r3, r3, #15
 8002340:	683a      	ldr	r2, [r7, #0]
 8002342:	429a      	cmp	r2, r3
 8002344:	d910      	bls.n	8002368 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002346:	4b67      	ldr	r3, [pc, #412]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f023 020f 	bic.w	r2, r3, #15
 800234e:	4965      	ldr	r1, [pc, #404]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	4313      	orrs	r3, r2
 8002354:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002356:	4b63      	ldr	r3, [pc, #396]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	683a      	ldr	r2, [r7, #0]
 8002360:	429a      	cmp	r2, r3
 8002362:	d001      	beq.n	8002368 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e0b8      	b.n	80024da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d020      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002380:	4b59      	ldr	r3, [pc, #356]	; (80024e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	4a58      	ldr	r2, [pc, #352]	; (80024e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002386:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800238a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0308 	and.w	r3, r3, #8
 8002394:	2b00      	cmp	r3, #0
 8002396:	d005      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002398:	4b53      	ldr	r3, [pc, #332]	; (80024e8 <HAL_RCC_ClockConfig+0x1c8>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	4a52      	ldr	r2, [pc, #328]	; (80024e8 <HAL_RCC_ClockConfig+0x1c8>)
 800239e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023a4:	4b50      	ldr	r3, [pc, #320]	; (80024e8 <HAL_RCC_ClockConfig+0x1c8>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	494d      	ldr	r1, [pc, #308]	; (80024e8 <HAL_RCC_ClockConfig+0x1c8>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d040      	beq.n	8002444 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d107      	bne.n	80023da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ca:	4b47      	ldr	r3, [pc, #284]	; (80024e8 <HAL_RCC_ClockConfig+0x1c8>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d115      	bne.n	8002402 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e07f      	b.n	80024da <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d107      	bne.n	80023f2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023e2:	4b41      	ldr	r3, [pc, #260]	; (80024e8 <HAL_RCC_ClockConfig+0x1c8>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d109      	bne.n	8002402 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e073      	b.n	80024da <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f2:	4b3d      	ldr	r3, [pc, #244]	; (80024e8 <HAL_RCC_ClockConfig+0x1c8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e06b      	b.n	80024da <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002402:	4b39      	ldr	r3, [pc, #228]	; (80024e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f023 0203 	bic.w	r2, r3, #3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	4936      	ldr	r1, [pc, #216]	; (80024e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002410:	4313      	orrs	r3, r2
 8002412:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002414:	f7ff f9ec 	bl	80017f0 <HAL_GetTick>
 8002418:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800241a:	e00a      	b.n	8002432 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800241c:	f7ff f9e8 	bl	80017f0 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	f241 3288 	movw	r2, #5000	; 0x1388
 800242a:	4293      	cmp	r3, r2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e053      	b.n	80024da <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002432:	4b2d      	ldr	r3, [pc, #180]	; (80024e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 020c 	and.w	r2, r3, #12
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	429a      	cmp	r2, r3
 8002442:	d1eb      	bne.n	800241c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002444:	4b27      	ldr	r3, [pc, #156]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 030f 	and.w	r3, r3, #15
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	429a      	cmp	r2, r3
 8002450:	d210      	bcs.n	8002474 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002452:	4b24      	ldr	r3, [pc, #144]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f023 020f 	bic.w	r2, r3, #15
 800245a:	4922      	ldr	r1, [pc, #136]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	4313      	orrs	r3, r2
 8002460:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002462:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	683a      	ldr	r2, [r7, #0]
 800246c:	429a      	cmp	r2, r3
 800246e:	d001      	beq.n	8002474 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e032      	b.n	80024da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d008      	beq.n	8002492 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002480:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <HAL_RCC_ClockConfig+0x1c8>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	4916      	ldr	r1, [pc, #88]	; (80024e8 <HAL_RCC_ClockConfig+0x1c8>)
 800248e:	4313      	orrs	r3, r2
 8002490:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0308 	and.w	r3, r3, #8
 800249a:	2b00      	cmp	r3, #0
 800249c:	d009      	beq.n	80024b2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800249e:	4b12      	ldr	r3, [pc, #72]	; (80024e8 <HAL_RCC_ClockConfig+0x1c8>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	00db      	lsls	r3, r3, #3
 80024ac:	490e      	ldr	r1, [pc, #56]	; (80024e8 <HAL_RCC_ClockConfig+0x1c8>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024b2:	f000 f821 	bl	80024f8 <HAL_RCC_GetSysClockFreq>
 80024b6:	4602      	mov	r2, r0
 80024b8:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <HAL_RCC_ClockConfig+0x1c8>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	091b      	lsrs	r3, r3, #4
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	490a      	ldr	r1, [pc, #40]	; (80024ec <HAL_RCC_ClockConfig+0x1cc>)
 80024c4:	5ccb      	ldrb	r3, [r1, r3]
 80024c6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ca:	4a09      	ldr	r2, [pc, #36]	; (80024f0 <HAL_RCC_ClockConfig+0x1d0>)
 80024cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024ce:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <HAL_RCC_ClockConfig+0x1d4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff f948 	bl	8001768 <HAL_InitTick>

  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40023c00 	.word	0x40023c00
 80024e8:	40023800 	.word	0x40023800
 80024ec:	08002fec 	.word	0x08002fec
 80024f0:	20000004 	.word	0x20000004
 80024f4:	20000008 	.word	0x20000008

080024f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024fc:	b090      	sub	sp, #64	; 0x40
 80024fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002500:	2300      	movs	r3, #0
 8002502:	637b      	str	r3, [r7, #52]	; 0x34
 8002504:	2300      	movs	r3, #0
 8002506:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002508:	2300      	movs	r3, #0
 800250a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800250c:	2300      	movs	r3, #0
 800250e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002510:	4b59      	ldr	r3, [pc, #356]	; (8002678 <HAL_RCC_GetSysClockFreq+0x180>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 030c 	and.w	r3, r3, #12
 8002518:	2b08      	cmp	r3, #8
 800251a:	d00d      	beq.n	8002538 <HAL_RCC_GetSysClockFreq+0x40>
 800251c:	2b08      	cmp	r3, #8
 800251e:	f200 80a1 	bhi.w	8002664 <HAL_RCC_GetSysClockFreq+0x16c>
 8002522:	2b00      	cmp	r3, #0
 8002524:	d002      	beq.n	800252c <HAL_RCC_GetSysClockFreq+0x34>
 8002526:	2b04      	cmp	r3, #4
 8002528:	d003      	beq.n	8002532 <HAL_RCC_GetSysClockFreq+0x3a>
 800252a:	e09b      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800252c:	4b53      	ldr	r3, [pc, #332]	; (800267c <HAL_RCC_GetSysClockFreq+0x184>)
 800252e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002530:	e09b      	b.n	800266a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002532:	4b53      	ldr	r3, [pc, #332]	; (8002680 <HAL_RCC_GetSysClockFreq+0x188>)
 8002534:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002536:	e098      	b.n	800266a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002538:	4b4f      	ldr	r3, [pc, #316]	; (8002678 <HAL_RCC_GetSysClockFreq+0x180>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002540:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002542:	4b4d      	ldr	r3, [pc, #308]	; (8002678 <HAL_RCC_GetSysClockFreq+0x180>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d028      	beq.n	80025a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800254e:	4b4a      	ldr	r3, [pc, #296]	; (8002678 <HAL_RCC_GetSysClockFreq+0x180>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	099b      	lsrs	r3, r3, #6
 8002554:	2200      	movs	r2, #0
 8002556:	623b      	str	r3, [r7, #32]
 8002558:	627a      	str	r2, [r7, #36]	; 0x24
 800255a:	6a3b      	ldr	r3, [r7, #32]
 800255c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002560:	2100      	movs	r1, #0
 8002562:	4b47      	ldr	r3, [pc, #284]	; (8002680 <HAL_RCC_GetSysClockFreq+0x188>)
 8002564:	fb03 f201 	mul.w	r2, r3, r1
 8002568:	2300      	movs	r3, #0
 800256a:	fb00 f303 	mul.w	r3, r0, r3
 800256e:	4413      	add	r3, r2
 8002570:	4a43      	ldr	r2, [pc, #268]	; (8002680 <HAL_RCC_GetSysClockFreq+0x188>)
 8002572:	fba0 1202 	umull	r1, r2, r0, r2
 8002576:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002578:	460a      	mov	r2, r1
 800257a:	62ba      	str	r2, [r7, #40]	; 0x28
 800257c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800257e:	4413      	add	r3, r2
 8002580:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002584:	2200      	movs	r2, #0
 8002586:	61bb      	str	r3, [r7, #24]
 8002588:	61fa      	str	r2, [r7, #28]
 800258a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800258e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002592:	f7fd fe8d 	bl	80002b0 <__aeabi_uldivmod>
 8002596:	4602      	mov	r2, r0
 8002598:	460b      	mov	r3, r1
 800259a:	4613      	mov	r3, r2
 800259c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800259e:	e053      	b.n	8002648 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025a0:	4b35      	ldr	r3, [pc, #212]	; (8002678 <HAL_RCC_GetSysClockFreq+0x180>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	099b      	lsrs	r3, r3, #6
 80025a6:	2200      	movs	r2, #0
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	617a      	str	r2, [r7, #20]
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80025b2:	f04f 0b00 	mov.w	fp, #0
 80025b6:	4652      	mov	r2, sl
 80025b8:	465b      	mov	r3, fp
 80025ba:	f04f 0000 	mov.w	r0, #0
 80025be:	f04f 0100 	mov.w	r1, #0
 80025c2:	0159      	lsls	r1, r3, #5
 80025c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025c8:	0150      	lsls	r0, r2, #5
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	ebb2 080a 	subs.w	r8, r2, sl
 80025d2:	eb63 090b 	sbc.w	r9, r3, fp
 80025d6:	f04f 0200 	mov.w	r2, #0
 80025da:	f04f 0300 	mov.w	r3, #0
 80025de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80025e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80025e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80025ea:	ebb2 0408 	subs.w	r4, r2, r8
 80025ee:	eb63 0509 	sbc.w	r5, r3, r9
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	f04f 0300 	mov.w	r3, #0
 80025fa:	00eb      	lsls	r3, r5, #3
 80025fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002600:	00e2      	lsls	r2, r4, #3
 8002602:	4614      	mov	r4, r2
 8002604:	461d      	mov	r5, r3
 8002606:	eb14 030a 	adds.w	r3, r4, sl
 800260a:	603b      	str	r3, [r7, #0]
 800260c:	eb45 030b 	adc.w	r3, r5, fp
 8002610:	607b      	str	r3, [r7, #4]
 8002612:	f04f 0200 	mov.w	r2, #0
 8002616:	f04f 0300 	mov.w	r3, #0
 800261a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800261e:	4629      	mov	r1, r5
 8002620:	028b      	lsls	r3, r1, #10
 8002622:	4621      	mov	r1, r4
 8002624:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002628:	4621      	mov	r1, r4
 800262a:	028a      	lsls	r2, r1, #10
 800262c:	4610      	mov	r0, r2
 800262e:	4619      	mov	r1, r3
 8002630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002632:	2200      	movs	r2, #0
 8002634:	60bb      	str	r3, [r7, #8]
 8002636:	60fa      	str	r2, [r7, #12]
 8002638:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800263c:	f7fd fe38 	bl	80002b0 <__aeabi_uldivmod>
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	4613      	mov	r3, r2
 8002646:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002648:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <HAL_RCC_GetSysClockFreq+0x180>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	0c1b      	lsrs	r3, r3, #16
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	3301      	adds	r3, #1
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002658:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800265a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800265c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002660:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002662:	e002      	b.n	800266a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002664:	4b05      	ldr	r3, [pc, #20]	; (800267c <HAL_RCC_GetSysClockFreq+0x184>)
 8002666:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002668:	bf00      	nop
    }
  }
  return sysclockfreq;
 800266a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800266c:	4618      	mov	r0, r3
 800266e:	3740      	adds	r7, #64	; 0x40
 8002670:	46bd      	mov	sp, r7
 8002672:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002676:	bf00      	nop
 8002678:	40023800 	.word	0x40023800
 800267c:	00f42400 	.word	0x00f42400
 8002680:	017d7840 	.word	0x017d7840

08002684 <__errno>:
 8002684:	4b01      	ldr	r3, [pc, #4]	; (800268c <__errno+0x8>)
 8002686:	6818      	ldr	r0, [r3, #0]
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	20000010 	.word	0x20000010

08002690 <__libc_init_array>:
 8002690:	b570      	push	{r4, r5, r6, lr}
 8002692:	4d0d      	ldr	r5, [pc, #52]	; (80026c8 <__libc_init_array+0x38>)
 8002694:	4c0d      	ldr	r4, [pc, #52]	; (80026cc <__libc_init_array+0x3c>)
 8002696:	1b64      	subs	r4, r4, r5
 8002698:	10a4      	asrs	r4, r4, #2
 800269a:	2600      	movs	r6, #0
 800269c:	42a6      	cmp	r6, r4
 800269e:	d109      	bne.n	80026b4 <__libc_init_array+0x24>
 80026a0:	4d0b      	ldr	r5, [pc, #44]	; (80026d0 <__libc_init_array+0x40>)
 80026a2:	4c0c      	ldr	r4, [pc, #48]	; (80026d4 <__libc_init_array+0x44>)
 80026a4:	f000 fc8e 	bl	8002fc4 <_init>
 80026a8:	1b64      	subs	r4, r4, r5
 80026aa:	10a4      	asrs	r4, r4, #2
 80026ac:	2600      	movs	r6, #0
 80026ae:	42a6      	cmp	r6, r4
 80026b0:	d105      	bne.n	80026be <__libc_init_array+0x2e>
 80026b2:	bd70      	pop	{r4, r5, r6, pc}
 80026b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80026b8:	4798      	blx	r3
 80026ba:	3601      	adds	r6, #1
 80026bc:	e7ee      	b.n	800269c <__libc_init_array+0xc>
 80026be:	f855 3b04 	ldr.w	r3, [r5], #4
 80026c2:	4798      	blx	r3
 80026c4:	3601      	adds	r6, #1
 80026c6:	e7f2      	b.n	80026ae <__libc_init_array+0x1e>
 80026c8:	08003038 	.word	0x08003038
 80026cc:	08003038 	.word	0x08003038
 80026d0:	08003038 	.word	0x08003038
 80026d4:	0800303c 	.word	0x0800303c

080026d8 <memset>:
 80026d8:	4402      	add	r2, r0
 80026da:	4603      	mov	r3, r0
 80026dc:	4293      	cmp	r3, r2
 80026de:	d100      	bne.n	80026e2 <memset+0xa>
 80026e0:	4770      	bx	lr
 80026e2:	f803 1b01 	strb.w	r1, [r3], #1
 80026e6:	e7f9      	b.n	80026dc <memset+0x4>

080026e8 <siprintf>:
 80026e8:	b40e      	push	{r1, r2, r3}
 80026ea:	b500      	push	{lr}
 80026ec:	b09c      	sub	sp, #112	; 0x70
 80026ee:	ab1d      	add	r3, sp, #116	; 0x74
 80026f0:	9002      	str	r0, [sp, #8]
 80026f2:	9006      	str	r0, [sp, #24]
 80026f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80026f8:	4809      	ldr	r0, [pc, #36]	; (8002720 <siprintf+0x38>)
 80026fa:	9107      	str	r1, [sp, #28]
 80026fc:	9104      	str	r1, [sp, #16]
 80026fe:	4909      	ldr	r1, [pc, #36]	; (8002724 <siprintf+0x3c>)
 8002700:	f853 2b04 	ldr.w	r2, [r3], #4
 8002704:	9105      	str	r1, [sp, #20]
 8002706:	6800      	ldr	r0, [r0, #0]
 8002708:	9301      	str	r3, [sp, #4]
 800270a:	a902      	add	r1, sp, #8
 800270c:	f000 f868 	bl	80027e0 <_svfiprintf_r>
 8002710:	9b02      	ldr	r3, [sp, #8]
 8002712:	2200      	movs	r2, #0
 8002714:	701a      	strb	r2, [r3, #0]
 8002716:	b01c      	add	sp, #112	; 0x70
 8002718:	f85d eb04 	ldr.w	lr, [sp], #4
 800271c:	b003      	add	sp, #12
 800271e:	4770      	bx	lr
 8002720:	20000010 	.word	0x20000010
 8002724:	ffff0208 	.word	0xffff0208

08002728 <__ssputs_r>:
 8002728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800272c:	688e      	ldr	r6, [r1, #8]
 800272e:	429e      	cmp	r6, r3
 8002730:	4682      	mov	sl, r0
 8002732:	460c      	mov	r4, r1
 8002734:	4690      	mov	r8, r2
 8002736:	461f      	mov	r7, r3
 8002738:	d838      	bhi.n	80027ac <__ssputs_r+0x84>
 800273a:	898a      	ldrh	r2, [r1, #12]
 800273c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002740:	d032      	beq.n	80027a8 <__ssputs_r+0x80>
 8002742:	6825      	ldr	r5, [r4, #0]
 8002744:	6909      	ldr	r1, [r1, #16]
 8002746:	eba5 0901 	sub.w	r9, r5, r1
 800274a:	6965      	ldr	r5, [r4, #20]
 800274c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002750:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002754:	3301      	adds	r3, #1
 8002756:	444b      	add	r3, r9
 8002758:	106d      	asrs	r5, r5, #1
 800275a:	429d      	cmp	r5, r3
 800275c:	bf38      	it	cc
 800275e:	461d      	movcc	r5, r3
 8002760:	0553      	lsls	r3, r2, #21
 8002762:	d531      	bpl.n	80027c8 <__ssputs_r+0xa0>
 8002764:	4629      	mov	r1, r5
 8002766:	f000 fb63 	bl	8002e30 <_malloc_r>
 800276a:	4606      	mov	r6, r0
 800276c:	b950      	cbnz	r0, 8002784 <__ssputs_r+0x5c>
 800276e:	230c      	movs	r3, #12
 8002770:	f8ca 3000 	str.w	r3, [sl]
 8002774:	89a3      	ldrh	r3, [r4, #12]
 8002776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800277a:	81a3      	strh	r3, [r4, #12]
 800277c:	f04f 30ff 	mov.w	r0, #4294967295
 8002780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002784:	6921      	ldr	r1, [r4, #16]
 8002786:	464a      	mov	r2, r9
 8002788:	f000 fabe 	bl	8002d08 <memcpy>
 800278c:	89a3      	ldrh	r3, [r4, #12]
 800278e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002796:	81a3      	strh	r3, [r4, #12]
 8002798:	6126      	str	r6, [r4, #16]
 800279a:	6165      	str	r5, [r4, #20]
 800279c:	444e      	add	r6, r9
 800279e:	eba5 0509 	sub.w	r5, r5, r9
 80027a2:	6026      	str	r6, [r4, #0]
 80027a4:	60a5      	str	r5, [r4, #8]
 80027a6:	463e      	mov	r6, r7
 80027a8:	42be      	cmp	r6, r7
 80027aa:	d900      	bls.n	80027ae <__ssputs_r+0x86>
 80027ac:	463e      	mov	r6, r7
 80027ae:	6820      	ldr	r0, [r4, #0]
 80027b0:	4632      	mov	r2, r6
 80027b2:	4641      	mov	r1, r8
 80027b4:	f000 fab6 	bl	8002d24 <memmove>
 80027b8:	68a3      	ldr	r3, [r4, #8]
 80027ba:	1b9b      	subs	r3, r3, r6
 80027bc:	60a3      	str	r3, [r4, #8]
 80027be:	6823      	ldr	r3, [r4, #0]
 80027c0:	4433      	add	r3, r6
 80027c2:	6023      	str	r3, [r4, #0]
 80027c4:	2000      	movs	r0, #0
 80027c6:	e7db      	b.n	8002780 <__ssputs_r+0x58>
 80027c8:	462a      	mov	r2, r5
 80027ca:	f000 fba5 	bl	8002f18 <_realloc_r>
 80027ce:	4606      	mov	r6, r0
 80027d0:	2800      	cmp	r0, #0
 80027d2:	d1e1      	bne.n	8002798 <__ssputs_r+0x70>
 80027d4:	6921      	ldr	r1, [r4, #16]
 80027d6:	4650      	mov	r0, sl
 80027d8:	f000 fabe 	bl	8002d58 <_free_r>
 80027dc:	e7c7      	b.n	800276e <__ssputs_r+0x46>
	...

080027e0 <_svfiprintf_r>:
 80027e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027e4:	4698      	mov	r8, r3
 80027e6:	898b      	ldrh	r3, [r1, #12]
 80027e8:	061b      	lsls	r3, r3, #24
 80027ea:	b09d      	sub	sp, #116	; 0x74
 80027ec:	4607      	mov	r7, r0
 80027ee:	460d      	mov	r5, r1
 80027f0:	4614      	mov	r4, r2
 80027f2:	d50e      	bpl.n	8002812 <_svfiprintf_r+0x32>
 80027f4:	690b      	ldr	r3, [r1, #16]
 80027f6:	b963      	cbnz	r3, 8002812 <_svfiprintf_r+0x32>
 80027f8:	2140      	movs	r1, #64	; 0x40
 80027fa:	f000 fb19 	bl	8002e30 <_malloc_r>
 80027fe:	6028      	str	r0, [r5, #0]
 8002800:	6128      	str	r0, [r5, #16]
 8002802:	b920      	cbnz	r0, 800280e <_svfiprintf_r+0x2e>
 8002804:	230c      	movs	r3, #12
 8002806:	603b      	str	r3, [r7, #0]
 8002808:	f04f 30ff 	mov.w	r0, #4294967295
 800280c:	e0d1      	b.n	80029b2 <_svfiprintf_r+0x1d2>
 800280e:	2340      	movs	r3, #64	; 0x40
 8002810:	616b      	str	r3, [r5, #20]
 8002812:	2300      	movs	r3, #0
 8002814:	9309      	str	r3, [sp, #36]	; 0x24
 8002816:	2320      	movs	r3, #32
 8002818:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800281c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002820:	2330      	movs	r3, #48	; 0x30
 8002822:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80029cc <_svfiprintf_r+0x1ec>
 8002826:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800282a:	f04f 0901 	mov.w	r9, #1
 800282e:	4623      	mov	r3, r4
 8002830:	469a      	mov	sl, r3
 8002832:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002836:	b10a      	cbz	r2, 800283c <_svfiprintf_r+0x5c>
 8002838:	2a25      	cmp	r2, #37	; 0x25
 800283a:	d1f9      	bne.n	8002830 <_svfiprintf_r+0x50>
 800283c:	ebba 0b04 	subs.w	fp, sl, r4
 8002840:	d00b      	beq.n	800285a <_svfiprintf_r+0x7a>
 8002842:	465b      	mov	r3, fp
 8002844:	4622      	mov	r2, r4
 8002846:	4629      	mov	r1, r5
 8002848:	4638      	mov	r0, r7
 800284a:	f7ff ff6d 	bl	8002728 <__ssputs_r>
 800284e:	3001      	adds	r0, #1
 8002850:	f000 80aa 	beq.w	80029a8 <_svfiprintf_r+0x1c8>
 8002854:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002856:	445a      	add	r2, fp
 8002858:	9209      	str	r2, [sp, #36]	; 0x24
 800285a:	f89a 3000 	ldrb.w	r3, [sl]
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 80a2 	beq.w	80029a8 <_svfiprintf_r+0x1c8>
 8002864:	2300      	movs	r3, #0
 8002866:	f04f 32ff 	mov.w	r2, #4294967295
 800286a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800286e:	f10a 0a01 	add.w	sl, sl, #1
 8002872:	9304      	str	r3, [sp, #16]
 8002874:	9307      	str	r3, [sp, #28]
 8002876:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800287a:	931a      	str	r3, [sp, #104]	; 0x68
 800287c:	4654      	mov	r4, sl
 800287e:	2205      	movs	r2, #5
 8002880:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002884:	4851      	ldr	r0, [pc, #324]	; (80029cc <_svfiprintf_r+0x1ec>)
 8002886:	f7fd fcc3 	bl	8000210 <memchr>
 800288a:	9a04      	ldr	r2, [sp, #16]
 800288c:	b9d8      	cbnz	r0, 80028c6 <_svfiprintf_r+0xe6>
 800288e:	06d0      	lsls	r0, r2, #27
 8002890:	bf44      	itt	mi
 8002892:	2320      	movmi	r3, #32
 8002894:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002898:	0711      	lsls	r1, r2, #28
 800289a:	bf44      	itt	mi
 800289c:	232b      	movmi	r3, #43	; 0x2b
 800289e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80028a2:	f89a 3000 	ldrb.w	r3, [sl]
 80028a6:	2b2a      	cmp	r3, #42	; 0x2a
 80028a8:	d015      	beq.n	80028d6 <_svfiprintf_r+0xf6>
 80028aa:	9a07      	ldr	r2, [sp, #28]
 80028ac:	4654      	mov	r4, sl
 80028ae:	2000      	movs	r0, #0
 80028b0:	f04f 0c0a 	mov.w	ip, #10
 80028b4:	4621      	mov	r1, r4
 80028b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80028ba:	3b30      	subs	r3, #48	; 0x30
 80028bc:	2b09      	cmp	r3, #9
 80028be:	d94e      	bls.n	800295e <_svfiprintf_r+0x17e>
 80028c0:	b1b0      	cbz	r0, 80028f0 <_svfiprintf_r+0x110>
 80028c2:	9207      	str	r2, [sp, #28]
 80028c4:	e014      	b.n	80028f0 <_svfiprintf_r+0x110>
 80028c6:	eba0 0308 	sub.w	r3, r0, r8
 80028ca:	fa09 f303 	lsl.w	r3, r9, r3
 80028ce:	4313      	orrs	r3, r2
 80028d0:	9304      	str	r3, [sp, #16]
 80028d2:	46a2      	mov	sl, r4
 80028d4:	e7d2      	b.n	800287c <_svfiprintf_r+0x9c>
 80028d6:	9b03      	ldr	r3, [sp, #12]
 80028d8:	1d19      	adds	r1, r3, #4
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	9103      	str	r1, [sp, #12]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	bfbb      	ittet	lt
 80028e2:	425b      	neglt	r3, r3
 80028e4:	f042 0202 	orrlt.w	r2, r2, #2
 80028e8:	9307      	strge	r3, [sp, #28]
 80028ea:	9307      	strlt	r3, [sp, #28]
 80028ec:	bfb8      	it	lt
 80028ee:	9204      	strlt	r2, [sp, #16]
 80028f0:	7823      	ldrb	r3, [r4, #0]
 80028f2:	2b2e      	cmp	r3, #46	; 0x2e
 80028f4:	d10c      	bne.n	8002910 <_svfiprintf_r+0x130>
 80028f6:	7863      	ldrb	r3, [r4, #1]
 80028f8:	2b2a      	cmp	r3, #42	; 0x2a
 80028fa:	d135      	bne.n	8002968 <_svfiprintf_r+0x188>
 80028fc:	9b03      	ldr	r3, [sp, #12]
 80028fe:	1d1a      	adds	r2, r3, #4
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	9203      	str	r2, [sp, #12]
 8002904:	2b00      	cmp	r3, #0
 8002906:	bfb8      	it	lt
 8002908:	f04f 33ff 	movlt.w	r3, #4294967295
 800290c:	3402      	adds	r4, #2
 800290e:	9305      	str	r3, [sp, #20]
 8002910:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80029dc <_svfiprintf_r+0x1fc>
 8002914:	7821      	ldrb	r1, [r4, #0]
 8002916:	2203      	movs	r2, #3
 8002918:	4650      	mov	r0, sl
 800291a:	f7fd fc79 	bl	8000210 <memchr>
 800291e:	b140      	cbz	r0, 8002932 <_svfiprintf_r+0x152>
 8002920:	2340      	movs	r3, #64	; 0x40
 8002922:	eba0 000a 	sub.w	r0, r0, sl
 8002926:	fa03 f000 	lsl.w	r0, r3, r0
 800292a:	9b04      	ldr	r3, [sp, #16]
 800292c:	4303      	orrs	r3, r0
 800292e:	3401      	adds	r4, #1
 8002930:	9304      	str	r3, [sp, #16]
 8002932:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002936:	4826      	ldr	r0, [pc, #152]	; (80029d0 <_svfiprintf_r+0x1f0>)
 8002938:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800293c:	2206      	movs	r2, #6
 800293e:	f7fd fc67 	bl	8000210 <memchr>
 8002942:	2800      	cmp	r0, #0
 8002944:	d038      	beq.n	80029b8 <_svfiprintf_r+0x1d8>
 8002946:	4b23      	ldr	r3, [pc, #140]	; (80029d4 <_svfiprintf_r+0x1f4>)
 8002948:	bb1b      	cbnz	r3, 8002992 <_svfiprintf_r+0x1b2>
 800294a:	9b03      	ldr	r3, [sp, #12]
 800294c:	3307      	adds	r3, #7
 800294e:	f023 0307 	bic.w	r3, r3, #7
 8002952:	3308      	adds	r3, #8
 8002954:	9303      	str	r3, [sp, #12]
 8002956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002958:	4433      	add	r3, r6
 800295a:	9309      	str	r3, [sp, #36]	; 0x24
 800295c:	e767      	b.n	800282e <_svfiprintf_r+0x4e>
 800295e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002962:	460c      	mov	r4, r1
 8002964:	2001      	movs	r0, #1
 8002966:	e7a5      	b.n	80028b4 <_svfiprintf_r+0xd4>
 8002968:	2300      	movs	r3, #0
 800296a:	3401      	adds	r4, #1
 800296c:	9305      	str	r3, [sp, #20]
 800296e:	4619      	mov	r1, r3
 8002970:	f04f 0c0a 	mov.w	ip, #10
 8002974:	4620      	mov	r0, r4
 8002976:	f810 2b01 	ldrb.w	r2, [r0], #1
 800297a:	3a30      	subs	r2, #48	; 0x30
 800297c:	2a09      	cmp	r2, #9
 800297e:	d903      	bls.n	8002988 <_svfiprintf_r+0x1a8>
 8002980:	2b00      	cmp	r3, #0
 8002982:	d0c5      	beq.n	8002910 <_svfiprintf_r+0x130>
 8002984:	9105      	str	r1, [sp, #20]
 8002986:	e7c3      	b.n	8002910 <_svfiprintf_r+0x130>
 8002988:	fb0c 2101 	mla	r1, ip, r1, r2
 800298c:	4604      	mov	r4, r0
 800298e:	2301      	movs	r3, #1
 8002990:	e7f0      	b.n	8002974 <_svfiprintf_r+0x194>
 8002992:	ab03      	add	r3, sp, #12
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	462a      	mov	r2, r5
 8002998:	4b0f      	ldr	r3, [pc, #60]	; (80029d8 <_svfiprintf_r+0x1f8>)
 800299a:	a904      	add	r1, sp, #16
 800299c:	4638      	mov	r0, r7
 800299e:	f3af 8000 	nop.w
 80029a2:	1c42      	adds	r2, r0, #1
 80029a4:	4606      	mov	r6, r0
 80029a6:	d1d6      	bne.n	8002956 <_svfiprintf_r+0x176>
 80029a8:	89ab      	ldrh	r3, [r5, #12]
 80029aa:	065b      	lsls	r3, r3, #25
 80029ac:	f53f af2c 	bmi.w	8002808 <_svfiprintf_r+0x28>
 80029b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80029b2:	b01d      	add	sp, #116	; 0x74
 80029b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029b8:	ab03      	add	r3, sp, #12
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	462a      	mov	r2, r5
 80029be:	4b06      	ldr	r3, [pc, #24]	; (80029d8 <_svfiprintf_r+0x1f8>)
 80029c0:	a904      	add	r1, sp, #16
 80029c2:	4638      	mov	r0, r7
 80029c4:	f000 f87a 	bl	8002abc <_printf_i>
 80029c8:	e7eb      	b.n	80029a2 <_svfiprintf_r+0x1c2>
 80029ca:	bf00      	nop
 80029cc:	08002ffc 	.word	0x08002ffc
 80029d0:	08003006 	.word	0x08003006
 80029d4:	00000000 	.word	0x00000000
 80029d8:	08002729 	.word	0x08002729
 80029dc:	08003002 	.word	0x08003002

080029e0 <_printf_common>:
 80029e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029e4:	4616      	mov	r6, r2
 80029e6:	4699      	mov	r9, r3
 80029e8:	688a      	ldr	r2, [r1, #8]
 80029ea:	690b      	ldr	r3, [r1, #16]
 80029ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80029f0:	4293      	cmp	r3, r2
 80029f2:	bfb8      	it	lt
 80029f4:	4613      	movlt	r3, r2
 80029f6:	6033      	str	r3, [r6, #0]
 80029f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80029fc:	4607      	mov	r7, r0
 80029fe:	460c      	mov	r4, r1
 8002a00:	b10a      	cbz	r2, 8002a06 <_printf_common+0x26>
 8002a02:	3301      	adds	r3, #1
 8002a04:	6033      	str	r3, [r6, #0]
 8002a06:	6823      	ldr	r3, [r4, #0]
 8002a08:	0699      	lsls	r1, r3, #26
 8002a0a:	bf42      	ittt	mi
 8002a0c:	6833      	ldrmi	r3, [r6, #0]
 8002a0e:	3302      	addmi	r3, #2
 8002a10:	6033      	strmi	r3, [r6, #0]
 8002a12:	6825      	ldr	r5, [r4, #0]
 8002a14:	f015 0506 	ands.w	r5, r5, #6
 8002a18:	d106      	bne.n	8002a28 <_printf_common+0x48>
 8002a1a:	f104 0a19 	add.w	sl, r4, #25
 8002a1e:	68e3      	ldr	r3, [r4, #12]
 8002a20:	6832      	ldr	r2, [r6, #0]
 8002a22:	1a9b      	subs	r3, r3, r2
 8002a24:	42ab      	cmp	r3, r5
 8002a26:	dc26      	bgt.n	8002a76 <_printf_common+0x96>
 8002a28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002a2c:	1e13      	subs	r3, r2, #0
 8002a2e:	6822      	ldr	r2, [r4, #0]
 8002a30:	bf18      	it	ne
 8002a32:	2301      	movne	r3, #1
 8002a34:	0692      	lsls	r2, r2, #26
 8002a36:	d42b      	bmi.n	8002a90 <_printf_common+0xb0>
 8002a38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a3c:	4649      	mov	r1, r9
 8002a3e:	4638      	mov	r0, r7
 8002a40:	47c0      	blx	r8
 8002a42:	3001      	adds	r0, #1
 8002a44:	d01e      	beq.n	8002a84 <_printf_common+0xa4>
 8002a46:	6823      	ldr	r3, [r4, #0]
 8002a48:	68e5      	ldr	r5, [r4, #12]
 8002a4a:	6832      	ldr	r2, [r6, #0]
 8002a4c:	f003 0306 	and.w	r3, r3, #6
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	bf08      	it	eq
 8002a54:	1aad      	subeq	r5, r5, r2
 8002a56:	68a3      	ldr	r3, [r4, #8]
 8002a58:	6922      	ldr	r2, [r4, #16]
 8002a5a:	bf0c      	ite	eq
 8002a5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a60:	2500      	movne	r5, #0
 8002a62:	4293      	cmp	r3, r2
 8002a64:	bfc4      	itt	gt
 8002a66:	1a9b      	subgt	r3, r3, r2
 8002a68:	18ed      	addgt	r5, r5, r3
 8002a6a:	2600      	movs	r6, #0
 8002a6c:	341a      	adds	r4, #26
 8002a6e:	42b5      	cmp	r5, r6
 8002a70:	d11a      	bne.n	8002aa8 <_printf_common+0xc8>
 8002a72:	2000      	movs	r0, #0
 8002a74:	e008      	b.n	8002a88 <_printf_common+0xa8>
 8002a76:	2301      	movs	r3, #1
 8002a78:	4652      	mov	r2, sl
 8002a7a:	4649      	mov	r1, r9
 8002a7c:	4638      	mov	r0, r7
 8002a7e:	47c0      	blx	r8
 8002a80:	3001      	adds	r0, #1
 8002a82:	d103      	bne.n	8002a8c <_printf_common+0xac>
 8002a84:	f04f 30ff 	mov.w	r0, #4294967295
 8002a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a8c:	3501      	adds	r5, #1
 8002a8e:	e7c6      	b.n	8002a1e <_printf_common+0x3e>
 8002a90:	18e1      	adds	r1, r4, r3
 8002a92:	1c5a      	adds	r2, r3, #1
 8002a94:	2030      	movs	r0, #48	; 0x30
 8002a96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a9a:	4422      	add	r2, r4
 8002a9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002aa0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002aa4:	3302      	adds	r3, #2
 8002aa6:	e7c7      	b.n	8002a38 <_printf_common+0x58>
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	4622      	mov	r2, r4
 8002aac:	4649      	mov	r1, r9
 8002aae:	4638      	mov	r0, r7
 8002ab0:	47c0      	blx	r8
 8002ab2:	3001      	adds	r0, #1
 8002ab4:	d0e6      	beq.n	8002a84 <_printf_common+0xa4>
 8002ab6:	3601      	adds	r6, #1
 8002ab8:	e7d9      	b.n	8002a6e <_printf_common+0x8e>
	...

08002abc <_printf_i>:
 8002abc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ac0:	7e0f      	ldrb	r7, [r1, #24]
 8002ac2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002ac4:	2f78      	cmp	r7, #120	; 0x78
 8002ac6:	4691      	mov	r9, r2
 8002ac8:	4680      	mov	r8, r0
 8002aca:	460c      	mov	r4, r1
 8002acc:	469a      	mov	sl, r3
 8002ace:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002ad2:	d807      	bhi.n	8002ae4 <_printf_i+0x28>
 8002ad4:	2f62      	cmp	r7, #98	; 0x62
 8002ad6:	d80a      	bhi.n	8002aee <_printf_i+0x32>
 8002ad8:	2f00      	cmp	r7, #0
 8002ada:	f000 80d8 	beq.w	8002c8e <_printf_i+0x1d2>
 8002ade:	2f58      	cmp	r7, #88	; 0x58
 8002ae0:	f000 80a3 	beq.w	8002c2a <_printf_i+0x16e>
 8002ae4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ae8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002aec:	e03a      	b.n	8002b64 <_printf_i+0xa8>
 8002aee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002af2:	2b15      	cmp	r3, #21
 8002af4:	d8f6      	bhi.n	8002ae4 <_printf_i+0x28>
 8002af6:	a101      	add	r1, pc, #4	; (adr r1, 8002afc <_printf_i+0x40>)
 8002af8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002afc:	08002b55 	.word	0x08002b55
 8002b00:	08002b69 	.word	0x08002b69
 8002b04:	08002ae5 	.word	0x08002ae5
 8002b08:	08002ae5 	.word	0x08002ae5
 8002b0c:	08002ae5 	.word	0x08002ae5
 8002b10:	08002ae5 	.word	0x08002ae5
 8002b14:	08002b69 	.word	0x08002b69
 8002b18:	08002ae5 	.word	0x08002ae5
 8002b1c:	08002ae5 	.word	0x08002ae5
 8002b20:	08002ae5 	.word	0x08002ae5
 8002b24:	08002ae5 	.word	0x08002ae5
 8002b28:	08002c75 	.word	0x08002c75
 8002b2c:	08002b99 	.word	0x08002b99
 8002b30:	08002c57 	.word	0x08002c57
 8002b34:	08002ae5 	.word	0x08002ae5
 8002b38:	08002ae5 	.word	0x08002ae5
 8002b3c:	08002c97 	.word	0x08002c97
 8002b40:	08002ae5 	.word	0x08002ae5
 8002b44:	08002b99 	.word	0x08002b99
 8002b48:	08002ae5 	.word	0x08002ae5
 8002b4c:	08002ae5 	.word	0x08002ae5
 8002b50:	08002c5f 	.word	0x08002c5f
 8002b54:	682b      	ldr	r3, [r5, #0]
 8002b56:	1d1a      	adds	r2, r3, #4
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	602a      	str	r2, [r5, #0]
 8002b5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b64:	2301      	movs	r3, #1
 8002b66:	e0a3      	b.n	8002cb0 <_printf_i+0x1f4>
 8002b68:	6820      	ldr	r0, [r4, #0]
 8002b6a:	6829      	ldr	r1, [r5, #0]
 8002b6c:	0606      	lsls	r6, r0, #24
 8002b6e:	f101 0304 	add.w	r3, r1, #4
 8002b72:	d50a      	bpl.n	8002b8a <_printf_i+0xce>
 8002b74:	680e      	ldr	r6, [r1, #0]
 8002b76:	602b      	str	r3, [r5, #0]
 8002b78:	2e00      	cmp	r6, #0
 8002b7a:	da03      	bge.n	8002b84 <_printf_i+0xc8>
 8002b7c:	232d      	movs	r3, #45	; 0x2d
 8002b7e:	4276      	negs	r6, r6
 8002b80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b84:	485e      	ldr	r0, [pc, #376]	; (8002d00 <_printf_i+0x244>)
 8002b86:	230a      	movs	r3, #10
 8002b88:	e019      	b.n	8002bbe <_printf_i+0x102>
 8002b8a:	680e      	ldr	r6, [r1, #0]
 8002b8c:	602b      	str	r3, [r5, #0]
 8002b8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002b92:	bf18      	it	ne
 8002b94:	b236      	sxthne	r6, r6
 8002b96:	e7ef      	b.n	8002b78 <_printf_i+0xbc>
 8002b98:	682b      	ldr	r3, [r5, #0]
 8002b9a:	6820      	ldr	r0, [r4, #0]
 8002b9c:	1d19      	adds	r1, r3, #4
 8002b9e:	6029      	str	r1, [r5, #0]
 8002ba0:	0601      	lsls	r1, r0, #24
 8002ba2:	d501      	bpl.n	8002ba8 <_printf_i+0xec>
 8002ba4:	681e      	ldr	r6, [r3, #0]
 8002ba6:	e002      	b.n	8002bae <_printf_i+0xf2>
 8002ba8:	0646      	lsls	r6, r0, #25
 8002baa:	d5fb      	bpl.n	8002ba4 <_printf_i+0xe8>
 8002bac:	881e      	ldrh	r6, [r3, #0]
 8002bae:	4854      	ldr	r0, [pc, #336]	; (8002d00 <_printf_i+0x244>)
 8002bb0:	2f6f      	cmp	r7, #111	; 0x6f
 8002bb2:	bf0c      	ite	eq
 8002bb4:	2308      	moveq	r3, #8
 8002bb6:	230a      	movne	r3, #10
 8002bb8:	2100      	movs	r1, #0
 8002bba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002bbe:	6865      	ldr	r5, [r4, #4]
 8002bc0:	60a5      	str	r5, [r4, #8]
 8002bc2:	2d00      	cmp	r5, #0
 8002bc4:	bfa2      	ittt	ge
 8002bc6:	6821      	ldrge	r1, [r4, #0]
 8002bc8:	f021 0104 	bicge.w	r1, r1, #4
 8002bcc:	6021      	strge	r1, [r4, #0]
 8002bce:	b90e      	cbnz	r6, 8002bd4 <_printf_i+0x118>
 8002bd0:	2d00      	cmp	r5, #0
 8002bd2:	d04d      	beq.n	8002c70 <_printf_i+0x1b4>
 8002bd4:	4615      	mov	r5, r2
 8002bd6:	fbb6 f1f3 	udiv	r1, r6, r3
 8002bda:	fb03 6711 	mls	r7, r3, r1, r6
 8002bde:	5dc7      	ldrb	r7, [r0, r7]
 8002be0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002be4:	4637      	mov	r7, r6
 8002be6:	42bb      	cmp	r3, r7
 8002be8:	460e      	mov	r6, r1
 8002bea:	d9f4      	bls.n	8002bd6 <_printf_i+0x11a>
 8002bec:	2b08      	cmp	r3, #8
 8002bee:	d10b      	bne.n	8002c08 <_printf_i+0x14c>
 8002bf0:	6823      	ldr	r3, [r4, #0]
 8002bf2:	07de      	lsls	r6, r3, #31
 8002bf4:	d508      	bpl.n	8002c08 <_printf_i+0x14c>
 8002bf6:	6923      	ldr	r3, [r4, #16]
 8002bf8:	6861      	ldr	r1, [r4, #4]
 8002bfa:	4299      	cmp	r1, r3
 8002bfc:	bfde      	ittt	le
 8002bfe:	2330      	movle	r3, #48	; 0x30
 8002c00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c04:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002c08:	1b52      	subs	r2, r2, r5
 8002c0a:	6122      	str	r2, [r4, #16]
 8002c0c:	f8cd a000 	str.w	sl, [sp]
 8002c10:	464b      	mov	r3, r9
 8002c12:	aa03      	add	r2, sp, #12
 8002c14:	4621      	mov	r1, r4
 8002c16:	4640      	mov	r0, r8
 8002c18:	f7ff fee2 	bl	80029e0 <_printf_common>
 8002c1c:	3001      	adds	r0, #1
 8002c1e:	d14c      	bne.n	8002cba <_printf_i+0x1fe>
 8002c20:	f04f 30ff 	mov.w	r0, #4294967295
 8002c24:	b004      	add	sp, #16
 8002c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c2a:	4835      	ldr	r0, [pc, #212]	; (8002d00 <_printf_i+0x244>)
 8002c2c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002c30:	6829      	ldr	r1, [r5, #0]
 8002c32:	6823      	ldr	r3, [r4, #0]
 8002c34:	f851 6b04 	ldr.w	r6, [r1], #4
 8002c38:	6029      	str	r1, [r5, #0]
 8002c3a:	061d      	lsls	r5, r3, #24
 8002c3c:	d514      	bpl.n	8002c68 <_printf_i+0x1ac>
 8002c3e:	07df      	lsls	r7, r3, #31
 8002c40:	bf44      	itt	mi
 8002c42:	f043 0320 	orrmi.w	r3, r3, #32
 8002c46:	6023      	strmi	r3, [r4, #0]
 8002c48:	b91e      	cbnz	r6, 8002c52 <_printf_i+0x196>
 8002c4a:	6823      	ldr	r3, [r4, #0]
 8002c4c:	f023 0320 	bic.w	r3, r3, #32
 8002c50:	6023      	str	r3, [r4, #0]
 8002c52:	2310      	movs	r3, #16
 8002c54:	e7b0      	b.n	8002bb8 <_printf_i+0xfc>
 8002c56:	6823      	ldr	r3, [r4, #0]
 8002c58:	f043 0320 	orr.w	r3, r3, #32
 8002c5c:	6023      	str	r3, [r4, #0]
 8002c5e:	2378      	movs	r3, #120	; 0x78
 8002c60:	4828      	ldr	r0, [pc, #160]	; (8002d04 <_printf_i+0x248>)
 8002c62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002c66:	e7e3      	b.n	8002c30 <_printf_i+0x174>
 8002c68:	0659      	lsls	r1, r3, #25
 8002c6a:	bf48      	it	mi
 8002c6c:	b2b6      	uxthmi	r6, r6
 8002c6e:	e7e6      	b.n	8002c3e <_printf_i+0x182>
 8002c70:	4615      	mov	r5, r2
 8002c72:	e7bb      	b.n	8002bec <_printf_i+0x130>
 8002c74:	682b      	ldr	r3, [r5, #0]
 8002c76:	6826      	ldr	r6, [r4, #0]
 8002c78:	6961      	ldr	r1, [r4, #20]
 8002c7a:	1d18      	adds	r0, r3, #4
 8002c7c:	6028      	str	r0, [r5, #0]
 8002c7e:	0635      	lsls	r5, r6, #24
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	d501      	bpl.n	8002c88 <_printf_i+0x1cc>
 8002c84:	6019      	str	r1, [r3, #0]
 8002c86:	e002      	b.n	8002c8e <_printf_i+0x1d2>
 8002c88:	0670      	lsls	r0, r6, #25
 8002c8a:	d5fb      	bpl.n	8002c84 <_printf_i+0x1c8>
 8002c8c:	8019      	strh	r1, [r3, #0]
 8002c8e:	2300      	movs	r3, #0
 8002c90:	6123      	str	r3, [r4, #16]
 8002c92:	4615      	mov	r5, r2
 8002c94:	e7ba      	b.n	8002c0c <_printf_i+0x150>
 8002c96:	682b      	ldr	r3, [r5, #0]
 8002c98:	1d1a      	adds	r2, r3, #4
 8002c9a:	602a      	str	r2, [r5, #0]
 8002c9c:	681d      	ldr	r5, [r3, #0]
 8002c9e:	6862      	ldr	r2, [r4, #4]
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	4628      	mov	r0, r5
 8002ca4:	f7fd fab4 	bl	8000210 <memchr>
 8002ca8:	b108      	cbz	r0, 8002cae <_printf_i+0x1f2>
 8002caa:	1b40      	subs	r0, r0, r5
 8002cac:	6060      	str	r0, [r4, #4]
 8002cae:	6863      	ldr	r3, [r4, #4]
 8002cb0:	6123      	str	r3, [r4, #16]
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cb8:	e7a8      	b.n	8002c0c <_printf_i+0x150>
 8002cba:	6923      	ldr	r3, [r4, #16]
 8002cbc:	462a      	mov	r2, r5
 8002cbe:	4649      	mov	r1, r9
 8002cc0:	4640      	mov	r0, r8
 8002cc2:	47d0      	blx	sl
 8002cc4:	3001      	adds	r0, #1
 8002cc6:	d0ab      	beq.n	8002c20 <_printf_i+0x164>
 8002cc8:	6823      	ldr	r3, [r4, #0]
 8002cca:	079b      	lsls	r3, r3, #30
 8002ccc:	d413      	bmi.n	8002cf6 <_printf_i+0x23a>
 8002cce:	68e0      	ldr	r0, [r4, #12]
 8002cd0:	9b03      	ldr	r3, [sp, #12]
 8002cd2:	4298      	cmp	r0, r3
 8002cd4:	bfb8      	it	lt
 8002cd6:	4618      	movlt	r0, r3
 8002cd8:	e7a4      	b.n	8002c24 <_printf_i+0x168>
 8002cda:	2301      	movs	r3, #1
 8002cdc:	4632      	mov	r2, r6
 8002cde:	4649      	mov	r1, r9
 8002ce0:	4640      	mov	r0, r8
 8002ce2:	47d0      	blx	sl
 8002ce4:	3001      	adds	r0, #1
 8002ce6:	d09b      	beq.n	8002c20 <_printf_i+0x164>
 8002ce8:	3501      	adds	r5, #1
 8002cea:	68e3      	ldr	r3, [r4, #12]
 8002cec:	9903      	ldr	r1, [sp, #12]
 8002cee:	1a5b      	subs	r3, r3, r1
 8002cf0:	42ab      	cmp	r3, r5
 8002cf2:	dcf2      	bgt.n	8002cda <_printf_i+0x21e>
 8002cf4:	e7eb      	b.n	8002cce <_printf_i+0x212>
 8002cf6:	2500      	movs	r5, #0
 8002cf8:	f104 0619 	add.w	r6, r4, #25
 8002cfc:	e7f5      	b.n	8002cea <_printf_i+0x22e>
 8002cfe:	bf00      	nop
 8002d00:	0800300d 	.word	0x0800300d
 8002d04:	0800301e 	.word	0x0800301e

08002d08 <memcpy>:
 8002d08:	440a      	add	r2, r1
 8002d0a:	4291      	cmp	r1, r2
 8002d0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002d10:	d100      	bne.n	8002d14 <memcpy+0xc>
 8002d12:	4770      	bx	lr
 8002d14:	b510      	push	{r4, lr}
 8002d16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d1e:	4291      	cmp	r1, r2
 8002d20:	d1f9      	bne.n	8002d16 <memcpy+0xe>
 8002d22:	bd10      	pop	{r4, pc}

08002d24 <memmove>:
 8002d24:	4288      	cmp	r0, r1
 8002d26:	b510      	push	{r4, lr}
 8002d28:	eb01 0402 	add.w	r4, r1, r2
 8002d2c:	d902      	bls.n	8002d34 <memmove+0x10>
 8002d2e:	4284      	cmp	r4, r0
 8002d30:	4623      	mov	r3, r4
 8002d32:	d807      	bhi.n	8002d44 <memmove+0x20>
 8002d34:	1e43      	subs	r3, r0, #1
 8002d36:	42a1      	cmp	r1, r4
 8002d38:	d008      	beq.n	8002d4c <memmove+0x28>
 8002d3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002d3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002d42:	e7f8      	b.n	8002d36 <memmove+0x12>
 8002d44:	4402      	add	r2, r0
 8002d46:	4601      	mov	r1, r0
 8002d48:	428a      	cmp	r2, r1
 8002d4a:	d100      	bne.n	8002d4e <memmove+0x2a>
 8002d4c:	bd10      	pop	{r4, pc}
 8002d4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002d52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002d56:	e7f7      	b.n	8002d48 <memmove+0x24>

08002d58 <_free_r>:
 8002d58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d5a:	2900      	cmp	r1, #0
 8002d5c:	d044      	beq.n	8002de8 <_free_r+0x90>
 8002d5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d62:	9001      	str	r0, [sp, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f1a1 0404 	sub.w	r4, r1, #4
 8002d6a:	bfb8      	it	lt
 8002d6c:	18e4      	addlt	r4, r4, r3
 8002d6e:	f000 f913 	bl	8002f98 <__malloc_lock>
 8002d72:	4a1e      	ldr	r2, [pc, #120]	; (8002dec <_free_r+0x94>)
 8002d74:	9801      	ldr	r0, [sp, #4]
 8002d76:	6813      	ldr	r3, [r2, #0]
 8002d78:	b933      	cbnz	r3, 8002d88 <_free_r+0x30>
 8002d7a:	6063      	str	r3, [r4, #4]
 8002d7c:	6014      	str	r4, [r2, #0]
 8002d7e:	b003      	add	sp, #12
 8002d80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002d84:	f000 b90e 	b.w	8002fa4 <__malloc_unlock>
 8002d88:	42a3      	cmp	r3, r4
 8002d8a:	d908      	bls.n	8002d9e <_free_r+0x46>
 8002d8c:	6825      	ldr	r5, [r4, #0]
 8002d8e:	1961      	adds	r1, r4, r5
 8002d90:	428b      	cmp	r3, r1
 8002d92:	bf01      	itttt	eq
 8002d94:	6819      	ldreq	r1, [r3, #0]
 8002d96:	685b      	ldreq	r3, [r3, #4]
 8002d98:	1949      	addeq	r1, r1, r5
 8002d9a:	6021      	streq	r1, [r4, #0]
 8002d9c:	e7ed      	b.n	8002d7a <_free_r+0x22>
 8002d9e:	461a      	mov	r2, r3
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	b10b      	cbz	r3, 8002da8 <_free_r+0x50>
 8002da4:	42a3      	cmp	r3, r4
 8002da6:	d9fa      	bls.n	8002d9e <_free_r+0x46>
 8002da8:	6811      	ldr	r1, [r2, #0]
 8002daa:	1855      	adds	r5, r2, r1
 8002dac:	42a5      	cmp	r5, r4
 8002dae:	d10b      	bne.n	8002dc8 <_free_r+0x70>
 8002db0:	6824      	ldr	r4, [r4, #0]
 8002db2:	4421      	add	r1, r4
 8002db4:	1854      	adds	r4, r2, r1
 8002db6:	42a3      	cmp	r3, r4
 8002db8:	6011      	str	r1, [r2, #0]
 8002dba:	d1e0      	bne.n	8002d7e <_free_r+0x26>
 8002dbc:	681c      	ldr	r4, [r3, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	6053      	str	r3, [r2, #4]
 8002dc2:	4421      	add	r1, r4
 8002dc4:	6011      	str	r1, [r2, #0]
 8002dc6:	e7da      	b.n	8002d7e <_free_r+0x26>
 8002dc8:	d902      	bls.n	8002dd0 <_free_r+0x78>
 8002dca:	230c      	movs	r3, #12
 8002dcc:	6003      	str	r3, [r0, #0]
 8002dce:	e7d6      	b.n	8002d7e <_free_r+0x26>
 8002dd0:	6825      	ldr	r5, [r4, #0]
 8002dd2:	1961      	adds	r1, r4, r5
 8002dd4:	428b      	cmp	r3, r1
 8002dd6:	bf04      	itt	eq
 8002dd8:	6819      	ldreq	r1, [r3, #0]
 8002dda:	685b      	ldreq	r3, [r3, #4]
 8002ddc:	6063      	str	r3, [r4, #4]
 8002dde:	bf04      	itt	eq
 8002de0:	1949      	addeq	r1, r1, r5
 8002de2:	6021      	streq	r1, [r4, #0]
 8002de4:	6054      	str	r4, [r2, #4]
 8002de6:	e7ca      	b.n	8002d7e <_free_r+0x26>
 8002de8:	b003      	add	sp, #12
 8002dea:	bd30      	pop	{r4, r5, pc}
 8002dec:	200000b0 	.word	0x200000b0

08002df0 <sbrk_aligned>:
 8002df0:	b570      	push	{r4, r5, r6, lr}
 8002df2:	4e0e      	ldr	r6, [pc, #56]	; (8002e2c <sbrk_aligned+0x3c>)
 8002df4:	460c      	mov	r4, r1
 8002df6:	6831      	ldr	r1, [r6, #0]
 8002df8:	4605      	mov	r5, r0
 8002dfa:	b911      	cbnz	r1, 8002e02 <sbrk_aligned+0x12>
 8002dfc:	f000 f8bc 	bl	8002f78 <_sbrk_r>
 8002e00:	6030      	str	r0, [r6, #0]
 8002e02:	4621      	mov	r1, r4
 8002e04:	4628      	mov	r0, r5
 8002e06:	f000 f8b7 	bl	8002f78 <_sbrk_r>
 8002e0a:	1c43      	adds	r3, r0, #1
 8002e0c:	d00a      	beq.n	8002e24 <sbrk_aligned+0x34>
 8002e0e:	1cc4      	adds	r4, r0, #3
 8002e10:	f024 0403 	bic.w	r4, r4, #3
 8002e14:	42a0      	cmp	r0, r4
 8002e16:	d007      	beq.n	8002e28 <sbrk_aligned+0x38>
 8002e18:	1a21      	subs	r1, r4, r0
 8002e1a:	4628      	mov	r0, r5
 8002e1c:	f000 f8ac 	bl	8002f78 <_sbrk_r>
 8002e20:	3001      	adds	r0, #1
 8002e22:	d101      	bne.n	8002e28 <sbrk_aligned+0x38>
 8002e24:	f04f 34ff 	mov.w	r4, #4294967295
 8002e28:	4620      	mov	r0, r4
 8002e2a:	bd70      	pop	{r4, r5, r6, pc}
 8002e2c:	200000b4 	.word	0x200000b4

08002e30 <_malloc_r>:
 8002e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e34:	1ccd      	adds	r5, r1, #3
 8002e36:	f025 0503 	bic.w	r5, r5, #3
 8002e3a:	3508      	adds	r5, #8
 8002e3c:	2d0c      	cmp	r5, #12
 8002e3e:	bf38      	it	cc
 8002e40:	250c      	movcc	r5, #12
 8002e42:	2d00      	cmp	r5, #0
 8002e44:	4607      	mov	r7, r0
 8002e46:	db01      	blt.n	8002e4c <_malloc_r+0x1c>
 8002e48:	42a9      	cmp	r1, r5
 8002e4a:	d905      	bls.n	8002e58 <_malloc_r+0x28>
 8002e4c:	230c      	movs	r3, #12
 8002e4e:	603b      	str	r3, [r7, #0]
 8002e50:	2600      	movs	r6, #0
 8002e52:	4630      	mov	r0, r6
 8002e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e58:	4e2e      	ldr	r6, [pc, #184]	; (8002f14 <_malloc_r+0xe4>)
 8002e5a:	f000 f89d 	bl	8002f98 <__malloc_lock>
 8002e5e:	6833      	ldr	r3, [r6, #0]
 8002e60:	461c      	mov	r4, r3
 8002e62:	bb34      	cbnz	r4, 8002eb2 <_malloc_r+0x82>
 8002e64:	4629      	mov	r1, r5
 8002e66:	4638      	mov	r0, r7
 8002e68:	f7ff ffc2 	bl	8002df0 <sbrk_aligned>
 8002e6c:	1c43      	adds	r3, r0, #1
 8002e6e:	4604      	mov	r4, r0
 8002e70:	d14d      	bne.n	8002f0e <_malloc_r+0xde>
 8002e72:	6834      	ldr	r4, [r6, #0]
 8002e74:	4626      	mov	r6, r4
 8002e76:	2e00      	cmp	r6, #0
 8002e78:	d140      	bne.n	8002efc <_malloc_r+0xcc>
 8002e7a:	6823      	ldr	r3, [r4, #0]
 8002e7c:	4631      	mov	r1, r6
 8002e7e:	4638      	mov	r0, r7
 8002e80:	eb04 0803 	add.w	r8, r4, r3
 8002e84:	f000 f878 	bl	8002f78 <_sbrk_r>
 8002e88:	4580      	cmp	r8, r0
 8002e8a:	d13a      	bne.n	8002f02 <_malloc_r+0xd2>
 8002e8c:	6821      	ldr	r1, [r4, #0]
 8002e8e:	3503      	adds	r5, #3
 8002e90:	1a6d      	subs	r5, r5, r1
 8002e92:	f025 0503 	bic.w	r5, r5, #3
 8002e96:	3508      	adds	r5, #8
 8002e98:	2d0c      	cmp	r5, #12
 8002e9a:	bf38      	it	cc
 8002e9c:	250c      	movcc	r5, #12
 8002e9e:	4629      	mov	r1, r5
 8002ea0:	4638      	mov	r0, r7
 8002ea2:	f7ff ffa5 	bl	8002df0 <sbrk_aligned>
 8002ea6:	3001      	adds	r0, #1
 8002ea8:	d02b      	beq.n	8002f02 <_malloc_r+0xd2>
 8002eaa:	6823      	ldr	r3, [r4, #0]
 8002eac:	442b      	add	r3, r5
 8002eae:	6023      	str	r3, [r4, #0]
 8002eb0:	e00e      	b.n	8002ed0 <_malloc_r+0xa0>
 8002eb2:	6822      	ldr	r2, [r4, #0]
 8002eb4:	1b52      	subs	r2, r2, r5
 8002eb6:	d41e      	bmi.n	8002ef6 <_malloc_r+0xc6>
 8002eb8:	2a0b      	cmp	r2, #11
 8002eba:	d916      	bls.n	8002eea <_malloc_r+0xba>
 8002ebc:	1961      	adds	r1, r4, r5
 8002ebe:	42a3      	cmp	r3, r4
 8002ec0:	6025      	str	r5, [r4, #0]
 8002ec2:	bf18      	it	ne
 8002ec4:	6059      	strne	r1, [r3, #4]
 8002ec6:	6863      	ldr	r3, [r4, #4]
 8002ec8:	bf08      	it	eq
 8002eca:	6031      	streq	r1, [r6, #0]
 8002ecc:	5162      	str	r2, [r4, r5]
 8002ece:	604b      	str	r3, [r1, #4]
 8002ed0:	4638      	mov	r0, r7
 8002ed2:	f104 060b 	add.w	r6, r4, #11
 8002ed6:	f000 f865 	bl	8002fa4 <__malloc_unlock>
 8002eda:	f026 0607 	bic.w	r6, r6, #7
 8002ede:	1d23      	adds	r3, r4, #4
 8002ee0:	1af2      	subs	r2, r6, r3
 8002ee2:	d0b6      	beq.n	8002e52 <_malloc_r+0x22>
 8002ee4:	1b9b      	subs	r3, r3, r6
 8002ee6:	50a3      	str	r3, [r4, r2]
 8002ee8:	e7b3      	b.n	8002e52 <_malloc_r+0x22>
 8002eea:	6862      	ldr	r2, [r4, #4]
 8002eec:	42a3      	cmp	r3, r4
 8002eee:	bf0c      	ite	eq
 8002ef0:	6032      	streq	r2, [r6, #0]
 8002ef2:	605a      	strne	r2, [r3, #4]
 8002ef4:	e7ec      	b.n	8002ed0 <_malloc_r+0xa0>
 8002ef6:	4623      	mov	r3, r4
 8002ef8:	6864      	ldr	r4, [r4, #4]
 8002efa:	e7b2      	b.n	8002e62 <_malloc_r+0x32>
 8002efc:	4634      	mov	r4, r6
 8002efe:	6876      	ldr	r6, [r6, #4]
 8002f00:	e7b9      	b.n	8002e76 <_malloc_r+0x46>
 8002f02:	230c      	movs	r3, #12
 8002f04:	603b      	str	r3, [r7, #0]
 8002f06:	4638      	mov	r0, r7
 8002f08:	f000 f84c 	bl	8002fa4 <__malloc_unlock>
 8002f0c:	e7a1      	b.n	8002e52 <_malloc_r+0x22>
 8002f0e:	6025      	str	r5, [r4, #0]
 8002f10:	e7de      	b.n	8002ed0 <_malloc_r+0xa0>
 8002f12:	bf00      	nop
 8002f14:	200000b0 	.word	0x200000b0

08002f18 <_realloc_r>:
 8002f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f1c:	4680      	mov	r8, r0
 8002f1e:	4614      	mov	r4, r2
 8002f20:	460e      	mov	r6, r1
 8002f22:	b921      	cbnz	r1, 8002f2e <_realloc_r+0x16>
 8002f24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f28:	4611      	mov	r1, r2
 8002f2a:	f7ff bf81 	b.w	8002e30 <_malloc_r>
 8002f2e:	b92a      	cbnz	r2, 8002f3c <_realloc_r+0x24>
 8002f30:	f7ff ff12 	bl	8002d58 <_free_r>
 8002f34:	4625      	mov	r5, r4
 8002f36:	4628      	mov	r0, r5
 8002f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f3c:	f000 f838 	bl	8002fb0 <_malloc_usable_size_r>
 8002f40:	4284      	cmp	r4, r0
 8002f42:	4607      	mov	r7, r0
 8002f44:	d802      	bhi.n	8002f4c <_realloc_r+0x34>
 8002f46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002f4a:	d812      	bhi.n	8002f72 <_realloc_r+0x5a>
 8002f4c:	4621      	mov	r1, r4
 8002f4e:	4640      	mov	r0, r8
 8002f50:	f7ff ff6e 	bl	8002e30 <_malloc_r>
 8002f54:	4605      	mov	r5, r0
 8002f56:	2800      	cmp	r0, #0
 8002f58:	d0ed      	beq.n	8002f36 <_realloc_r+0x1e>
 8002f5a:	42bc      	cmp	r4, r7
 8002f5c:	4622      	mov	r2, r4
 8002f5e:	4631      	mov	r1, r6
 8002f60:	bf28      	it	cs
 8002f62:	463a      	movcs	r2, r7
 8002f64:	f7ff fed0 	bl	8002d08 <memcpy>
 8002f68:	4631      	mov	r1, r6
 8002f6a:	4640      	mov	r0, r8
 8002f6c:	f7ff fef4 	bl	8002d58 <_free_r>
 8002f70:	e7e1      	b.n	8002f36 <_realloc_r+0x1e>
 8002f72:	4635      	mov	r5, r6
 8002f74:	e7df      	b.n	8002f36 <_realloc_r+0x1e>
	...

08002f78 <_sbrk_r>:
 8002f78:	b538      	push	{r3, r4, r5, lr}
 8002f7a:	4d06      	ldr	r5, [pc, #24]	; (8002f94 <_sbrk_r+0x1c>)
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	4604      	mov	r4, r0
 8002f80:	4608      	mov	r0, r1
 8002f82:	602b      	str	r3, [r5, #0]
 8002f84:	f7fe fb72 	bl	800166c <_sbrk>
 8002f88:	1c43      	adds	r3, r0, #1
 8002f8a:	d102      	bne.n	8002f92 <_sbrk_r+0x1a>
 8002f8c:	682b      	ldr	r3, [r5, #0]
 8002f8e:	b103      	cbz	r3, 8002f92 <_sbrk_r+0x1a>
 8002f90:	6023      	str	r3, [r4, #0]
 8002f92:	bd38      	pop	{r3, r4, r5, pc}
 8002f94:	200000b8 	.word	0x200000b8

08002f98 <__malloc_lock>:
 8002f98:	4801      	ldr	r0, [pc, #4]	; (8002fa0 <__malloc_lock+0x8>)
 8002f9a:	f000 b811 	b.w	8002fc0 <__retarget_lock_acquire_recursive>
 8002f9e:	bf00      	nop
 8002fa0:	200000bc 	.word	0x200000bc

08002fa4 <__malloc_unlock>:
 8002fa4:	4801      	ldr	r0, [pc, #4]	; (8002fac <__malloc_unlock+0x8>)
 8002fa6:	f000 b80c 	b.w	8002fc2 <__retarget_lock_release_recursive>
 8002faa:	bf00      	nop
 8002fac:	200000bc 	.word	0x200000bc

08002fb0 <_malloc_usable_size_r>:
 8002fb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fb4:	1f18      	subs	r0, r3, #4
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	bfbc      	itt	lt
 8002fba:	580b      	ldrlt	r3, [r1, r0]
 8002fbc:	18c0      	addlt	r0, r0, r3
 8002fbe:	4770      	bx	lr

08002fc0 <__retarget_lock_acquire_recursive>:
 8002fc0:	4770      	bx	lr

08002fc2 <__retarget_lock_release_recursive>:
 8002fc2:	4770      	bx	lr

08002fc4 <_init>:
 8002fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fc6:	bf00      	nop
 8002fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fca:	bc08      	pop	{r3}
 8002fcc:	469e      	mov	lr, r3
 8002fce:	4770      	bx	lr

08002fd0 <_fini>:
 8002fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fd2:	bf00      	nop
 8002fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fd6:	bc08      	pop	{r3}
 8002fd8:	469e      	mov	lr, r3
 8002fda:	4770      	bx	lr
