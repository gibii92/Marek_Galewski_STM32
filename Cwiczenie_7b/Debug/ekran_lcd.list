
ekran_lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002310  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080024d8  080024d8  000124d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002500  08002500  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002500  08002500  00012500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002508  08002508  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002508  08002508  00012508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800250c  0800250c  0001250c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002510  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  2000000c  0800251c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  0800251c  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000046a4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001103  00000000  00000000  000246e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004b0  00000000  00000000  000257e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000408  00000000  00000000  00025c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024240  00000000  00000000  000260a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000605b  00000000  00000000  0004a2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de838  00000000  00000000  0005033b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012eb73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001098  00000000  00000000  0012ebc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080024c0 	.word	0x080024c0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080024c0 	.word	0x080024c0

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <MX_GPIO_Init>:
     PB11   ------> USB_OTG_HS_ULPI_D4
     PB14   ------> SPI2_MISO
     PB15   ------> SPI2_MOSI
*/
void MX_GPIO_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b090      	sub	sp, #64	; 0x40
 8000510:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000512:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]
 800051c:	609a      	str	r2, [r3, #8]
 800051e:	60da      	str	r2, [r3, #12]
 8000520:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000522:	4bae      	ldr	r3, [pc, #696]	; (80007dc <MX_GPIO_Init+0x2d0>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4aad      	ldr	r2, [pc, #692]	; (80007dc <MX_GPIO_Init+0x2d0>)
 8000528:	f043 0310 	orr.w	r3, r3, #16
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4bab      	ldr	r3, [pc, #684]	; (80007dc <MX_GPIO_Init+0x2d0>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f003 0310 	and.w	r3, r3, #16
 8000536:	62bb      	str	r3, [r7, #40]	; 0x28
 8000538:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800053a:	4ba8      	ldr	r3, [pc, #672]	; (80007dc <MX_GPIO_Init+0x2d0>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4aa7      	ldr	r2, [pc, #668]	; (80007dc <MX_GPIO_Init+0x2d0>)
 8000540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
 8000546:	4ba5      	ldr	r3, [pc, #660]	; (80007dc <MX_GPIO_Init+0x2d0>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800054e:	627b      	str	r3, [r7, #36]	; 0x24
 8000550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000552:	4ba2      	ldr	r3, [pc, #648]	; (80007dc <MX_GPIO_Init+0x2d0>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4aa1      	ldr	r2, [pc, #644]	; (80007dc <MX_GPIO_Init+0x2d0>)
 8000558:	f043 0302 	orr.w	r3, r3, #2
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
 800055e:	4b9f      	ldr	r3, [pc, #636]	; (80007dc <MX_GPIO_Init+0x2d0>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	f003 0302 	and.w	r3, r3, #2
 8000566:	623b      	str	r3, [r7, #32]
 8000568:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800056a:	4b9c      	ldr	r3, [pc, #624]	; (80007dc <MX_GPIO_Init+0x2d0>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	4a9b      	ldr	r2, [pc, #620]	; (80007dc <MX_GPIO_Init+0x2d0>)
 8000570:	f043 0308 	orr.w	r3, r3, #8
 8000574:	6313      	str	r3, [r2, #48]	; 0x30
 8000576:	4b99      	ldr	r3, [pc, #612]	; (80007dc <MX_GPIO_Init+0x2d0>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	f003 0308 	and.w	r3, r3, #8
 800057e:	61fb      	str	r3, [r7, #28]
 8000580:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000582:	4b96      	ldr	r3, [pc, #600]	; (80007dc <MX_GPIO_Init+0x2d0>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	4a95      	ldr	r2, [pc, #596]	; (80007dc <MX_GPIO_Init+0x2d0>)
 8000588:	f043 0304 	orr.w	r3, r3, #4
 800058c:	6313      	str	r3, [r2, #48]	; 0x30
 800058e:	4b93      	ldr	r3, [pc, #588]	; (80007dc <MX_GPIO_Init+0x2d0>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	f003 0304 	and.w	r3, r3, #4
 8000596:	61bb      	str	r3, [r7, #24]
 8000598:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	4b90      	ldr	r3, [pc, #576]	; (80007dc <MX_GPIO_Init+0x2d0>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	4a8f      	ldr	r2, [pc, #572]	; (80007dc <MX_GPIO_Init+0x2d0>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	6313      	str	r3, [r2, #48]	; 0x30
 80005a6:	4b8d      	ldr	r3, [pc, #564]	; (80007dc <MX_GPIO_Init+0x2d0>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	617b      	str	r3, [r7, #20]
 80005b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80005b2:	4b8a      	ldr	r3, [pc, #552]	; (80007dc <MX_GPIO_Init+0x2d0>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4a89      	ldr	r2, [pc, #548]	; (80007dc <MX_GPIO_Init+0x2d0>)
 80005b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
 80005be:	4b87      	ldr	r3, [pc, #540]	; (80007dc <MX_GPIO_Init+0x2d0>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005c6:	613b      	str	r3, [r7, #16]
 80005c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80005ca:	4b84      	ldr	r3, [pc, #528]	; (80007dc <MX_GPIO_Init+0x2d0>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a83      	ldr	r2, [pc, #524]	; (80007dc <MX_GPIO_Init+0x2d0>)
 80005d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b81      	ldr	r3, [pc, #516]	; (80007dc <MX_GPIO_Init+0x2d0>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80005e2:	4b7e      	ldr	r3, [pc, #504]	; (80007dc <MX_GPIO_Init+0x2d0>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a7d      	ldr	r2, [pc, #500]	; (80007dc <MX_GPIO_Init+0x2d0>)
 80005e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b7b      	ldr	r3, [pc, #492]	; (80007dc <MX_GPIO_Init+0x2d0>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005fa:	4b78      	ldr	r3, [pc, #480]	; (80007dc <MX_GPIO_Init+0x2d0>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a77      	ldr	r2, [pc, #476]	; (80007dc <MX_GPIO_Init+0x2d0>)
 8000600:	f043 0320 	orr.w	r3, r3, #32
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b75      	ldr	r3, [pc, #468]	; (80007dc <MX_GPIO_Init+0x2d0>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0320 	and.w	r3, r3, #32
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000612:	4b72      	ldr	r3, [pc, #456]	; (80007dc <MX_GPIO_Init+0x2d0>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a71      	ldr	r2, [pc, #452]	; (80007dc <MX_GPIO_Init+0x2d0>)
 8000618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b6f      	ldr	r3, [pc, #444]	; (80007dc <MX_GPIO_Init+0x2d0>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	2110      	movs	r1, #16
 800062e:	486c      	ldr	r0, [pc, #432]	; (80007e0 <MX_GPIO_Init+0x2d4>)
 8000630:	f001 faaa 	bl	8001b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000634:	2201      	movs	r2, #1
 8000636:	2120      	movs	r1, #32
 8000638:	486a      	ldr	r0, [pc, #424]	; (80007e4 <MX_GPIO_Init+0x2d8>)
 800063a:	f001 faa5 	bl	8001b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin|LCD_D6_Pin, GPIO_PIN_RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	f241 010d 	movw	r1, #4109	; 0x100d
 8000644:	4868      	ldr	r0, [pc, #416]	; (80007e8 <MX_GPIO_Init+0x2dc>)
 8000646:	f001 fa9f 	bl	8001b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	2108      	movs	r1, #8
 800064e:	4867      	ldr	r0, [pc, #412]	; (80007ec <MX_GPIO_Init+0x2e0>)
 8000650:	f001 fa9a 	bl	8001b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, DCMI_PWR_EN_Pin|LCD_D7_Pin, GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	f44f 5101 	mov.w	r1, #8256	; 0x2040
 800065a:	4865      	ldr	r0, [pc, #404]	; (80007f0 <MX_GPIO_Init+0x2e4>)
 800065c:	f001 fa94 	bl	8001b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RS_Pin|LCD_RW_Pin, GPIO_PIN_RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	21c0      	movs	r1, #192	; 0xc0
 8000664:	4863      	ldr	r0, [pc, #396]	; (80007f4 <MX_GPIO_Init+0x2e8>)
 8000666:	f001 fa8f 	bl	8001b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LCD_D5_Pin|LCD_E_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	21c8      	movs	r1, #200	; 0xc8
 800066e:	4862      	ldr	r0, [pc, #392]	; (80007f8 <MX_GPIO_Init+0x2ec>)
 8000670:	f001 fa8a 	bl	8001b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B0_Pin;
 8000674:	2310      	movs	r3, #16
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000678:	2302      	movs	r3, #2
 800067a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000680:	2300      	movs	r3, #0
 8000682:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000684:	230e      	movs	r3, #14
 8000686:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8000688:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800068c:	4619      	mov	r1, r3
 800068e:	485b      	ldr	r0, [pc, #364]	; (80007fc <MX_GPIO_Init+0x2f0>)
 8000690:	f001 f8b6 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8000694:	2308      	movs	r3, #8
 8000696:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000698:	2300      	movs	r3, #0
 800069a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006a4:	4619      	mov	r1, r3
 80006a6:	4855      	ldr	r0, [pc, #340]	; (80007fc <MX_GPIO_Init+0x2f0>)
 80006a8:	f001 f8aa 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80006ac:	2304      	movs	r3, #4
 80006ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b0:	2302      	movs	r3, #2
 80006b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006b8:	2303      	movs	r3, #3
 80006ba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80006bc:	2309      	movs	r3, #9
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80006c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006c4:	4619      	mov	r1, r3
 80006c6:	484d      	ldr	r0, [pc, #308]	; (80007fc <MX_GPIO_Init+0x2f0>)
 80006c8:	f001 f89a 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 80006cc:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80006d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d2:	2302      	movs	r3, #2
 80006d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006da:	2303      	movs	r3, #3
 80006dc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006de:	230b      	movs	r3, #11
 80006e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80006e6:	4619      	mov	r1, r3
 80006e8:	4843      	ldr	r0, [pc, #268]	; (80007f8 <MX_GPIO_Init+0x2ec>)
 80006ea:	f001 f889 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80006ee:	f64f 7383 	movw	r3, #65411	; 0xff83
 80006f2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f4:	2302      	movs	r3, #2
 80006f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006fc:	2303      	movs	r3, #3
 80006fe:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000700:	230c      	movs	r3, #12
 8000702:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000704:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000708:	4619      	mov	r1, r3
 800070a:	483c      	ldr	r0, [pc, #240]	; (80007fc <MX_GPIO_Init+0x2f0>)
 800070c:	f001 f878 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000710:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000714:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000716:	2312      	movs	r3, #18
 8000718:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	2300      	movs	r3, #0
 800071c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071e:	2300      	movs	r3, #0
 8000720:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000722:	2304      	movs	r3, #4
 8000724:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000726:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800072a:	4619      	mov	r1, r3
 800072c:	482c      	ldr	r0, [pc, #176]	; (80007e0 <MX_GPIO_Init+0x2d4>)
 800072e:	f001 f867 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000732:	f643 4323 	movw	r3, #15395	; 0x3c23
 8000736:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000738:	2302      	movs	r3, #2
 800073a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000740:	2303      	movs	r3, #3
 8000742:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000744:	230a      	movs	r3, #10
 8000746:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000748:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800074c:	4619      	mov	r1, r3
 800074e:	4824      	ldr	r0, [pc, #144]	; (80007e0 <MX_GPIO_Init+0x2d4>)
 8000750:	f001 f856 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_D4_Pin;
 8000754:	2310      	movs	r3, #16
 8000756:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000758:	2301      	movs	r3, #1
 800075a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000760:	2301      	movs	r3, #1
 8000762:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_D4_GPIO_Port, &GPIO_InitStruct);
 8000764:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000768:	4619      	mov	r1, r3
 800076a:	481d      	ldr	r0, [pc, #116]	; (80007e0 <MX_GPIO_Init+0x2d4>)
 800076c:	f001 f848 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8000770:	2380      	movs	r3, #128	; 0x80
 8000772:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000774:	2302      	movs	r3, #2
 8000776:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077c:	2300      	movs	r3, #0
 800077e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8000780:	2308      	movs	r3, #8
 8000782:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8000784:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000788:	4619      	mov	r1, r3
 800078a:	4816      	ldr	r0, [pc, #88]	; (80007e4 <MX_GPIO_Init+0x2d8>)
 800078c:	f001 f838 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8000790:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000794:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000796:	2302      	movs	r3, #2
 8000798:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079e:	2303      	movs	r3, #3
 80007a0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80007a2:	230c      	movs	r3, #12
 80007a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007aa:	4619      	mov	r1, r3
 80007ac:	4811      	ldr	r0, [pc, #68]	; (80007f4 <MX_GPIO_Init+0x2e8>)
 80007ae:	f001 f827 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80007b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b8:	2302      	movs	r3, #2
 80007ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2300      	movs	r3, #0
 80007c2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80007c4:	2301      	movs	r3, #1
 80007c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80007c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007cc:	4619      	mov	r1, r3
 80007ce:	480c      	ldr	r0, [pc, #48]	; (8000800 <MX_GPIO_Init+0x2f4>)
 80007d0:	f001 f816 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 80007d4:	2360      	movs	r3, #96	; 0x60
 80007d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d8:	2302      	movs	r3, #2
 80007da:	e013      	b.n	8000804 <MX_GPIO_Init+0x2f8>
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40020400 	.word	0x40020400
 80007e4:	40020c00 	.word	0x40020c00
 80007e8:	40022000 	.word	0x40022000
 80007ec:	40022800 	.word	0x40022800
 80007f0:	40021c00 	.word	0x40021c00
 80007f4:	40020800 	.word	0x40020800
 80007f8:	40021800 	.word	0x40021800
 80007fc:	40021000 	.word	0x40021000
 8000800:	40020000 	.word	0x40020000
 8000804:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800080e:	230d      	movs	r3, #13
 8000810:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000812:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000816:	4619      	mov	r1, r3
 8000818:	48bb      	ldr	r0, [pc, #748]	; (8000b08 <MX_GPIO_Init+0x5fc>)
 800081a:	f000 fff1 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 800081e:	2380      	movs	r3, #128	; 0x80
 8000820:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000822:	2302      	movs	r3, #2
 8000824:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800082e:	2307      	movs	r3, #7
 8000830:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000836:	4619      	mov	r1, r3
 8000838:	48b4      	ldr	r0, [pc, #720]	; (8000b0c <MX_GPIO_Init+0x600>)
 800083a:	f000 ffe1 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800083e:	2340      	movs	r3, #64	; 0x40
 8000840:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000842:	2302      	movs	r3, #2
 8000844:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084a:	2303      	movs	r3, #3
 800084c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800084e:	230a      	movs	r3, #10
 8000850:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000852:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000856:	4619      	mov	r1, r3
 8000858:	48ac      	ldr	r0, [pc, #688]	; (8000b0c <MX_GPIO_Init+0x600>)
 800085a:	f000 ffd1 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800085e:	f248 1333 	movw	r3, #33075	; 0x8133
 8000862:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000864:	2302      	movs	r3, #2
 8000866:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086c:	2303      	movs	r3, #3
 800086e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000870:	230c      	movs	r3, #12
 8000872:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000874:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000878:	4619      	mov	r1, r3
 800087a:	48a5      	ldr	r0, [pc, #660]	; (8000b10 <MX_GPIO_Init+0x604>)
 800087c:	f000 ffc0 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin PJPin
                           PJPin PJPin PJPin */
  GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8000880:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8000884:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000892:	230e      	movs	r3, #14
 8000894:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000896:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800089a:	4619      	mov	r1, r3
 800089c:	489d      	ldr	r0, [pc, #628]	; (8000b14 <MX_GPIO_Init+0x608>)
 800089e:	f000 ffaf 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80008a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a8:	2300      	movs	r3, #0
 80008aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008b4:	4619      	mov	r1, r3
 80008b6:	4897      	ldr	r0, [pc, #604]	; (8000b14 <MX_GPIO_Init+0x608>)
 80008b8:	f000 ffa2 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80008bc:	2340      	movs	r3, #64	; 0x40
 80008be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008c0:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80008c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008ce:	4619      	mov	r1, r3
 80008d0:	4891      	ldr	r0, [pc, #580]	; (8000b18 <MX_GPIO_Init+0x60c>)
 80008d2:	f000 ff95 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80008d6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80008da:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	2302      	movs	r3, #2
 80008de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e4:	2303      	movs	r3, #3
 80008e6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008e8:	230c      	movs	r3, #12
 80008ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008f0:	4619      	mov	r1, r3
 80008f2:	4889      	ldr	r0, [pc, #548]	; (8000b18 <MX_GPIO_Init+0x60c>)
 80008f4:	f000 ff84 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80008f8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80008fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fe:	2302      	movs	r3, #2
 8000900:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000906:	2303      	movs	r3, #3
 8000908:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800090a:	230a      	movs	r3, #10
 800090c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000912:	4619      	mov	r1, r3
 8000914:	4881      	ldr	r0, [pc, #516]	; (8000b1c <MX_GPIO_Init+0x610>)
 8000916:	f000 ff73 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800091a:	23f0      	movs	r3, #240	; 0xf0
 800091c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800092a:	230a      	movs	r3, #10
 800092c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800092e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000932:	4619      	mov	r1, r3
 8000934:	487a      	ldr	r0, [pc, #488]	; (8000b20 <MX_GPIO_Init+0x614>)
 8000936:	f000 ff63 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin PKPin PKPin
                           PKPin PKPin PKPin */
  GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800093a:	23f7      	movs	r3, #247	; 0xf7
 800093c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800094a:	230e      	movs	r3, #14
 800094c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800094e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000952:	4619      	mov	r1, r3
 8000954:	4873      	ldr	r0, [pc, #460]	; (8000b24 <MX_GPIO_Init+0x618>)
 8000956:	f000 ff53 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_B4_Pin;
 800095a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800095e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800096c:	2309      	movs	r3, #9
 800096e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000974:	4619      	mov	r1, r3
 8000976:	4866      	ldr	r0, [pc, #408]	; (8000b10 <MX_GPIO_Init+0x604>)
 8000978:	f000 ff42 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 800097c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000980:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800098e:	230a      	movs	r3, #10
 8000990:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8000992:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000996:	4619      	mov	r1, r3
 8000998:	485d      	ldr	r0, [pc, #372]	; (8000b10 <MX_GPIO_Init+0x604>)
 800099a:	f000 ff31 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800099e:	2320      	movs	r3, #32
 80009a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009b2:	4619      	mov	r1, r3
 80009b4:	4858      	ldr	r0, [pc, #352]	; (8000b18 <MX_GPIO_Init+0x60c>)
 80009b6:	f000 ff23 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80009ba:	2308      	movs	r3, #8
 80009bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	2302      	movs	r3, #2
 80009c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80009ca:	230d      	movs	r3, #13
 80009cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009d2:	4619      	mov	r1, r3
 80009d4:	4850      	ldr	r0, [pc, #320]	; (8000b18 <MX_GPIO_Init+0x60c>)
 80009d6:	f000 ff13 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80009da:	f241 030c 	movw	r3, #4108	; 0x100c
 80009de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e0:	2301      	movs	r3, #1
 80009e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	2300      	movs	r3, #0
 80009ea:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80009ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009f0:	4619      	mov	r1, r3
 80009f2:	484b      	ldr	r0, [pc, #300]	; (8000b20 <MX_GPIO_Init+0x614>)
 80009f4:	f000 ff04 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80009f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fe:	2300      	movs	r3, #0
 8000a00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4846      	ldr	r0, [pc, #280]	; (8000b28 <MX_GPIO_Init+0x61c>)
 8000a0e:	f000 fef7 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000a12:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000a16:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a20:	2303      	movs	r3, #3
 8000a22:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a24:	230c      	movs	r3, #12
 8000a26:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	483f      	ldr	r0, [pc, #252]	; (8000b2c <MX_GPIO_Init+0x620>)
 8000a30:	f000 fee6 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8000a34:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8000a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a46:	230e      	movs	r3, #14
 8000a48:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4833      	ldr	r0, [pc, #204]	; (8000b20 <MX_GPIO_Init+0x614>)
 8000a52:	f000 fed5 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8000a56:	2308      	movs	r3, #8
 8000a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2300      	movs	r3, #0
 8000a64:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	482d      	ldr	r0, [pc, #180]	; (8000b24 <MX_GPIO_Init+0x618>)
 8000a6e:	f000 fec7 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8000a72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2300      	movs	r3, #0
 8000a82:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000a84:	230d      	movs	r3, #13
 8000a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8000a88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4820      	ldr	r0, [pc, #128]	; (8000b10 <MX_GPIO_Init+0x604>)
 8000a90:	f000 feb6 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a94:	2310      	movs	r3, #16
 8000a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	481c      	ldr	r0, [pc, #112]	; (8000b18 <MX_GPIO_Init+0x60c>)
 8000aa8:	f000 feaa 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8000aac:	2304      	movs	r3, #4
 8000aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000abc:	230c      	movs	r3, #12
 8000abe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8000ac0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4814      	ldr	r0, [pc, #80]	; (8000b18 <MX_GPIO_Init+0x60c>)
 8000ac8:	f000 fe9a 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8000acc:	f248 0304 	movw	r3, #32772	; 0x8004
 8000ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ada:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4813      	ldr	r0, [pc, #76]	; (8000b30 <MX_GPIO_Init+0x624>)
 8000ae2:	f000 fe8d 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	2302      	movs	r3, #2
 8000aec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af2:	2300      	movs	r3, #0
 8000af4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000af6:	2305      	movs	r3, #5
 8000af8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000afe:	4619      	mov	r1, r3
 8000b00:	4807      	ldr	r0, [pc, #28]	; (8000b20 <MX_GPIO_Init+0x614>)
 8000b02:	f000 fe7d 	bl	8001800 <HAL_GPIO_Init>
 8000b06:	e015      	b.n	8000b34 <MX_GPIO_Init+0x628>
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	40020400 	.word	0x40020400
 8000b10:	40021800 	.word	0x40021800
 8000b14:	40022400 	.word	0x40022400
 8000b18:	40020c00 	.word	0x40020c00
 8000b1c:	40020000 	.word	0x40020000
 8000b20:	40022000 	.word	0x40022000
 8000b24:	40022800 	.word	0x40022800
 8000b28:	40020800 	.word	0x40020800
 8000b2c:	40021400 	.word	0x40021400
 8000b30:	40021c00 	.word	0x40021c00

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8000b34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	48ba      	ldr	r0, [pc, #744]	; (8000e38 <MX_GPIO_Init+0x92c>)
 8000b4e:	f000 fe57 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8000b52:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8000b56:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b64:	230d      	movs	r3, #13
 8000b66:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	48b2      	ldr	r0, [pc, #712]	; (8000e38 <MX_GPIO_Init+0x92c>)
 8000b70:	f000 fe46 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_D6_Pin;
 8000b74:	2301      	movs	r3, #1
 8000b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000b80:	2301      	movs	r3, #1
 8000b82:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_D6_GPIO_Port, &GPIO_InitStruct);
 8000b84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b88:	4619      	mov	r1, r3
 8000b8a:	48ac      	ldr	r0, [pc, #688]	; (8000e3c <MX_GPIO_Init+0x930>)
 8000b8c:	f000 fe38 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000b90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ba2:	2307      	movs	r3, #7
 8000ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000ba6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000baa:	4619      	mov	r1, r3
 8000bac:	48a4      	ldr	r0, [pc, #656]	; (8000e40 <MX_GPIO_Init+0x934>)
 8000bae:	f000 fe27 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8000bb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bcc:	4619      	mov	r1, r3
 8000bce:	489c      	ldr	r0, [pc, #624]	; (8000e40 <MX_GPIO_Init+0x934>)
 8000bd0:	f000 fe16 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8000bd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bda:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bde:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000be4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000be8:	4619      	mov	r1, r3
 8000bea:	4894      	ldr	r0, [pc, #592]	; (8000e3c <MX_GPIO_Init+0x930>)
 8000bec:	f000 fe08 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_RW_Pin;
 8000bf0:	23c0      	movs	r3, #192	; 0xc0
 8000bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c04:	4619      	mov	r1, r3
 8000c06:	488f      	ldr	r0, [pc, #572]	; (8000e44 <MX_GPIO_Init+0x938>)
 8000c08:	f000 fdfa 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000c0c:	2310      	movs	r3, #16
 8000c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c10:	2302      	movs	r3, #2
 8000c12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000c1c:	230a      	movs	r3, #10
 8000c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000c20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c24:	4619      	mov	r1, r3
 8000c26:	4884      	ldr	r0, [pc, #528]	; (8000e38 <MX_GPIO_Init+0x92c>)
 8000c28:	f000 fdea 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000c2c:	2328      	movs	r3, #40	; 0x28
 8000c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c30:	2302      	movs	r3, #2
 8000c32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c3c:	230c      	movs	r3, #12
 8000c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c44:	4619      	mov	r1, r3
 8000c46:	487c      	ldr	r0, [pc, #496]	; (8000e38 <MX_GPIO_Init+0x92c>)
 8000c48:	f000 fdda 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LCD_D5_Pin|LCD_E_Pin;
 8000c4c:	23c0      	movs	r3, #192	; 0xc0
 8000c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c50:	2301      	movs	r3, #1
 8000c52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c60:	4619      	mov	r1, r3
 8000c62:	4879      	ldr	r0, [pc, #484]	; (8000e48 <MX_GPIO_Init+0x93c>)
 8000c64:	f000 fdcc 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin */
  GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8000c68:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ARDUINO_A3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4873      	ldr	r0, [pc, #460]	; (8000e4c <MX_GPIO_Init+0x940>)
 8000c7e:	f000 fdbf 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000c82:	2308      	movs	r3, #8
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c92:	230c      	movs	r3, #12
 8000c94:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4869      	ldr	r0, [pc, #420]	; (8000e44 <MX_GPIO_Init+0x938>)
 8000c9e:	f000 fdaf 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8000ca2:	2305      	movs	r3, #5
 8000ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000cb2:	230a      	movs	r3, #10
 8000cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4861      	ldr	r0, [pc, #388]	; (8000e44 <MX_GPIO_Init+0x938>)
 8000cbe:	f000 fd9f 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000cc2:	2332      	movs	r3, #50	; 0x32
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cd2:	230b      	movs	r3, #11
 8000cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4859      	ldr	r0, [pc, #356]	; (8000e44 <MX_GPIO_Init+0x938>)
 8000cde:	f000 fd8f 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ce2:	2304      	movs	r3, #4
 8000ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000cf2:	2309      	movs	r3, #9
 8000cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4854      	ldr	r0, [pc, #336]	; (8000e50 <MX_GPIO_Init+0x944>)
 8000cfe:	f000 fd7f 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8000d02:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d10:	2303      	movs	r3, #3
 8000d12:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d14:	2309      	movs	r3, #9
 8000d16:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	484d      	ldr	r0, [pc, #308]	; (8000e54 <MX_GPIO_Init+0x948>)
 8000d20:	f000 fd6e 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8000d24:	2308      	movs	r3, #8
 8000d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d30:	2300      	movs	r3, #0
 8000d32:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8000d34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4843      	ldr	r0, [pc, #268]	; (8000e48 <MX_GPIO_Init+0x93c>)
 8000d3c:	f000 fd60 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8000d40:	2304      	movs	r3, #4
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d44:	2300      	movs	r3, #0
 8000d46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8000d4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d50:	4619      	mov	r1, r3
 8000d52:	483d      	ldr	r0, [pc, #244]	; (8000e48 <MX_GPIO_Init+0x93c>)
 8000d54:	f000 fd54 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d58:	2386      	movs	r3, #134	; 0x86
 8000d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d64:	2303      	movs	r3, #3
 8000d66:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d68:	230b      	movs	r3, #11
 8000d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d70:	4619      	mov	r1, r3
 8000d72:	4833      	ldr	r0, [pc, #204]	; (8000e40 <MX_GPIO_Init+0x934>)
 8000d74:	f000 fd44 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8000d84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d88:	4619      	mov	r1, r3
 8000d8a:	482d      	ldr	r0, [pc, #180]	; (8000e40 <MX_GPIO_Init+0x934>)
 8000d8c:	f000 fd38 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8000d90:	2350      	movs	r3, #80	; 0x50
 8000d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000da0:	230d      	movs	r3, #13
 8000da2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000da8:	4619      	mov	r1, r3
 8000daa:	4825      	ldr	r0, [pc, #148]	; (8000e40 <MX_GPIO_Init+0x934>)
 8000dac:	f000 fd28 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8000db0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000db6:	2312      	movs	r3, #18
 8000db8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000dc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dca:	4619      	mov	r1, r3
 8000dcc:	481a      	ldr	r0, [pc, #104]	; (8000e38 <MX_GPIO_Init+0x92c>)
 8000dce:	f000 fd17 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000dd2:	2328      	movs	r3, #40	; 0x28
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dde:	2303      	movs	r3, #3
 8000de0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000de2:	230a      	movs	r3, #10
 8000de4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dea:	4619      	mov	r1, r3
 8000dec:	4814      	ldr	r0, [pc, #80]	; (8000e40 <MX_GPIO_Init+0x934>)
 8000dee:	f000 fd07 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_D7_Pin;
 8000df2:	2340      	movs	r3, #64	; 0x40
 8000df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df6:	2301      	movs	r3, #1
 8000df8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_D7_GPIO_Port, &GPIO_InitStruct);
 8000e02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e06:	4619      	mov	r1, r3
 8000e08:	480b      	ldr	r0, [pc, #44]	; (8000e38 <MX_GPIO_Init+0x92c>)
 8000e0a:	f000 fcf9 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000e0e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e20:	2305      	movs	r3, #5
 8000e22:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4809      	ldr	r0, [pc, #36]	; (8000e50 <MX_GPIO_Init+0x944>)
 8000e2c:	f000 fce8 	bl	8001800 <HAL_GPIO_Init>

}
 8000e30:	bf00      	nop
 8000e32:	3740      	adds	r7, #64	; 0x40
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40021c00 	.word	0x40021c00
 8000e3c:	40022000 	.word	0x40022000
 8000e40:	40020000 	.word	0x40020000
 8000e44:	40020800 	.word	0x40020800
 8000e48:	40021800 	.word	0x40021800
 8000e4c:	40021400 	.word	0x40021400
 8000e50:	40020400 	.word	0x40020400
 8000e54:	40020c00 	.word	0x40020c00

08000e58 <LCD_WriteNibble>:
#include "lcd.h"
#include "gpio.h"
GPIO_InitTypeDef GPIO_InitStruct;
//-----------------------------------------------------------------------------
void LCD_WriteNibble(char nibbleToWrite)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8000e62:	2201      	movs	r2, #1
 8000e64:	2140      	movs	r1, #64	; 0x40
 8000e66:	4818      	ldr	r0, [pc, #96]	; (8000ec8 <LCD_WriteNibble+0x70>)
 8000e68:	f000 fe8e 	bl	8001b88 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (GPIO_PinState)(nibbleToWrite & 0x01));
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	461a      	mov	r2, r3
 8000e76:	2110      	movs	r1, #16
 8000e78:	4814      	ldr	r0, [pc, #80]	; (8000ecc <LCD_WriteNibble+0x74>)
 8000e7a:	f000 fe85 	bl	8001b88 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (GPIO_PinState)(nibbleToWrite & 0x02));
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	461a      	mov	r2, r3
 8000e88:	2180      	movs	r1, #128	; 0x80
 8000e8a:	480f      	ldr	r0, [pc, #60]	; (8000ec8 <LCD_WriteNibble+0x70>)
 8000e8c:	f000 fe7c 	bl	8001b88 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (GPIO_PinState)(nibbleToWrite & 0x04));
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	f003 0304 	and.w	r3, r3, #4
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	461a      	mov	r2, r3
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	480c      	ldr	r0, [pc, #48]	; (8000ed0 <LCD_WriteNibble+0x78>)
 8000e9e:	f000 fe73 	bl	8001b88 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (GPIO_PinState)(nibbleToWrite & 0x08));
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	f003 0308 	and.w	r3, r3, #8
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	461a      	mov	r2, r3
 8000eac:	2140      	movs	r1, #64	; 0x40
 8000eae:	4809      	ldr	r0, [pc, #36]	; (8000ed4 <LCD_WriteNibble+0x7c>)
 8000eb0:	f000 fe6a 	bl	8001b88 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2140      	movs	r1, #64	; 0x40
 8000eb8:	4803      	ldr	r0, [pc, #12]	; (8000ec8 <LCD_WriteNibble+0x70>)
 8000eba:	f000 fe65 	bl	8001b88 <HAL_GPIO_WritePin>
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40021800 	.word	0x40021800
 8000ecc:	40020400 	.word	0x40020400
 8000ed0:	40022000 	.word	0x40022000
 8000ed4:	40021c00 	.word	0x40021c00

08000ed8 <LCD_ReadNibble>:
//-----------------------------------------------------------------------------
unsigned char LCD_ReadNibble(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
  unsigned char tmp = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	2140      	movs	r1, #64	; 0x40
 8000ee6:	481e      	ldr	r0, [pc, #120]	; (8000f60 <LCD_ReadNibble+0x88>)
 8000ee8:	f000 fe4e 	bl	8001b88 <HAL_GPIO_WritePin>
  tmp |= (HAL_GPIO_ReadPin(LCD_D4_GPIO_Port, LCD_D4_Pin) << 0);
 8000eec:	2110      	movs	r1, #16
 8000eee:	481d      	ldr	r0, [pc, #116]	; (8000f64 <LCD_ReadNibble+0x8c>)
 8000ef0:	f000 fe32 	bl	8001b58 <HAL_GPIO_ReadPin>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	b25a      	sxtb	r2, r3
 8000ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	b25b      	sxtb	r3, r3
 8000f00:	71fb      	strb	r3, [r7, #7]
  tmp |= (HAL_GPIO_ReadPin(LCD_D5_GPIO_Port, LCD_D5_Pin) << 1);
 8000f02:	2180      	movs	r1, #128	; 0x80
 8000f04:	4816      	ldr	r0, [pc, #88]	; (8000f60 <LCD_ReadNibble+0x88>)
 8000f06:	f000 fe27 	bl	8001b58 <HAL_GPIO_ReadPin>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	b25a      	sxtb	r2, r3
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	b25b      	sxtb	r3, r3
 8000f18:	71fb      	strb	r3, [r7, #7]
  tmp |= (HAL_GPIO_ReadPin(LCD_D6_GPIO_Port, LCD_D6_Pin) << 2);
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	4812      	ldr	r0, [pc, #72]	; (8000f68 <LCD_ReadNibble+0x90>)
 8000f1e:	f000 fe1b 	bl	8001b58 <HAL_GPIO_ReadPin>
 8000f22:	4603      	mov	r3, r0
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	b25a      	sxtb	r2, r3
 8000f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	b25b      	sxtb	r3, r3
 8000f30:	71fb      	strb	r3, [r7, #7]
  tmp |= (HAL_GPIO_ReadPin(LCD_D7_GPIO_Port, LCD_D7_Pin) << 3);
 8000f32:	2140      	movs	r1, #64	; 0x40
 8000f34:	480d      	ldr	r0, [pc, #52]	; (8000f6c <LCD_ReadNibble+0x94>)
 8000f36:	f000 fe0f 	bl	8001b58 <HAL_GPIO_ReadPin>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	b25a      	sxtb	r2, r3
 8000f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	b25b      	sxtb	r3, r3
 8000f48:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2140      	movs	r1, #64	; 0x40
 8000f4e:	4804      	ldr	r0, [pc, #16]	; (8000f60 <LCD_ReadNibble+0x88>)
 8000f50:	f000 fe1a 	bl	8001b88 <HAL_GPIO_WritePin>
  return tmp;
 8000f54:	79fb      	ldrb	r3, [r7, #7]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40021800 	.word	0x40021800
 8000f64:	40020400 	.word	0x40020400
 8000f68:	40022000 	.word	0x40022000
 8000f6c:	40021c00 	.word	0x40021c00

08000f70 <LCD_SetDataPinInput>:
//-----------------------------------------------------------------------------
void LCD_SetDataPinInput(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Pin =  LCD_D4_Pin;
 8000f74:	4b20      	ldr	r3, [pc, #128]	; (8000ff8 <LCD_SetDataPinInput+0x88>)
 8000f76:	2210      	movs	r2, #16
 8000f78:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f7a:	4b1f      	ldr	r3, [pc, #124]	; (8000ff8 <LCD_SetDataPinInput+0x88>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f80:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <LCD_SetDataPinInput+0x88>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000f86:	4b1c      	ldr	r3, [pc, #112]	; (8000ff8 <LCD_SetDataPinInput+0x88>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LCD_D4_GPIO_Port, &GPIO_InitStruct);
 8000f8c:	491a      	ldr	r1, [pc, #104]	; (8000ff8 <LCD_SetDataPinInput+0x88>)
 8000f8e:	481b      	ldr	r0, [pc, #108]	; (8000ffc <LCD_SetDataPinInput+0x8c>)
 8000f90:	f000 fc36 	bl	8001800 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin =  LCD_D5_Pin;
 8000f94:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <LCD_SetDataPinInput+0x88>)
 8000f96:	2280      	movs	r2, #128	; 0x80
 8000f98:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9a:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <LCD_SetDataPinInput+0x88>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fa0:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <LCD_SetDataPinInput+0x88>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000fa6:	4b14      	ldr	r3, [pc, #80]	; (8000ff8 <LCD_SetDataPinInput+0x88>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LCD_D5_GPIO_Port, &GPIO_InitStruct);
 8000fac:	4912      	ldr	r1, [pc, #72]	; (8000ff8 <LCD_SetDataPinInput+0x88>)
 8000fae:	4814      	ldr	r0, [pc, #80]	; (8001000 <LCD_SetDataPinInput+0x90>)
 8000fb0:	f000 fc26 	bl	8001800 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin =  LCD_D6_Pin;
 8000fb4:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <LCD_SetDataPinInput+0x88>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fba:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <LCD_SetDataPinInput+0x88>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fc0:	4b0d      	ldr	r3, [pc, #52]	; (8000ff8 <LCD_SetDataPinInput+0x88>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <LCD_SetDataPinInput+0x88>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LCD_D6_GPIO_Port, &GPIO_InitStruct);
 8000fcc:	490a      	ldr	r1, [pc, #40]	; (8000ff8 <LCD_SetDataPinInput+0x88>)
 8000fce:	480d      	ldr	r0, [pc, #52]	; (8001004 <LCD_SetDataPinInput+0x94>)
 8000fd0:	f000 fc16 	bl	8001800 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin =  LCD_D7_Pin;
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <LCD_SetDataPinInput+0x88>)
 8000fd6:	2240      	movs	r2, #64	; 0x40
 8000fd8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fda:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <LCD_SetDataPinInput+0x88>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <LCD_SetDataPinInput+0x88>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000fe6:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <LCD_SetDataPinInput+0x88>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LCD_D7_GPIO_Port, &GPIO_InitStruct);
 8000fec:	4902      	ldr	r1, [pc, #8]	; (8000ff8 <LCD_SetDataPinInput+0x88>)
 8000fee:	4806      	ldr	r0, [pc, #24]	; (8001008 <LCD_SetDataPinInput+0x98>)
 8000ff0:	f000 fc06 	bl	8001800 <HAL_GPIO_Init>

}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000028 	.word	0x20000028
 8000ffc:	40020400 	.word	0x40020400
 8001000:	40021800 	.word	0x40021800
 8001004:	40022000 	.word	0x40022000
 8001008:	40021c00 	.word	0x40021c00

0800100c <LCD_SetDataPinOutput>:
//-----------------------------------------------------------------------------
void LCD_SetDataPinOutput(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Pin = LCD_D4_Pin;
 8001010:	4b20      	ldr	r3, [pc, #128]	; (8001094 <LCD_SetDataPinOutput+0x88>)
 8001012:	2210      	movs	r2, #16
 8001014:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001016:	4b1f      	ldr	r3, [pc, #124]	; (8001094 <LCD_SetDataPinOutput+0x88>)
 8001018:	2201      	movs	r2, #1
 800101a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <LCD_SetDataPinOutput+0x88>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001022:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <LCD_SetDataPinOutput+0x88>)
 8001024:	2201      	movs	r2, #1
 8001026:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LCD_D4_GPIO_Port, &GPIO_InitStruct);
 8001028:	491a      	ldr	r1, [pc, #104]	; (8001094 <LCD_SetDataPinOutput+0x88>)
 800102a:	481b      	ldr	r0, [pc, #108]	; (8001098 <LCD_SetDataPinOutput+0x8c>)
 800102c:	f000 fbe8 	bl	8001800 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_D5_Pin;
 8001030:	4b18      	ldr	r3, [pc, #96]	; (8001094 <LCD_SetDataPinOutput+0x88>)
 8001032:	2280      	movs	r2, #128	; 0x80
 8001034:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001036:	4b17      	ldr	r3, [pc, #92]	; (8001094 <LCD_SetDataPinOutput+0x88>)
 8001038:	2201      	movs	r2, #1
 800103a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	4b15      	ldr	r3, [pc, #84]	; (8001094 <LCD_SetDataPinOutput+0x88>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001042:	4b14      	ldr	r3, [pc, #80]	; (8001094 <LCD_SetDataPinOutput+0x88>)
 8001044:	2201      	movs	r2, #1
 8001046:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LCD_D5_GPIO_Port, &GPIO_InitStruct);
 8001048:	4912      	ldr	r1, [pc, #72]	; (8001094 <LCD_SetDataPinOutput+0x88>)
 800104a:	4814      	ldr	r0, [pc, #80]	; (800109c <LCD_SetDataPinOutput+0x90>)
 800104c:	f000 fbd8 	bl	8001800 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_D6_Pin;
 8001050:	4b10      	ldr	r3, [pc, #64]	; (8001094 <LCD_SetDataPinOutput+0x88>)
 8001052:	2201      	movs	r2, #1
 8001054:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <LCD_SetDataPinOutput+0x88>)
 8001058:	2201      	movs	r2, #1
 800105a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <LCD_SetDataPinOutput+0x88>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001062:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <LCD_SetDataPinOutput+0x88>)
 8001064:	2201      	movs	r2, #1
 8001066:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LCD_D6_GPIO_Port, &GPIO_InitStruct);
 8001068:	490a      	ldr	r1, [pc, #40]	; (8001094 <LCD_SetDataPinOutput+0x88>)
 800106a:	480d      	ldr	r0, [pc, #52]	; (80010a0 <LCD_SetDataPinOutput+0x94>)
 800106c:	f000 fbc8 	bl	8001800 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_D7_Pin;
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <LCD_SetDataPinOutput+0x88>)
 8001072:	2240      	movs	r2, #64	; 0x40
 8001074:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001076:	4b07      	ldr	r3, [pc, #28]	; (8001094 <LCD_SetDataPinOutput+0x88>)
 8001078:	2201      	movs	r2, #1
 800107a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <LCD_SetDataPinOutput+0x88>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001082:	4b04      	ldr	r3, [pc, #16]	; (8001094 <LCD_SetDataPinOutput+0x88>)
 8001084:	2201      	movs	r2, #1
 8001086:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LCD_D7_GPIO_Port, &GPIO_InitStruct);
 8001088:	4902      	ldr	r1, [pc, #8]	; (8001094 <LCD_SetDataPinOutput+0x88>)
 800108a:	4806      	ldr	r0, [pc, #24]	; (80010a4 <LCD_SetDataPinOutput+0x98>)
 800108c:	f000 fbb8 	bl	8001800 <HAL_GPIO_Init>

}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000028 	.word	0x20000028
 8001098:	40020400 	.word	0x40020400
 800109c:	40021800 	.word	0x40021800
 80010a0:	40022000 	.word	0x40022000
 80010a4:	40021c00 	.word	0x40021c00

080010a8 <LCD_ReadStatus>:
//-----------------------------------------------------------------------------
unsigned char LCD_ReadStatus(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
  unsigned char status = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	71fb      	strb	r3, [r7, #7]

  LCD_SetDataPinInput();
 80010b2:	f7ff ff5d 	bl	8000f70 <LCD_SetDataPinInput>

  HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_SET);
 80010b6:	2201      	movs	r2, #1
 80010b8:	2140      	movs	r1, #64	; 0x40
 80010ba:	4810      	ldr	r0, [pc, #64]	; (80010fc <LCD_ReadStatus+0x54>)
 80010bc:	f000 fd64 	bl	8001b88 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80010c0:	2200      	movs	r2, #0
 80010c2:	2180      	movs	r1, #128	; 0x80
 80010c4:	480d      	ldr	r0, [pc, #52]	; (80010fc <LCD_ReadStatus+0x54>)
 80010c6:	f000 fd5f 	bl	8001b88 <HAL_GPIO_WritePin>

  status |= (LCD_ReadNibble() << 4);
 80010ca:	f7ff ff05 	bl	8000ed8 <LCD_ReadNibble>
 80010ce:	4603      	mov	r3, r0
 80010d0:	011b      	lsls	r3, r3, #4
 80010d2:	b25a      	sxtb	r2, r3
 80010d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d8:	4313      	orrs	r3, r2
 80010da:	b25b      	sxtb	r3, r3
 80010dc:	71fb      	strb	r3, [r7, #7]
  status |= LCD_ReadNibble();
 80010de:	f7ff fefb 	bl	8000ed8 <LCD_ReadNibble>
 80010e2:	4603      	mov	r3, r0
 80010e4:	461a      	mov	r2, r3
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	71fb      	strb	r3, [r7, #7]

  LCD_SetDataPinOutput();
 80010ec:	f7ff ff8e 	bl	800100c <LCD_SetDataPinOutput>

  return status;
 80010f0:	79fb      	ldrb	r3, [r7, #7]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40020800 	.word	0x40020800

08001100 <LCD_WriteData>:
//-----------------------------------------------------------------------------
void LCD_WriteData(char dataToWrite)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	2140      	movs	r1, #64	; 0x40
 800110e:	4810      	ldr	r0, [pc, #64]	; (8001150 <LCD_WriteData+0x50>)
 8001110:	f000 fd3a 	bl	8001b88 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8001114:	2201      	movs	r2, #1
 8001116:	2180      	movs	r1, #128	; 0x80
 8001118:	480d      	ldr	r0, [pc, #52]	; (8001150 <LCD_WriteData+0x50>)
 800111a:	f000 fd35 	bl	8001b88 <HAL_GPIO_WritePin>

  LCD_WriteNibble(dataToWrite >> 4);
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	091b      	lsrs	r3, r3, #4
 8001122:	b2db      	uxtb	r3, r3
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff fe97 	bl	8000e58 <LCD_WriteNibble>
  LCD_WriteNibble(dataToWrite & 0x0F);
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	f003 030f 	and.w	r3, r3, #15
 8001130:	b2db      	uxtb	r3, r3
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff fe90 	bl	8000e58 <LCD_WriteNibble>

  while(LCD_ReadStatus() & 0x80);
 8001138:	bf00      	nop
 800113a:	f7ff ffb5 	bl	80010a8 <LCD_ReadStatus>
 800113e:	4603      	mov	r3, r0
 8001140:	b25b      	sxtb	r3, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	dbf9      	blt.n	800113a <LCD_WriteData+0x3a>
}
 8001146:	bf00      	nop
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40020800 	.word	0x40020800

08001154 <LCD_WriteCommand>:
//-----------------------------------------------------------------------------
void LCD_WriteCommand(char commandToWrite)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 800115e:	2200      	movs	r2, #0
 8001160:	2140      	movs	r1, #64	; 0x40
 8001162:	4810      	ldr	r0, [pc, #64]	; (80011a4 <LCD_WriteCommand+0x50>)
 8001164:	f000 fd10 	bl	8001b88 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8001168:	2200      	movs	r2, #0
 800116a:	2180      	movs	r1, #128	; 0x80
 800116c:	480d      	ldr	r0, [pc, #52]	; (80011a4 <LCD_WriteCommand+0x50>)
 800116e:	f000 fd0b 	bl	8001b88 <HAL_GPIO_WritePin>
  LCD_WriteNibble(commandToWrite >> 4);
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	091b      	lsrs	r3, r3, #4
 8001176:	b2db      	uxtb	r3, r3
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff fe6d 	bl	8000e58 <LCD_WriteNibble>
  LCD_WriteNibble(commandToWrite & 0x0F);
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	f003 030f 	and.w	r3, r3, #15
 8001184:	b2db      	uxtb	r3, r3
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff fe66 	bl	8000e58 <LCD_WriteNibble>

  while(LCD_ReadStatus() & 0x80);
 800118c:	bf00      	nop
 800118e:	f7ff ff8b 	bl	80010a8 <LCD_ReadStatus>
 8001192:	4603      	mov	r3, r0
 8001194:	b25b      	sxtb	r3, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	dbf9      	blt.n	800118e <LCD_WriteCommand+0x3a>
}
 800119a:	bf00      	nop
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40020800 	.word	0x40020800

080011a8 <LCD_GoTo>:
{
  while(*text)
    LCD_WriteData(*text++);
}
void LCD_GoTo(unsigned char x, unsigned char y)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	460a      	mov	r2, r1
 80011b2:	71fb      	strb	r3, [r7, #7]
 80011b4:	4613      	mov	r3, r2
 80011b6:	71bb      	strb	r3, [r7, #6]
  LCD_WriteCommand(HD44780_DDRAM_SET | (x + (0x40 * y)));
 80011b8:	79bb      	ldrb	r3, [r7, #6]
 80011ba:	019b      	lsls	r3, r3, #6
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	4413      	add	r3, r2
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	b25b      	sxtb	r3, r3
 80011c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011ca:	b25b      	sxtb	r3, r3
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff ffc0 	bl	8001154 <LCD_WriteCommand>
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <LCD_WriteTextXY>:
//-----------------------------------------------------------------------------
void LCD_WriteTextXY(char * text, unsigned char x, unsigned char y)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	460b      	mov	r3, r1
 80011e6:	70fb      	strb	r3, [r7, #3]
 80011e8:	4613      	mov	r3, r2
 80011ea:	70bb      	strb	r3, [r7, #2]
  LCD_GoTo(x,y);
 80011ec:	78ba      	ldrb	r2, [r7, #2]
 80011ee:	78fb      	ldrb	r3, [r7, #3]
 80011f0:	4611      	mov	r1, r2
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff ffd8 	bl	80011a8 <LCD_GoTo>
  while(*text)
 80011f8:	e006      	b.n	8001208 <LCD_WriteTextXY+0x2c>
    LCD_WriteData(*text++);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	1c5a      	adds	r2, r3, #1
 80011fe:	607a      	str	r2, [r7, #4]
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff ff7c 	bl	8001100 <LCD_WriteData>
  while(*text)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d1f4      	bne.n	80011fa <LCD_WriteTextXY+0x1e>
}
 8001210:	bf00      	nop
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <LCD_SetControlPinOutput>:
{
  LCD_WriteCommand(HD44780_DISPLAY_CURSOR_SHIFT | HD44780_SHIFT_RIGHT | HD44780_SHIFT_DISPLAY);
}
//-----------------------------------------------------------------------------
void LCD_SetControlPinOutput(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
	GPIO_InitStruct.Pin = LCD_RS_Pin;
 8001220:	4b20      	ldr	r3, [pc, #128]	; (80012a4 <LCD_SetControlPinOutput+0x88>)
 8001222:	2280      	movs	r2, #128	; 0x80
 8001224:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001226:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <LCD_SetControlPinOutput+0x88>)
 8001228:	2201      	movs	r2, #1
 800122a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <LCD_SetControlPinOutput+0x88>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001232:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <LCD_SetControlPinOutput+0x88>)
 8001234:	2201      	movs	r2, #1
 8001236:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LCD_RS_GPIO_Port, &GPIO_InitStruct);
 8001238:	491a      	ldr	r1, [pc, #104]	; (80012a4 <LCD_SetControlPinOutput+0x88>)
 800123a:	481b      	ldr	r0, [pc, #108]	; (80012a8 <LCD_SetControlPinOutput+0x8c>)
 800123c:	f000 fae0 	bl	8001800 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_RW_Pin;
 8001240:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <LCD_SetControlPinOutput+0x88>)
 8001242:	2240      	movs	r2, #64	; 0x40
 8001244:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001246:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <LCD_SetControlPinOutput+0x88>)
 8001248:	2201      	movs	r2, #1
 800124a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <LCD_SetControlPinOutput+0x88>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001252:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <LCD_SetControlPinOutput+0x88>)
 8001254:	2201      	movs	r2, #1
 8001256:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LCD_RW_GPIO_Port, &GPIO_InitStruct);
 8001258:	4912      	ldr	r1, [pc, #72]	; (80012a4 <LCD_SetControlPinOutput+0x88>)
 800125a:	4813      	ldr	r0, [pc, #76]	; (80012a8 <LCD_SetControlPinOutput+0x8c>)
 800125c:	f000 fad0 	bl	8001800 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_E_Pin;
 8001260:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <LCD_SetControlPinOutput+0x88>)
 8001262:	2240      	movs	r2, #64	; 0x40
 8001264:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001266:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <LCD_SetControlPinOutput+0x88>)
 8001268:	2201      	movs	r2, #1
 800126a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	4b0d      	ldr	r3, [pc, #52]	; (80012a4 <LCD_SetControlPinOutput+0x88>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <LCD_SetControlPinOutput+0x88>)
 8001274:	2201      	movs	r2, #1
 8001276:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LCD_E_GPIO_Port, &GPIO_InitStruct);
 8001278:	490a      	ldr	r1, [pc, #40]	; (80012a4 <LCD_SetControlPinOutput+0x88>)
 800127a:	480c      	ldr	r0, [pc, #48]	; (80012ac <LCD_SetControlPinOutput+0x90>)
 800127c:	f000 fac0 	bl	8001800 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8001280:	2200      	movs	r2, #0
 8001282:	2180      	movs	r1, #128	; 0x80
 8001284:	4808      	ldr	r0, [pc, #32]	; (80012a8 <LCD_SetControlPinOutput+0x8c>)
 8001286:	f000 fc7f 	bl	8001b88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RW_GPIO_Port, LCD_RW_Pin, GPIO_PIN_RESET);
 800128a:	2200      	movs	r2, #0
 800128c:	2140      	movs	r1, #64	; 0x40
 800128e:	4806      	ldr	r0, [pc, #24]	; (80012a8 <LCD_SetControlPinOutput+0x8c>)
 8001290:	f000 fc7a 	bl	8001b88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8001294:	2200      	movs	r2, #0
 8001296:	2140      	movs	r1, #64	; 0x40
 8001298:	4804      	ldr	r0, [pc, #16]	; (80012ac <LCD_SetControlPinOutput+0x90>)
 800129a:	f000 fc75 	bl	8001b88 <HAL_GPIO_WritePin>

}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000028 	.word	0x20000028
 80012a8:	40020800 	.word	0x40020800
 80012ac:	40021800 	.word	0x40021800

080012b0 <LCD_Initialize>:
//-----------------------------------------------------------------------------
void LCD_Initialize(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
  volatile unsigned char i = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	71fb      	strb	r3, [r7, #7]
  volatile unsigned int delayCnt = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	603b      	str	r3, [r7, #0]

  LCD_SetDataPinOutput();
 80012be:	f7ff fea5 	bl	800100c <LCD_SetDataPinOutput>
  LCD_SetControlPinOutput();
 80012c2:	f7ff ffab 	bl	800121c <LCD_SetControlPinOutput>

  for(delayCnt = 0; delayCnt < 300000; delayCnt++);
 80012c6:	2300      	movs	r3, #0
 80012c8:	603b      	str	r3, [r7, #0]
 80012ca:	e002      	b.n	80012d2 <LCD_Initialize+0x22>
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	3301      	adds	r3, #1
 80012d0:	603b      	str	r3, [r7, #0]
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	4a1e      	ldr	r2, [pc, #120]	; (8001350 <LCD_Initialize+0xa0>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d9f8      	bls.n	80012cc <LCD_Initialize+0x1c>

  for(i = 0; i < 3; i++) {
 80012da:	2300      	movs	r3, #0
 80012dc:	71fb      	strb	r3, [r7, #7]
 80012de:	e012      	b.n	8001306 <LCD_Initialize+0x56>
    LCD_WriteNibble(0x03);
 80012e0:	2003      	movs	r0, #3
 80012e2:	f7ff fdb9 	bl	8000e58 <LCD_WriteNibble>
    for(delayCnt = 0; delayCnt < 30000; delayCnt++);
 80012e6:	2300      	movs	r3, #0
 80012e8:	603b      	str	r3, [r7, #0]
 80012ea:	e002      	b.n	80012f2 <LCD_Initialize+0x42>
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	3301      	adds	r3, #1
 80012f0:	603b      	str	r3, [r7, #0]
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	f247 522f 	movw	r2, #29999	; 0x752f
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d9f7      	bls.n	80012ec <LCD_Initialize+0x3c>
  for(i = 0; i < 3; i++) {
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	3301      	adds	r3, #1
 8001302:	b2db      	uxtb	r3, r3
 8001304:	71fb      	strb	r3, [r7, #7]
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	b2db      	uxtb	r3, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d9e8      	bls.n	80012e0 <LCD_Initialize+0x30>
  }

  LCD_WriteNibble(0x02);
 800130e:	2002      	movs	r0, #2
 8001310:	f7ff fda2 	bl	8000e58 <LCD_WriteNibble>

  for(delayCnt = 0; delayCnt < 6000; delayCnt++);
 8001314:	2300      	movs	r3, #0
 8001316:	603b      	str	r3, [r7, #0]
 8001318:	e002      	b.n	8001320 <LCD_Initialize+0x70>
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	3301      	adds	r3, #1
 800131e:	603b      	str	r3, [r7, #0]
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	f241 726f 	movw	r2, #5999	; 0x176f
 8001326:	4293      	cmp	r3, r2
 8001328:	d9f7      	bls.n	800131a <LCD_Initialize+0x6a>

  LCD_WriteCommand(HD44780_FUNCTION_SET |
 800132a:	2028      	movs	r0, #40	; 0x28
 800132c:	f7ff ff12 	bl	8001154 <LCD_WriteCommand>
                   HD44780_FONT5x7 |
                   HD44780_TWO_LINE |
                   HD44780_4_BIT);

  LCD_WriteCommand(HD44780_DISPLAY_ONOFF |
 8001330:	2008      	movs	r0, #8
 8001332:	f7ff ff0f 	bl	8001154 <LCD_WriteCommand>
                   HD44780_DISPLAY_OFF);

  LCD_WriteCommand(HD44780_CLEAR);
 8001336:	2001      	movs	r0, #1
 8001338:	f7ff ff0c 	bl	8001154 <LCD_WriteCommand>

  LCD_WriteCommand(HD44780_ENTRY_MODE |
 800133c:	2006      	movs	r0, #6
 800133e:	f7ff ff09 	bl	8001154 <LCD_WriteCommand>
                   HD44780_EM_SHIFT_CURSOR |
                   HD44780_EM_INCREMENT);

  LCD_WriteCommand(HD44780_DISPLAY_ONOFF |
 8001342:	200c      	movs	r0, #12
 8001344:	f7ff ff06 	bl	8001154 <LCD_WriteCommand>
                   HD44780_DISPLAY_ON |
                   HD44780_CURSOR_OFF |
                   HD44780_CURSOR_NOBLINK);
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	000493df 	.word	0x000493df

08001354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001358:	f000 f90f 	bl	800157a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800135c:	f000 f816 	bl	800138c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001360:	f7ff f8d4 	bl	800050c <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LCD_Initialize();                         //inicjalizacja wysietlacza
 8001364:	f7ff ffa4 	bl	80012b0 <LCD_Initialize>
  LCD_WriteCommand(HD44780_CLEAR);          //wyczyszczenie wyświetlacza
 8001368:	2001      	movs	r0, #1
 800136a:	f7ff fef3 	bl	8001154 <LCD_WriteCommand>
  LCD_WriteTextXY("TEST test",0,0);
 800136e:	2200      	movs	r2, #0
 8001370:	2100      	movs	r1, #0
 8001372:	4804      	ldr	r0, [pc, #16]	; (8001384 <main+0x30>)
 8001374:	f7ff ff32 	bl	80011dc <LCD_WriteTextXY>
  LCD_WriteTextXY("123456789",0,1);
 8001378:	2201      	movs	r2, #1
 800137a:	2100      	movs	r1, #0
 800137c:	4802      	ldr	r0, [pc, #8]	; (8001388 <main+0x34>)
 800137e:	f7ff ff2d 	bl	80011dc <LCD_WriteTextXY>
  //LCD_WriteText("DAWAJ NEWSY.");             //wyswietl tekst pierwszej linii
  while (1)
 8001382:	e7fe      	b.n	8001382 <main+0x2e>
 8001384:	080024d8 	.word	0x080024d8
 8001388:	080024e4 	.word	0x080024e4

0800138c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b094      	sub	sp, #80	; 0x50
 8001390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001392:	f107 0320 	add.w	r3, r7, #32
 8001396:	2230      	movs	r2, #48	; 0x30
 8001398:	2100      	movs	r1, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f001 f888 	bl	80024b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a0:	f107 030c 	add.w	r3, r7, #12
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b0:	4b28      	ldr	r3, [pc, #160]	; (8001454 <SystemClock_Config+0xc8>)
 80013b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b4:	4a27      	ldr	r2, [pc, #156]	; (8001454 <SystemClock_Config+0xc8>)
 80013b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ba:	6413      	str	r3, [r2, #64]	; 0x40
 80013bc:	4b25      	ldr	r3, [pc, #148]	; (8001454 <SystemClock_Config+0xc8>)
 80013be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80013c8:	4b23      	ldr	r3, [pc, #140]	; (8001458 <SystemClock_Config+0xcc>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013d0:	4a21      	ldr	r2, [pc, #132]	; (8001458 <SystemClock_Config+0xcc>)
 80013d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	4b1f      	ldr	r3, [pc, #124]	; (8001458 <SystemClock_Config+0xcc>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013e4:	2302      	movs	r3, #2
 80013e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013e8:	2301      	movs	r3, #1
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013ec:	2310      	movs	r3, #16
 80013ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013f0:	2302      	movs	r3, #2
 80013f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013f4:	2300      	movs	r3, #0
 80013f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 10;
 80013f8:	230a      	movs	r3, #10
 80013fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 210;
 80013fc:	23d2      	movs	r3, #210	; 0xd2
 80013fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001400:	2302      	movs	r3, #2
 8001402:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001404:	2302      	movs	r3, #2
 8001406:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001408:	f107 0320 	add.w	r3, r7, #32
 800140c:	4618      	mov	r0, r3
 800140e:	f000 fbd5 	bl	8001bbc <HAL_RCC_OscConfig>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001418:	f000 f820 	bl	800145c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800141c:	230f      	movs	r3, #15
 800141e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001420:	2302      	movs	r3, #2
 8001422:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001428:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800142c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800142e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001432:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001434:	f107 030c 	add.w	r3, r7, #12
 8001438:	2105      	movs	r1, #5
 800143a:	4618      	mov	r0, r3
 800143c:	f000 fe62 	bl	8002104 <HAL_RCC_ClockConfig>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001446:	f000 f809 	bl	800145c <Error_Handler>
  }
}
 800144a:	bf00      	nop
 800144c:	3750      	adds	r7, #80	; 0x50
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40023800 	.word	0x40023800
 8001458:	40007000 	.word	0x40007000

0800145c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001460:	b672      	cpsid	i
}
 8001462:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001464:	e7fe      	b.n	8001464 <Error_Handler+0x8>
	...

08001468 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800146e:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <HAL_MspInit+0x44>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	4a0e      	ldr	r2, [pc, #56]	; (80014ac <HAL_MspInit+0x44>)
 8001474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001478:	6413      	str	r3, [r2, #64]	; 0x40
 800147a:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <HAL_MspInit+0x44>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <HAL_MspInit+0x44>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148a:	4a08      	ldr	r2, [pc, #32]	; (80014ac <HAL_MspInit+0x44>)
 800148c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001490:	6453      	str	r3, [r2, #68]	; 0x44
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <HAL_MspInit+0x44>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	40023800 	.word	0x40023800

080014b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <NMI_Handler+0x4>

080014b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ba:	e7fe      	b.n	80014ba <HardFault_Handler+0x4>

080014bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <MemManage_Handler+0x4>

080014c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c6:	e7fe      	b.n	80014c6 <BusFault_Handler+0x4>

080014c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <UsageFault_Handler+0x4>

080014ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014fc:	f000 f87a 	bl	80015f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}

08001504 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <SystemInit+0x20>)
 800150a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800150e:	4a05      	ldr	r2, [pc, #20]	; (8001524 <SystemInit+0x20>)
 8001510:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001514:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001528:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001560 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800152c:	480d      	ldr	r0, [pc, #52]	; (8001564 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800152e:	490e      	ldr	r1, [pc, #56]	; (8001568 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001530:	4a0e      	ldr	r2, [pc, #56]	; (800156c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001534:	e002      	b.n	800153c <LoopCopyDataInit>

08001536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153a:	3304      	adds	r3, #4

0800153c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800153c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800153e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001540:	d3f9      	bcc.n	8001536 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001542:	4a0b      	ldr	r2, [pc, #44]	; (8001570 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001544:	4c0b      	ldr	r4, [pc, #44]	; (8001574 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001548:	e001      	b.n	800154e <LoopFillZerobss>

0800154a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800154c:	3204      	adds	r2, #4

0800154e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800154e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001550:	d3fb      	bcc.n	800154a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001552:	f7ff ffd7 	bl	8001504 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001556:	f000 ff87 	bl	8002468 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800155a:	f7ff fefb 	bl	8001354 <main>
  bx  lr    
 800155e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001560:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001564:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001568:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800156c:	08002510 	.word	0x08002510
  ldr r2, =_sbss
 8001570:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001574:	20000040 	.word	0x20000040

08001578 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001578:	e7fe      	b.n	8001578 <ADC_IRQHandler>

0800157a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800157e:	2003      	movs	r0, #3
 8001580:	f000 f90a 	bl	8001798 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001584:	2000      	movs	r0, #0
 8001586:	f000 f805 	bl	8001594 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800158a:	f7ff ff6d 	bl	8001468 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	bd80      	pop	{r7, pc}

08001594 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <HAL_InitTick+0x54>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4b12      	ldr	r3, [pc, #72]	; (80015ec <HAL_InitTick+0x58>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	4619      	mov	r1, r3
 80015a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 f917 	bl	80017e6 <HAL_SYSTICK_Config>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e00e      	b.n	80015e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2b0f      	cmp	r3, #15
 80015c6:	d80a      	bhi.n	80015de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c8:	2200      	movs	r2, #0
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	f04f 30ff 	mov.w	r0, #4294967295
 80015d0:	f000 f8ed 	bl	80017ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d4:	4a06      	ldr	r2, [pc, #24]	; (80015f0 <HAL_InitTick+0x5c>)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015da:	2300      	movs	r3, #0
 80015dc:	e000      	b.n	80015e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000000 	.word	0x20000000
 80015ec:	20000008 	.word	0x20000008
 80015f0:	20000004 	.word	0x20000004

080015f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <HAL_IncTick+0x20>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b06      	ldr	r3, [pc, #24]	; (8001618 <HAL_IncTick+0x24>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4413      	add	r3, r2
 8001604:	4a04      	ldr	r2, [pc, #16]	; (8001618 <HAL_IncTick+0x24>)
 8001606:	6013      	str	r3, [r2, #0]
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	20000008 	.word	0x20000008
 8001618:	2000003c 	.word	0x2000003c

0800161c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  return uwTick;
 8001620:	4b03      	ldr	r3, [pc, #12]	; (8001630 <HAL_GetTick+0x14>)
 8001622:	681b      	ldr	r3, [r3, #0]
}
 8001624:	4618      	mov	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	2000003c 	.word	0x2000003c

08001634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001644:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <__NVIC_SetPriorityGrouping+0x40>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001650:	4013      	ands	r3, r2
 8001652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <__NVIC_SetPriorityGrouping+0x44>)
 800165e:	4313      	orrs	r3, r2
 8001660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001662:	4a04      	ldr	r2, [pc, #16]	; (8001674 <__NVIC_SetPriorityGrouping+0x40>)
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	60d3      	str	r3, [r2, #12]
}
 8001668:	bf00      	nop
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	e000ed00 	.word	0xe000ed00
 8001678:	05fa0000 	.word	0x05fa0000

0800167c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <__NVIC_GetPriorityGrouping+0x18>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	0a1b      	lsrs	r3, r3, #8
 8001686:	f003 0307 	and.w	r3, r3, #7
}
 800168a:	4618      	mov	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	6039      	str	r1, [r7, #0]
 80016a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	db0a      	blt.n	80016c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	490c      	ldr	r1, [pc, #48]	; (80016e4 <__NVIC_SetPriority+0x4c>)
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b6:	0112      	lsls	r2, r2, #4
 80016b8:	b2d2      	uxtb	r2, r2
 80016ba:	440b      	add	r3, r1
 80016bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c0:	e00a      	b.n	80016d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	4908      	ldr	r1, [pc, #32]	; (80016e8 <__NVIC_SetPriority+0x50>)
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	f003 030f 	and.w	r3, r3, #15
 80016ce:	3b04      	subs	r3, #4
 80016d0:	0112      	lsls	r2, r2, #4
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	440b      	add	r3, r1
 80016d6:	761a      	strb	r2, [r3, #24]
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	e000e100 	.word	0xe000e100
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b089      	sub	sp, #36	; 0x24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	f1c3 0307 	rsb	r3, r3, #7
 8001706:	2b04      	cmp	r3, #4
 8001708:	bf28      	it	cs
 800170a:	2304      	movcs	r3, #4
 800170c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3304      	adds	r3, #4
 8001712:	2b06      	cmp	r3, #6
 8001714:	d902      	bls.n	800171c <NVIC_EncodePriority+0x30>
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3b03      	subs	r3, #3
 800171a:	e000      	b.n	800171e <NVIC_EncodePriority+0x32>
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001720:	f04f 32ff 	mov.w	r2, #4294967295
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	43da      	mvns	r2, r3
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	401a      	ands	r2, r3
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001734:	f04f 31ff 	mov.w	r1, #4294967295
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	fa01 f303 	lsl.w	r3, r1, r3
 800173e:	43d9      	mvns	r1, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001744:	4313      	orrs	r3, r2
         );
}
 8001746:	4618      	mov	r0, r3
 8001748:	3724      	adds	r7, #36	; 0x24
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
	...

08001754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3b01      	subs	r3, #1
 8001760:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001764:	d301      	bcc.n	800176a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001766:	2301      	movs	r3, #1
 8001768:	e00f      	b.n	800178a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800176a:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <SysTick_Config+0x40>)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3b01      	subs	r3, #1
 8001770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001772:	210f      	movs	r1, #15
 8001774:	f04f 30ff 	mov.w	r0, #4294967295
 8001778:	f7ff ff8e 	bl	8001698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800177c:	4b05      	ldr	r3, [pc, #20]	; (8001794 <SysTick_Config+0x40>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001782:	4b04      	ldr	r3, [pc, #16]	; (8001794 <SysTick_Config+0x40>)
 8001784:	2207      	movs	r2, #7
 8001786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	e000e010 	.word	0xe000e010

08001798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff ff47 	bl	8001634 <__NVIC_SetPriorityGrouping>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b086      	sub	sp, #24
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	4603      	mov	r3, r0
 80017b6:	60b9      	str	r1, [r7, #8]
 80017b8:	607a      	str	r2, [r7, #4]
 80017ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017c0:	f7ff ff5c 	bl	800167c <__NVIC_GetPriorityGrouping>
 80017c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	68b9      	ldr	r1, [r7, #8]
 80017ca:	6978      	ldr	r0, [r7, #20]
 80017cc:	f7ff ff8e 	bl	80016ec <NVIC_EncodePriority>
 80017d0:	4602      	mov	r2, r0
 80017d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d6:	4611      	mov	r1, r2
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ff5d 	bl	8001698 <__NVIC_SetPriority>
}
 80017de:	bf00      	nop
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff ffb0 	bl	8001754 <SysTick_Config>
 80017f4:	4603      	mov	r3, r0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001800:	b480      	push	{r7}
 8001802:	b089      	sub	sp, #36	; 0x24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001812:	2300      	movs	r3, #0
 8001814:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001816:	2300      	movs	r3, #0
 8001818:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
 800181e:	e175      	b.n	8001b0c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001820:	2201      	movs	r2, #1
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	4013      	ands	r3, r2
 8001832:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	429a      	cmp	r2, r3
 800183a:	f040 8164 	bne.w	8001b06 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f003 0303 	and.w	r3, r3, #3
 8001846:	2b01      	cmp	r3, #1
 8001848:	d005      	beq.n	8001856 <HAL_GPIO_Init+0x56>
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f003 0303 	and.w	r3, r3, #3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d130      	bne.n	80018b8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	2203      	movs	r2, #3
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43db      	mvns	r3, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4013      	ands	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	68da      	ldr	r2, [r3, #12]
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4313      	orrs	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800188c:	2201      	movs	r2, #1
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	091b      	lsrs	r3, r3, #4
 80018a2:	f003 0201 	and.w	r2, r3, #1
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 0303 	and.w	r3, r3, #3
 80018c0:	2b03      	cmp	r3, #3
 80018c2:	d017      	beq.n	80018f4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	2203      	movs	r2, #3
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 0303 	and.w	r3, r3, #3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d123      	bne.n	8001948 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	08da      	lsrs	r2, r3, #3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3208      	adds	r2, #8
 8001908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800190c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	f003 0307 	and.w	r3, r3, #7
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	220f      	movs	r2, #15
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	691a      	ldr	r2, [r3, #16]
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4313      	orrs	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	08da      	lsrs	r2, r3, #3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3208      	adds	r2, #8
 8001942:	69b9      	ldr	r1, [r7, #24]
 8001944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	2203      	movs	r2, #3
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 0203 	and.w	r2, r3, #3
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 80be 	beq.w	8001b06 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198a:	4b66      	ldr	r3, [pc, #408]	; (8001b24 <HAL_GPIO_Init+0x324>)
 800198c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198e:	4a65      	ldr	r2, [pc, #404]	; (8001b24 <HAL_GPIO_Init+0x324>)
 8001990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001994:	6453      	str	r3, [r2, #68]	; 0x44
 8001996:	4b63      	ldr	r3, [pc, #396]	; (8001b24 <HAL_GPIO_Init+0x324>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80019a2:	4a61      	ldr	r2, [pc, #388]	; (8001b28 <HAL_GPIO_Init+0x328>)
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	089b      	lsrs	r3, r3, #2
 80019a8:	3302      	adds	r3, #2
 80019aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f003 0303 	and.w	r3, r3, #3
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	220f      	movs	r2, #15
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43db      	mvns	r3, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4013      	ands	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a58      	ldr	r2, [pc, #352]	; (8001b2c <HAL_GPIO_Init+0x32c>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d037      	beq.n	8001a3e <HAL_GPIO_Init+0x23e>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a57      	ldr	r2, [pc, #348]	; (8001b30 <HAL_GPIO_Init+0x330>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d031      	beq.n	8001a3a <HAL_GPIO_Init+0x23a>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a56      	ldr	r2, [pc, #344]	; (8001b34 <HAL_GPIO_Init+0x334>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d02b      	beq.n	8001a36 <HAL_GPIO_Init+0x236>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a55      	ldr	r2, [pc, #340]	; (8001b38 <HAL_GPIO_Init+0x338>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d025      	beq.n	8001a32 <HAL_GPIO_Init+0x232>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a54      	ldr	r2, [pc, #336]	; (8001b3c <HAL_GPIO_Init+0x33c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d01f      	beq.n	8001a2e <HAL_GPIO_Init+0x22e>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a53      	ldr	r2, [pc, #332]	; (8001b40 <HAL_GPIO_Init+0x340>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d019      	beq.n	8001a2a <HAL_GPIO_Init+0x22a>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a52      	ldr	r2, [pc, #328]	; (8001b44 <HAL_GPIO_Init+0x344>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d013      	beq.n	8001a26 <HAL_GPIO_Init+0x226>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a51      	ldr	r2, [pc, #324]	; (8001b48 <HAL_GPIO_Init+0x348>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d00d      	beq.n	8001a22 <HAL_GPIO_Init+0x222>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a50      	ldr	r2, [pc, #320]	; (8001b4c <HAL_GPIO_Init+0x34c>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d007      	beq.n	8001a1e <HAL_GPIO_Init+0x21e>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a4f      	ldr	r2, [pc, #316]	; (8001b50 <HAL_GPIO_Init+0x350>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d101      	bne.n	8001a1a <HAL_GPIO_Init+0x21a>
 8001a16:	2309      	movs	r3, #9
 8001a18:	e012      	b.n	8001a40 <HAL_GPIO_Init+0x240>
 8001a1a:	230a      	movs	r3, #10
 8001a1c:	e010      	b.n	8001a40 <HAL_GPIO_Init+0x240>
 8001a1e:	2308      	movs	r3, #8
 8001a20:	e00e      	b.n	8001a40 <HAL_GPIO_Init+0x240>
 8001a22:	2307      	movs	r3, #7
 8001a24:	e00c      	b.n	8001a40 <HAL_GPIO_Init+0x240>
 8001a26:	2306      	movs	r3, #6
 8001a28:	e00a      	b.n	8001a40 <HAL_GPIO_Init+0x240>
 8001a2a:	2305      	movs	r3, #5
 8001a2c:	e008      	b.n	8001a40 <HAL_GPIO_Init+0x240>
 8001a2e:	2304      	movs	r3, #4
 8001a30:	e006      	b.n	8001a40 <HAL_GPIO_Init+0x240>
 8001a32:	2303      	movs	r3, #3
 8001a34:	e004      	b.n	8001a40 <HAL_GPIO_Init+0x240>
 8001a36:	2302      	movs	r3, #2
 8001a38:	e002      	b.n	8001a40 <HAL_GPIO_Init+0x240>
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e000      	b.n	8001a40 <HAL_GPIO_Init+0x240>
 8001a3e:	2300      	movs	r3, #0
 8001a40:	69fa      	ldr	r2, [r7, #28]
 8001a42:	f002 0203 	and.w	r2, r2, #3
 8001a46:	0092      	lsls	r2, r2, #2
 8001a48:	4093      	lsls	r3, r2
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a50:	4935      	ldr	r1, [pc, #212]	; (8001b28 <HAL_GPIO_Init+0x328>)
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	089b      	lsrs	r3, r3, #2
 8001a56:	3302      	adds	r3, #2
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a5e:	4b3d      	ldr	r3, [pc, #244]	; (8001b54 <HAL_GPIO_Init+0x354>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	43db      	mvns	r3, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a82:	4a34      	ldr	r2, [pc, #208]	; (8001b54 <HAL_GPIO_Init+0x354>)
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a88:	4b32      	ldr	r3, [pc, #200]	; (8001b54 <HAL_GPIO_Init+0x354>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	43db      	mvns	r3, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4013      	ands	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d003      	beq.n	8001aac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001aac:	4a29      	ldr	r2, [pc, #164]	; (8001b54 <HAL_GPIO_Init+0x354>)
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ab2:	4b28      	ldr	r3, [pc, #160]	; (8001b54 <HAL_GPIO_Init+0x354>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	43db      	mvns	r3, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ad6:	4a1f      	ldr	r2, [pc, #124]	; (8001b54 <HAL_GPIO_Init+0x354>)
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001adc:	4b1d      	ldr	r3, [pc, #116]	; (8001b54 <HAL_GPIO_Init+0x354>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b00:	4a14      	ldr	r2, [pc, #80]	; (8001b54 <HAL_GPIO_Init+0x354>)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	61fb      	str	r3, [r7, #28]
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	2b0f      	cmp	r3, #15
 8001b10:	f67f ae86 	bls.w	8001820 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001b14:	bf00      	nop
 8001b16:	bf00      	nop
 8001b18:	3724      	adds	r7, #36	; 0x24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40013800 	.word	0x40013800
 8001b2c:	40020000 	.word	0x40020000
 8001b30:	40020400 	.word	0x40020400
 8001b34:	40020800 	.word	0x40020800
 8001b38:	40020c00 	.word	0x40020c00
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40021400 	.word	0x40021400
 8001b44:	40021800 	.word	0x40021800
 8001b48:	40021c00 	.word	0x40021c00
 8001b4c:	40022000 	.word	0x40022000
 8001b50:	40022400 	.word	0x40022400
 8001b54:	40013c00 	.word	0x40013c00

08001b58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	460b      	mov	r3, r1
 8001b62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691a      	ldr	r2, [r3, #16]
 8001b68:	887b      	ldrh	r3, [r7, #2]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d002      	beq.n	8001b76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b70:	2301      	movs	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]
 8001b74:	e001      	b.n	8001b7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b76:	2300      	movs	r3, #0
 8001b78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	807b      	strh	r3, [r7, #2]
 8001b94:	4613      	mov	r3, r2
 8001b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b98:	787b      	ldrb	r3, [r7, #1]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b9e:	887a      	ldrh	r2, [r7, #2]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ba4:	e003      	b.n	8001bae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001ba6:	887b      	ldrh	r3, [r7, #2]
 8001ba8:	041a      	lsls	r2, r3, #16
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	619a      	str	r2, [r3, #24]
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
	...

08001bbc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e291      	b.n	80020f6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 8087 	beq.w	8001cee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001be0:	4b96      	ldr	r3, [pc, #600]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 030c 	and.w	r3, r3, #12
 8001be8:	2b04      	cmp	r3, #4
 8001bea:	d00c      	beq.n	8001c06 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bec:	4b93      	ldr	r3, [pc, #588]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 030c 	and.w	r3, r3, #12
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d112      	bne.n	8001c1e <HAL_RCC_OscConfig+0x62>
 8001bf8:	4b90      	ldr	r3, [pc, #576]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c04:	d10b      	bne.n	8001c1e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c06:	4b8d      	ldr	r3, [pc, #564]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d06c      	beq.n	8001cec <HAL_RCC_OscConfig+0x130>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d168      	bne.n	8001cec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e26b      	b.n	80020f6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c26:	d106      	bne.n	8001c36 <HAL_RCC_OscConfig+0x7a>
 8001c28:	4b84      	ldr	r3, [pc, #528]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a83      	ldr	r2, [pc, #524]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001c2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c32:	6013      	str	r3, [r2, #0]
 8001c34:	e02e      	b.n	8001c94 <HAL_RCC_OscConfig+0xd8>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10c      	bne.n	8001c58 <HAL_RCC_OscConfig+0x9c>
 8001c3e:	4b7f      	ldr	r3, [pc, #508]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a7e      	ldr	r2, [pc, #504]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001c44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	4b7c      	ldr	r3, [pc, #496]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a7b      	ldr	r2, [pc, #492]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001c50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	e01d      	b.n	8001c94 <HAL_RCC_OscConfig+0xd8>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c60:	d10c      	bne.n	8001c7c <HAL_RCC_OscConfig+0xc0>
 8001c62:	4b76      	ldr	r3, [pc, #472]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a75      	ldr	r2, [pc, #468]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	4b73      	ldr	r3, [pc, #460]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a72      	ldr	r2, [pc, #456]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	e00b      	b.n	8001c94 <HAL_RCC_OscConfig+0xd8>
 8001c7c:	4b6f      	ldr	r3, [pc, #444]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a6e      	ldr	r2, [pc, #440]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c86:	6013      	str	r3, [r2, #0]
 8001c88:	4b6c      	ldr	r3, [pc, #432]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a6b      	ldr	r2, [pc, #428]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d013      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9c:	f7ff fcbe 	bl	800161c <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca4:	f7ff fcba 	bl	800161c <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b64      	cmp	r3, #100	; 0x64
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e21f      	b.n	80020f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb6:	4b61      	ldr	r3, [pc, #388]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0f0      	beq.n	8001ca4 <HAL_RCC_OscConfig+0xe8>
 8001cc2:	e014      	b.n	8001cee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc4:	f7ff fcaa 	bl	800161c <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ccc:	f7ff fca6 	bl	800161c <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b64      	cmp	r3, #100	; 0x64
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e20b      	b.n	80020f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cde:	4b57      	ldr	r3, [pc, #348]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1f0      	bne.n	8001ccc <HAL_RCC_OscConfig+0x110>
 8001cea:	e000      	b.n	8001cee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d069      	beq.n	8001dce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cfa:	4b50      	ldr	r3, [pc, #320]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 030c 	and.w	r3, r3, #12
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00b      	beq.n	8001d1e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d06:	4b4d      	ldr	r3, [pc, #308]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 030c 	and.w	r3, r3, #12
 8001d0e:	2b08      	cmp	r3, #8
 8001d10:	d11c      	bne.n	8001d4c <HAL_RCC_OscConfig+0x190>
 8001d12:	4b4a      	ldr	r3, [pc, #296]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d116      	bne.n	8001d4c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d1e:	4b47      	ldr	r3, [pc, #284]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d005      	beq.n	8001d36 <HAL_RCC_OscConfig+0x17a>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d001      	beq.n	8001d36 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e1df      	b.n	80020f6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d36:	4b41      	ldr	r3, [pc, #260]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	493d      	ldr	r1, [pc, #244]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d4a:	e040      	b.n	8001dce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d023      	beq.n	8001d9c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d54:	4b39      	ldr	r3, [pc, #228]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a38      	ldr	r2, [pc, #224]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d60:	f7ff fc5c 	bl	800161c <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d68:	f7ff fc58 	bl	800161c <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e1bd      	b.n	80020f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d7a:	4b30      	ldr	r3, [pc, #192]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0f0      	beq.n	8001d68 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d86:	4b2d      	ldr	r3, [pc, #180]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	4929      	ldr	r1, [pc, #164]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	600b      	str	r3, [r1, #0]
 8001d9a:	e018      	b.n	8001dce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d9c:	4b27      	ldr	r3, [pc, #156]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a26      	ldr	r2, [pc, #152]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001da2:	f023 0301 	bic.w	r3, r3, #1
 8001da6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da8:	f7ff fc38 	bl	800161c <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001db0:	f7ff fc34 	bl	800161c <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e199      	b.n	80020f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc2:	4b1e      	ldr	r3, [pc, #120]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f0      	bne.n	8001db0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d038      	beq.n	8001e4c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	695b      	ldr	r3, [r3, #20]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d019      	beq.n	8001e16 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001de2:	4b16      	ldr	r3, [pc, #88]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001de6:	4a15      	ldr	r2, [pc, #84]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dee:	f7ff fc15 	bl	800161c <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df4:	e008      	b.n	8001e08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df6:	f7ff fc11 	bl	800161c <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e176      	b.n	80020f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e08:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001e0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d0f0      	beq.n	8001df6 <HAL_RCC_OscConfig+0x23a>
 8001e14:	e01a      	b.n	8001e4c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e16:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e1a:	4a08      	ldr	r2, [pc, #32]	; (8001e3c <HAL_RCC_OscConfig+0x280>)
 8001e1c:	f023 0301 	bic.w	r3, r3, #1
 8001e20:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e22:	f7ff fbfb 	bl	800161c <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e28:	e00a      	b.n	8001e40 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e2a:	f7ff fbf7 	bl	800161c <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d903      	bls.n	8001e40 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e15c      	b.n	80020f6 <HAL_RCC_OscConfig+0x53a>
 8001e3c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e40:	4b91      	ldr	r3, [pc, #580]	; (8002088 <HAL_RCC_OscConfig+0x4cc>)
 8001e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1ee      	bne.n	8001e2a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 80a4 	beq.w	8001fa2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e5a:	4b8b      	ldr	r3, [pc, #556]	; (8002088 <HAL_RCC_OscConfig+0x4cc>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10d      	bne.n	8001e82 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e66:	4b88      	ldr	r3, [pc, #544]	; (8002088 <HAL_RCC_OscConfig+0x4cc>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	4a87      	ldr	r2, [pc, #540]	; (8002088 <HAL_RCC_OscConfig+0x4cc>)
 8001e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e70:	6413      	str	r3, [r2, #64]	; 0x40
 8001e72:	4b85      	ldr	r3, [pc, #532]	; (8002088 <HAL_RCC_OscConfig+0x4cc>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7a:	60bb      	str	r3, [r7, #8]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e82:	4b82      	ldr	r3, [pc, #520]	; (800208c <HAL_RCC_OscConfig+0x4d0>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d118      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001e8e:	4b7f      	ldr	r3, [pc, #508]	; (800208c <HAL_RCC_OscConfig+0x4d0>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a7e      	ldr	r2, [pc, #504]	; (800208c <HAL_RCC_OscConfig+0x4d0>)
 8001e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e9a:	f7ff fbbf 	bl	800161c <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ea2:	f7ff fbbb 	bl	800161c <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b64      	cmp	r3, #100	; 0x64
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e120      	b.n	80020f6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eb4:	4b75      	ldr	r3, [pc, #468]	; (800208c <HAL_RCC_OscConfig+0x4d0>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d0f0      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d106      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x31a>
 8001ec8:	4b6f      	ldr	r3, [pc, #444]	; (8002088 <HAL_RCC_OscConfig+0x4cc>)
 8001eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ecc:	4a6e      	ldr	r2, [pc, #440]	; (8002088 <HAL_RCC_OscConfig+0x4cc>)
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ed4:	e02d      	b.n	8001f32 <HAL_RCC_OscConfig+0x376>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10c      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x33c>
 8001ede:	4b6a      	ldr	r3, [pc, #424]	; (8002088 <HAL_RCC_OscConfig+0x4cc>)
 8001ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ee2:	4a69      	ldr	r2, [pc, #420]	; (8002088 <HAL_RCC_OscConfig+0x4cc>)
 8001ee4:	f023 0301 	bic.w	r3, r3, #1
 8001ee8:	6713      	str	r3, [r2, #112]	; 0x70
 8001eea:	4b67      	ldr	r3, [pc, #412]	; (8002088 <HAL_RCC_OscConfig+0x4cc>)
 8001eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eee:	4a66      	ldr	r2, [pc, #408]	; (8002088 <HAL_RCC_OscConfig+0x4cc>)
 8001ef0:	f023 0304 	bic.w	r3, r3, #4
 8001ef4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ef6:	e01c      	b.n	8001f32 <HAL_RCC_OscConfig+0x376>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	2b05      	cmp	r3, #5
 8001efe:	d10c      	bne.n	8001f1a <HAL_RCC_OscConfig+0x35e>
 8001f00:	4b61      	ldr	r3, [pc, #388]	; (8002088 <HAL_RCC_OscConfig+0x4cc>)
 8001f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f04:	4a60      	ldr	r2, [pc, #384]	; (8002088 <HAL_RCC_OscConfig+0x4cc>)
 8001f06:	f043 0304 	orr.w	r3, r3, #4
 8001f0a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f0c:	4b5e      	ldr	r3, [pc, #376]	; (8002088 <HAL_RCC_OscConfig+0x4cc>)
 8001f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f10:	4a5d      	ldr	r2, [pc, #372]	; (8002088 <HAL_RCC_OscConfig+0x4cc>)
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	6713      	str	r3, [r2, #112]	; 0x70
 8001f18:	e00b      	b.n	8001f32 <HAL_RCC_OscConfig+0x376>
 8001f1a:	4b5b      	ldr	r3, [pc, #364]	; (8002088 <HAL_RCC_OscConfig+0x4cc>)
 8001f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1e:	4a5a      	ldr	r2, [pc, #360]	; (8002088 <HAL_RCC_OscConfig+0x4cc>)
 8001f20:	f023 0301 	bic.w	r3, r3, #1
 8001f24:	6713      	str	r3, [r2, #112]	; 0x70
 8001f26:	4b58      	ldr	r3, [pc, #352]	; (8002088 <HAL_RCC_OscConfig+0x4cc>)
 8001f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2a:	4a57      	ldr	r2, [pc, #348]	; (8002088 <HAL_RCC_OscConfig+0x4cc>)
 8001f2c:	f023 0304 	bic.w	r3, r3, #4
 8001f30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d015      	beq.n	8001f66 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f3a:	f7ff fb6f 	bl	800161c <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f40:	e00a      	b.n	8001f58 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f42:	f7ff fb6b 	bl	800161c <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e0ce      	b.n	80020f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f58:	4b4b      	ldr	r3, [pc, #300]	; (8002088 <HAL_RCC_OscConfig+0x4cc>)
 8001f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0ee      	beq.n	8001f42 <HAL_RCC_OscConfig+0x386>
 8001f64:	e014      	b.n	8001f90 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f66:	f7ff fb59 	bl	800161c <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f6c:	e00a      	b.n	8001f84 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f6e:	f7ff fb55 	bl	800161c <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e0b8      	b.n	80020f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f84:	4b40      	ldr	r3, [pc, #256]	; (8002088 <HAL_RCC_OscConfig+0x4cc>)
 8001f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1ee      	bne.n	8001f6e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f90:	7dfb      	ldrb	r3, [r7, #23]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d105      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f96:	4b3c      	ldr	r3, [pc, #240]	; (8002088 <HAL_RCC_OscConfig+0x4cc>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	4a3b      	ldr	r2, [pc, #236]	; (8002088 <HAL_RCC_OscConfig+0x4cc>)
 8001f9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fa0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f000 80a4 	beq.w	80020f4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fac:	4b36      	ldr	r3, [pc, #216]	; (8002088 <HAL_RCC_OscConfig+0x4cc>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 030c 	and.w	r3, r3, #12
 8001fb4:	2b08      	cmp	r3, #8
 8001fb6:	d06b      	beq.n	8002090 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d149      	bne.n	8002054 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc0:	4b31      	ldr	r3, [pc, #196]	; (8002088 <HAL_RCC_OscConfig+0x4cc>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a30      	ldr	r2, [pc, #192]	; (8002088 <HAL_RCC_OscConfig+0x4cc>)
 8001fc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fcc:	f7ff fb26 	bl	800161c <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd4:	f7ff fb22 	bl	800161c <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e087      	b.n	80020f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fe6:	4b28      	ldr	r3, [pc, #160]	; (8002088 <HAL_RCC_OscConfig+0x4cc>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1f0      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69da      	ldr	r2, [r3, #28]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002000:	019b      	lsls	r3, r3, #6
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002008:	085b      	lsrs	r3, r3, #1
 800200a:	3b01      	subs	r3, #1
 800200c:	041b      	lsls	r3, r3, #16
 800200e:	431a      	orrs	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002014:	061b      	lsls	r3, r3, #24
 8002016:	4313      	orrs	r3, r2
 8002018:	4a1b      	ldr	r2, [pc, #108]	; (8002088 <HAL_RCC_OscConfig+0x4cc>)
 800201a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800201e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002020:	4b19      	ldr	r3, [pc, #100]	; (8002088 <HAL_RCC_OscConfig+0x4cc>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a18      	ldr	r2, [pc, #96]	; (8002088 <HAL_RCC_OscConfig+0x4cc>)
 8002026:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800202a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202c:	f7ff faf6 	bl	800161c <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002034:	f7ff faf2 	bl	800161c <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e057      	b.n	80020f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002046:	4b10      	ldr	r3, [pc, #64]	; (8002088 <HAL_RCC_OscConfig+0x4cc>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0f0      	beq.n	8002034 <HAL_RCC_OscConfig+0x478>
 8002052:	e04f      	b.n	80020f4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002054:	4b0c      	ldr	r3, [pc, #48]	; (8002088 <HAL_RCC_OscConfig+0x4cc>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a0b      	ldr	r2, [pc, #44]	; (8002088 <HAL_RCC_OscConfig+0x4cc>)
 800205a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800205e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002060:	f7ff fadc 	bl	800161c <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002068:	f7ff fad8 	bl	800161c <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e03d      	b.n	80020f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800207a:	4b03      	ldr	r3, [pc, #12]	; (8002088 <HAL_RCC_OscConfig+0x4cc>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f0      	bne.n	8002068 <HAL_RCC_OscConfig+0x4ac>
 8002086:	e035      	b.n	80020f4 <HAL_RCC_OscConfig+0x538>
 8002088:	40023800 	.word	0x40023800
 800208c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002090:	4b1b      	ldr	r3, [pc, #108]	; (8002100 <HAL_RCC_OscConfig+0x544>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d028      	beq.n	80020f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d121      	bne.n	80020f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d11a      	bne.n	80020f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020c0:	4013      	ands	r3, r2
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020c6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d111      	bne.n	80020f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d6:	085b      	lsrs	r3, r3, #1
 80020d8:	3b01      	subs	r3, #1
 80020da:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020dc:	429a      	cmp	r2, r3
 80020de:	d107      	bne.n	80020f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d001      	beq.n	80020f4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e000      	b.n	80020f6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40023800 	.word	0x40023800

08002104 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800210e:	2300      	movs	r3, #0
 8002110:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e0d0      	b.n	80022be <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800211c:	4b6a      	ldr	r3, [pc, #424]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 030f 	and.w	r3, r3, #15
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	429a      	cmp	r2, r3
 8002128:	d910      	bls.n	800214c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212a:	4b67      	ldr	r3, [pc, #412]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f023 020f 	bic.w	r2, r3, #15
 8002132:	4965      	ldr	r1, [pc, #404]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	4313      	orrs	r3, r2
 8002138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800213a:	4b63      	ldr	r3, [pc, #396]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	d001      	beq.n	800214c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e0b8      	b.n	80022be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d020      	beq.n	800219a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	d005      	beq.n	8002170 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002164:	4b59      	ldr	r3, [pc, #356]	; (80022cc <HAL_RCC_ClockConfig+0x1c8>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	4a58      	ldr	r2, [pc, #352]	; (80022cc <HAL_RCC_ClockConfig+0x1c8>)
 800216a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800216e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0308 	and.w	r3, r3, #8
 8002178:	2b00      	cmp	r3, #0
 800217a:	d005      	beq.n	8002188 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800217c:	4b53      	ldr	r3, [pc, #332]	; (80022cc <HAL_RCC_ClockConfig+0x1c8>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	4a52      	ldr	r2, [pc, #328]	; (80022cc <HAL_RCC_ClockConfig+0x1c8>)
 8002182:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002186:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002188:	4b50      	ldr	r3, [pc, #320]	; (80022cc <HAL_RCC_ClockConfig+0x1c8>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	494d      	ldr	r1, [pc, #308]	; (80022cc <HAL_RCC_ClockConfig+0x1c8>)
 8002196:	4313      	orrs	r3, r2
 8002198:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d040      	beq.n	8002228 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d107      	bne.n	80021be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ae:	4b47      	ldr	r3, [pc, #284]	; (80022cc <HAL_RCC_ClockConfig+0x1c8>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d115      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e07f      	b.n	80022be <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d107      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c6:	4b41      	ldr	r3, [pc, #260]	; (80022cc <HAL_RCC_ClockConfig+0x1c8>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d109      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e073      	b.n	80022be <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d6:	4b3d      	ldr	r3, [pc, #244]	; (80022cc <HAL_RCC_ClockConfig+0x1c8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e06b      	b.n	80022be <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021e6:	4b39      	ldr	r3, [pc, #228]	; (80022cc <HAL_RCC_ClockConfig+0x1c8>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f023 0203 	bic.w	r2, r3, #3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	4936      	ldr	r1, [pc, #216]	; (80022cc <HAL_RCC_ClockConfig+0x1c8>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021f8:	f7ff fa10 	bl	800161c <HAL_GetTick>
 80021fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fe:	e00a      	b.n	8002216 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002200:	f7ff fa0c 	bl	800161c <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	f241 3288 	movw	r2, #5000	; 0x1388
 800220e:	4293      	cmp	r3, r2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e053      	b.n	80022be <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002216:	4b2d      	ldr	r3, [pc, #180]	; (80022cc <HAL_RCC_ClockConfig+0x1c8>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 020c 	and.w	r2, r3, #12
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	429a      	cmp	r2, r3
 8002226:	d1eb      	bne.n	8002200 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002228:	4b27      	ldr	r3, [pc, #156]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 030f 	and.w	r3, r3, #15
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	d210      	bcs.n	8002258 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002236:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f023 020f 	bic.w	r2, r3, #15
 800223e:	4922      	ldr	r1, [pc, #136]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	4313      	orrs	r3, r2
 8002244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002246:	4b20      	ldr	r3, [pc, #128]	; (80022c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d001      	beq.n	8002258 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e032      	b.n	80022be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d008      	beq.n	8002276 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002264:	4b19      	ldr	r3, [pc, #100]	; (80022cc <HAL_RCC_ClockConfig+0x1c8>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	4916      	ldr	r1, [pc, #88]	; (80022cc <HAL_RCC_ClockConfig+0x1c8>)
 8002272:	4313      	orrs	r3, r2
 8002274:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0308 	and.w	r3, r3, #8
 800227e:	2b00      	cmp	r3, #0
 8002280:	d009      	beq.n	8002296 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002282:	4b12      	ldr	r3, [pc, #72]	; (80022cc <HAL_RCC_ClockConfig+0x1c8>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	490e      	ldr	r1, [pc, #56]	; (80022cc <HAL_RCC_ClockConfig+0x1c8>)
 8002292:	4313      	orrs	r3, r2
 8002294:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002296:	f000 f821 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 800229a:	4602      	mov	r2, r0
 800229c:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <HAL_RCC_ClockConfig+0x1c8>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	490a      	ldr	r1, [pc, #40]	; (80022d0 <HAL_RCC_ClockConfig+0x1cc>)
 80022a8:	5ccb      	ldrb	r3, [r1, r3]
 80022aa:	fa22 f303 	lsr.w	r3, r2, r3
 80022ae:	4a09      	ldr	r2, [pc, #36]	; (80022d4 <HAL_RCC_ClockConfig+0x1d0>)
 80022b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022b2:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <HAL_RCC_ClockConfig+0x1d4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff f96c 	bl	8001594 <HAL_InitTick>

  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40023c00 	.word	0x40023c00
 80022cc:	40023800 	.word	0x40023800
 80022d0:	080024f0 	.word	0x080024f0
 80022d4:	20000000 	.word	0x20000000
 80022d8:	20000004 	.word	0x20000004

080022dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022e0:	b090      	sub	sp, #64	; 0x40
 80022e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	637b      	str	r3, [r7, #52]	; 0x34
 80022e8:	2300      	movs	r3, #0
 80022ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022ec:	2300      	movs	r3, #0
 80022ee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80022f0:	2300      	movs	r3, #0
 80022f2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022f4:	4b59      	ldr	r3, [pc, #356]	; (800245c <HAL_RCC_GetSysClockFreq+0x180>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f003 030c 	and.w	r3, r3, #12
 80022fc:	2b08      	cmp	r3, #8
 80022fe:	d00d      	beq.n	800231c <HAL_RCC_GetSysClockFreq+0x40>
 8002300:	2b08      	cmp	r3, #8
 8002302:	f200 80a1 	bhi.w	8002448 <HAL_RCC_GetSysClockFreq+0x16c>
 8002306:	2b00      	cmp	r3, #0
 8002308:	d002      	beq.n	8002310 <HAL_RCC_GetSysClockFreq+0x34>
 800230a:	2b04      	cmp	r3, #4
 800230c:	d003      	beq.n	8002316 <HAL_RCC_GetSysClockFreq+0x3a>
 800230e:	e09b      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002310:	4b53      	ldr	r3, [pc, #332]	; (8002460 <HAL_RCC_GetSysClockFreq+0x184>)
 8002312:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002314:	e09b      	b.n	800244e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002316:	4b53      	ldr	r3, [pc, #332]	; (8002464 <HAL_RCC_GetSysClockFreq+0x188>)
 8002318:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800231a:	e098      	b.n	800244e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800231c:	4b4f      	ldr	r3, [pc, #316]	; (800245c <HAL_RCC_GetSysClockFreq+0x180>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002324:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002326:	4b4d      	ldr	r3, [pc, #308]	; (800245c <HAL_RCC_GetSysClockFreq+0x180>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d028      	beq.n	8002384 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002332:	4b4a      	ldr	r3, [pc, #296]	; (800245c <HAL_RCC_GetSysClockFreq+0x180>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	099b      	lsrs	r3, r3, #6
 8002338:	2200      	movs	r2, #0
 800233a:	623b      	str	r3, [r7, #32]
 800233c:	627a      	str	r2, [r7, #36]	; 0x24
 800233e:	6a3b      	ldr	r3, [r7, #32]
 8002340:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002344:	2100      	movs	r1, #0
 8002346:	4b47      	ldr	r3, [pc, #284]	; (8002464 <HAL_RCC_GetSysClockFreq+0x188>)
 8002348:	fb03 f201 	mul.w	r2, r3, r1
 800234c:	2300      	movs	r3, #0
 800234e:	fb00 f303 	mul.w	r3, r0, r3
 8002352:	4413      	add	r3, r2
 8002354:	4a43      	ldr	r2, [pc, #268]	; (8002464 <HAL_RCC_GetSysClockFreq+0x188>)
 8002356:	fba0 1202 	umull	r1, r2, r0, r2
 800235a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800235c:	460a      	mov	r2, r1
 800235e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002360:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002362:	4413      	add	r3, r2
 8002364:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002368:	2200      	movs	r2, #0
 800236a:	61bb      	str	r3, [r7, #24]
 800236c:	61fa      	str	r2, [r7, #28]
 800236e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002372:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002376:	f7fd ff47 	bl	8000208 <__aeabi_uldivmod>
 800237a:	4602      	mov	r2, r0
 800237c:	460b      	mov	r3, r1
 800237e:	4613      	mov	r3, r2
 8002380:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002382:	e053      	b.n	800242c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002384:	4b35      	ldr	r3, [pc, #212]	; (800245c <HAL_RCC_GetSysClockFreq+0x180>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	099b      	lsrs	r3, r3, #6
 800238a:	2200      	movs	r2, #0
 800238c:	613b      	str	r3, [r7, #16]
 800238e:	617a      	str	r2, [r7, #20]
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002396:	f04f 0b00 	mov.w	fp, #0
 800239a:	4652      	mov	r2, sl
 800239c:	465b      	mov	r3, fp
 800239e:	f04f 0000 	mov.w	r0, #0
 80023a2:	f04f 0100 	mov.w	r1, #0
 80023a6:	0159      	lsls	r1, r3, #5
 80023a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023ac:	0150      	lsls	r0, r2, #5
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	ebb2 080a 	subs.w	r8, r2, sl
 80023b6:	eb63 090b 	sbc.w	r9, r3, fp
 80023ba:	f04f 0200 	mov.w	r2, #0
 80023be:	f04f 0300 	mov.w	r3, #0
 80023c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80023c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80023ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80023ce:	ebb2 0408 	subs.w	r4, r2, r8
 80023d2:	eb63 0509 	sbc.w	r5, r3, r9
 80023d6:	f04f 0200 	mov.w	r2, #0
 80023da:	f04f 0300 	mov.w	r3, #0
 80023de:	00eb      	lsls	r3, r5, #3
 80023e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023e4:	00e2      	lsls	r2, r4, #3
 80023e6:	4614      	mov	r4, r2
 80023e8:	461d      	mov	r5, r3
 80023ea:	eb14 030a 	adds.w	r3, r4, sl
 80023ee:	603b      	str	r3, [r7, #0]
 80023f0:	eb45 030b 	adc.w	r3, r5, fp
 80023f4:	607b      	str	r3, [r7, #4]
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	f04f 0300 	mov.w	r3, #0
 80023fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002402:	4629      	mov	r1, r5
 8002404:	028b      	lsls	r3, r1, #10
 8002406:	4621      	mov	r1, r4
 8002408:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800240c:	4621      	mov	r1, r4
 800240e:	028a      	lsls	r2, r1, #10
 8002410:	4610      	mov	r0, r2
 8002412:	4619      	mov	r1, r3
 8002414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002416:	2200      	movs	r2, #0
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	60fa      	str	r2, [r7, #12]
 800241c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002420:	f7fd fef2 	bl	8000208 <__aeabi_uldivmod>
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	4613      	mov	r3, r2
 800242a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800242c:	4b0b      	ldr	r3, [pc, #44]	; (800245c <HAL_RCC_GetSysClockFreq+0x180>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	0c1b      	lsrs	r3, r3, #16
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	3301      	adds	r3, #1
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800243c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800243e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002440:	fbb2 f3f3 	udiv	r3, r2, r3
 8002444:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002446:	e002      	b.n	800244e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002448:	4b05      	ldr	r3, [pc, #20]	; (8002460 <HAL_RCC_GetSysClockFreq+0x184>)
 800244a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800244c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800244e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002450:	4618      	mov	r0, r3
 8002452:	3740      	adds	r7, #64	; 0x40
 8002454:	46bd      	mov	sp, r7
 8002456:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800245a:	bf00      	nop
 800245c:	40023800 	.word	0x40023800
 8002460:	00f42400 	.word	0x00f42400
 8002464:	017d7840 	.word	0x017d7840

08002468 <__libc_init_array>:
 8002468:	b570      	push	{r4, r5, r6, lr}
 800246a:	4d0d      	ldr	r5, [pc, #52]	; (80024a0 <__libc_init_array+0x38>)
 800246c:	4c0d      	ldr	r4, [pc, #52]	; (80024a4 <__libc_init_array+0x3c>)
 800246e:	1b64      	subs	r4, r4, r5
 8002470:	10a4      	asrs	r4, r4, #2
 8002472:	2600      	movs	r6, #0
 8002474:	42a6      	cmp	r6, r4
 8002476:	d109      	bne.n	800248c <__libc_init_array+0x24>
 8002478:	4d0b      	ldr	r5, [pc, #44]	; (80024a8 <__libc_init_array+0x40>)
 800247a:	4c0c      	ldr	r4, [pc, #48]	; (80024ac <__libc_init_array+0x44>)
 800247c:	f000 f820 	bl	80024c0 <_init>
 8002480:	1b64      	subs	r4, r4, r5
 8002482:	10a4      	asrs	r4, r4, #2
 8002484:	2600      	movs	r6, #0
 8002486:	42a6      	cmp	r6, r4
 8002488:	d105      	bne.n	8002496 <__libc_init_array+0x2e>
 800248a:	bd70      	pop	{r4, r5, r6, pc}
 800248c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002490:	4798      	blx	r3
 8002492:	3601      	adds	r6, #1
 8002494:	e7ee      	b.n	8002474 <__libc_init_array+0xc>
 8002496:	f855 3b04 	ldr.w	r3, [r5], #4
 800249a:	4798      	blx	r3
 800249c:	3601      	adds	r6, #1
 800249e:	e7f2      	b.n	8002486 <__libc_init_array+0x1e>
 80024a0:	08002508 	.word	0x08002508
 80024a4:	08002508 	.word	0x08002508
 80024a8:	08002508 	.word	0x08002508
 80024ac:	0800250c 	.word	0x0800250c

080024b0 <memset>:
 80024b0:	4402      	add	r2, r0
 80024b2:	4603      	mov	r3, r0
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d100      	bne.n	80024ba <memset+0xa>
 80024b8:	4770      	bx	lr
 80024ba:	f803 1b01 	strb.w	r1, [r3], #1
 80024be:	e7f9      	b.n	80024b4 <memset+0x4>

080024c0 <_init>:
 80024c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024c2:	bf00      	nop
 80024c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024c6:	bc08      	pop	{r3}
 80024c8:	469e      	mov	lr, r3
 80024ca:	4770      	bx	lr

080024cc <_fini>:
 80024cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ce:	bf00      	nop
 80024d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024d2:	bc08      	pop	{r3}
 80024d4:	469e      	mov	lr, r3
 80024d6:	4770      	bx	lr
